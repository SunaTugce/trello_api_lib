# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnterpriseLicenses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_members': 'float',
        'total_members': 'float',
        'related_enterprises': 'list[EnterpriseLicensesRelatedEnterprises]'
    }

    attribute_map = {
        'max_members': 'maxMembers',
        'total_members': 'totalMembers',
        'related_enterprises': 'relatedEnterprises'
    }

    def __init__(self, max_members=None, total_members=None, related_enterprises=None):  # noqa: E501
        """EnterpriseLicenses - a model defined in Swagger"""  # noqa: E501
        self._max_members = None
        self._total_members = None
        self._related_enterprises = None
        self.discriminator = None
        if max_members is not None:
            self.max_members = max_members
        if total_members is not None:
            self.total_members = total_members
        if related_enterprises is not None:
            self.related_enterprises = related_enterprises

    @property
    def max_members(self):
        """Gets the max_members of this EnterpriseLicenses.  # noqa: E501


        :return: The max_members of this EnterpriseLicenses.  # noqa: E501
        :rtype: float
        """
        return self._max_members

    @max_members.setter
    def max_members(self, max_members):
        """Sets the max_members of this EnterpriseLicenses.


        :param max_members: The max_members of this EnterpriseLicenses.  # noqa: E501
        :type: float
        """

        self._max_members = max_members

    @property
    def total_members(self):
        """Gets the total_members of this EnterpriseLicenses.  # noqa: E501


        :return: The total_members of this EnterpriseLicenses.  # noqa: E501
        :rtype: float
        """
        return self._total_members

    @total_members.setter
    def total_members(self, total_members):
        """Sets the total_members of this EnterpriseLicenses.


        :param total_members: The total_members of this EnterpriseLicenses.  # noqa: E501
        :type: float
        """

        self._total_members = total_members

    @property
    def related_enterprises(self):
        """Gets the related_enterprises of this EnterpriseLicenses.  # noqa: E501


        :return: The related_enterprises of this EnterpriseLicenses.  # noqa: E501
        :rtype: list[EnterpriseLicensesRelatedEnterprises]
        """
        return self._related_enterprises

    @related_enterprises.setter
    def related_enterprises(self, related_enterprises):
        """Sets the related_enterprises of this EnterpriseLicenses.


        :param related_enterprises: The related_enterprises of this EnterpriseLicenses.  # noqa: E501
        :type: list[EnterpriseLicensesRelatedEnterprises]
        """

        self._related_enterprises = related_enterprises

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseLicenses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseLicenses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
