# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'description': 'str',
        'id_model': 'TrelloID',
        'callback_url': 'str',
        'active': 'bool',
        'consecutive_failures': 'float',
        'first_consecutive_fail_date': 'date'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'id_model': 'idModel',
        'callback_url': 'callbackURL',
        'active': 'active',
        'consecutive_failures': 'consecutiveFailures',
        'first_consecutive_fail_date': 'firstConsecutiveFailDate'
    }

    def __init__(self, id=None, description=None, id_model=None, callback_url=None, active=None, consecutive_failures=None, first_consecutive_fail_date=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._id_model = None
        self._callback_url = None
        self._active = None
        self._consecutive_failures = None
        self._first_consecutive_fail_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if id_model is not None:
            self.id_model = id_model
        if callback_url is not None:
            self.callback_url = callback_url
        if active is not None:
            self.active = active
        if consecutive_failures is not None:
            self.consecutive_failures = consecutive_failures
        if first_consecutive_fail_date is not None:
            self.first_consecutive_fail_date = first_consecutive_fail_date

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501


        :return: The id of this Webhook.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.


        :param id: The id of this Webhook.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Webhook.  # noqa: E501


        :return: The description of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Webhook.


        :param description: The description of this Webhook.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id_model(self):
        """Gets the id_model of this Webhook.  # noqa: E501


        :return: The id_model of this Webhook.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this Webhook.


        :param id_model: The id_model of this Webhook.  # noqa: E501
        :type: TrelloID
        """

        self._id_model = id_model

    @property
    def callback_url(self):
        """Gets the callback_url of this Webhook.  # noqa: E501


        :return: The callback_url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Webhook.


        :param callback_url: The callback_url of this Webhook.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def active(self):
        """Gets the active of this Webhook.  # noqa: E501


        :return: The active of this Webhook.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Webhook.


        :param active: The active of this Webhook.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def consecutive_failures(self):
        """Gets the consecutive_failures of this Webhook.  # noqa: E501


        :return: The consecutive_failures of this Webhook.  # noqa: E501
        :rtype: float
        """
        return self._consecutive_failures

    @consecutive_failures.setter
    def consecutive_failures(self, consecutive_failures):
        """Sets the consecutive_failures of this Webhook.


        :param consecutive_failures: The consecutive_failures of this Webhook.  # noqa: E501
        :type: float
        """

        self._consecutive_failures = consecutive_failures

    @property
    def first_consecutive_fail_date(self):
        """Gets the first_consecutive_fail_date of this Webhook.  # noqa: E501


        :return: The first_consecutive_fail_date of this Webhook.  # noqa: E501
        :rtype: date
        """
        return self._first_consecutive_fail_date

    @first_consecutive_fail_date.setter
    def first_consecutive_fail_date(self, first_consecutive_fail_date):
        """Sets the first_consecutive_fail_date of this Webhook.


        :param first_consecutive_fail_date: The first_consecutive_fail_date of this Webhook.  # noqa: E501
        :type: date
        """

        self._first_consecutive_fail_date = first_consecutive_fail_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
