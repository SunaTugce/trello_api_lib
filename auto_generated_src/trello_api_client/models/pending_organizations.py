# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PendingOrganizations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'id_member': 'TrelloID',
        'member_requestor': 'PendingOrganizationsMemberRequestor',
        '_date': 'date',
        'display_name': 'str',
        'membership_count': 'float',
        'logo_url': 'str',
        'transferability': 'PendingOrganizationsTransferability'
    }

    attribute_map = {
        'id': 'id',
        'id_member': 'idMember',
        'member_requestor': 'memberRequestor',
        '_date': 'date',
        'display_name': 'displayName',
        'membership_count': 'membershipCount',
        'logo_url': 'logoUrl',
        'transferability': 'transferability'
    }

    def __init__(self, id=None, id_member=None, member_requestor=None, _date=None, display_name=None, membership_count=None, logo_url=None, transferability=None):  # noqa: E501
        """PendingOrganizations - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_member = None
        self._member_requestor = None
        self.__date = None
        self._display_name = None
        self._membership_count = None
        self._logo_url = None
        self._transferability = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_member is not None:
            self.id_member = id_member
        if member_requestor is not None:
            self.member_requestor = member_requestor
        if _date is not None:
            self._date = _date
        if display_name is not None:
            self.display_name = display_name
        if membership_count is not None:
            self.membership_count = membership_count
        if logo_url is not None:
            self.logo_url = logo_url
        if transferability is not None:
            self.transferability = transferability

    @property
    def id(self):
        """Gets the id of this PendingOrganizations.  # noqa: E501


        :return: The id of this PendingOrganizations.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PendingOrganizations.


        :param id: The id of this PendingOrganizations.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def id_member(self):
        """Gets the id_member of this PendingOrganizations.  # noqa: E501


        :return: The id_member of this PendingOrganizations.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this PendingOrganizations.


        :param id_member: The id_member of this PendingOrganizations.  # noqa: E501
        :type: TrelloID
        """

        self._id_member = id_member

    @property
    def member_requestor(self):
        """Gets the member_requestor of this PendingOrganizations.  # noqa: E501


        :return: The member_requestor of this PendingOrganizations.  # noqa: E501
        :rtype: PendingOrganizationsMemberRequestor
        """
        return self._member_requestor

    @member_requestor.setter
    def member_requestor(self, member_requestor):
        """Sets the member_requestor of this PendingOrganizations.


        :param member_requestor: The member_requestor of this PendingOrganizations.  # noqa: E501
        :type: PendingOrganizationsMemberRequestor
        """

        self._member_requestor = member_requestor

    @property
    def _date(self):
        """Gets the _date of this PendingOrganizations.  # noqa: E501


        :return: The _date of this PendingOrganizations.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PendingOrganizations.


        :param _date: The _date of this PendingOrganizations.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def display_name(self):
        """Gets the display_name of this PendingOrganizations.  # noqa: E501


        :return: The display_name of this PendingOrganizations.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PendingOrganizations.


        :param display_name: The display_name of this PendingOrganizations.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def membership_count(self):
        """Gets the membership_count of this PendingOrganizations.  # noqa: E501


        :return: The membership_count of this PendingOrganizations.  # noqa: E501
        :rtype: float
        """
        return self._membership_count

    @membership_count.setter
    def membership_count(self, membership_count):
        """Sets the membership_count of this PendingOrganizations.


        :param membership_count: The membership_count of this PendingOrganizations.  # noqa: E501
        :type: float
        """

        self._membership_count = membership_count

    @property
    def logo_url(self):
        """Gets the logo_url of this PendingOrganizations.  # noqa: E501


        :return: The logo_url of this PendingOrganizations.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PendingOrganizations.


        :param logo_url: The logo_url of this PendingOrganizations.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def transferability(self):
        """Gets the transferability of this PendingOrganizations.  # noqa: E501


        :return: The transferability of this PendingOrganizations.  # noqa: E501
        :rtype: PendingOrganizationsTransferability
        """
        return self._transferability

    @transferability.setter
    def transferability(self, transferability):
        """Sets the transferability of this PendingOrganizations.


        :param transferability: The transferability of this PendingOrganizations.  # noqa: E501
        :type: PendingOrganizationsTransferability
        """

        self._transferability = transferability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PendingOrganizations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PendingOrganizations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
