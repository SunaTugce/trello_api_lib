# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Member(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'activity_blocked': 'bool',
        'avatar_hash': 'str',
        'avatar_url': 'str',
        'bio': 'str',
        'bio_data': 'CardDescData',
        'confirmed': 'bool',
        'full_name': 'str',
        'id_enterprise': 'TrelloID',
        'id_enterprises_deactivated': 'list[str]',
        'id_member_referrer': 'TrelloID',
        'id_prem_orgs_admin': 'list[TrelloID]',
        'initials': 'str',
        'member_type': 'str',
        'non_public': 'MemberNonPublic',
        'non_public_available': 'bool',
        'products': 'list[int]',
        'url': 'str',
        'username': 'str',
        'status': 'str',
        'aa_email': 'str',
        'aa_enrolled_date': 'str',
        'aa_id': 'str',
        'avatar_source': 'str',
        'email': 'str',
        'gravatar_hash': 'str',
        'id_boards': 'list[TrelloID]',
        'id_organizations': 'list[TrelloID]',
        'id_enterprises_admin': 'list[TrelloID]',
        'limits': 'LimitsObject',
        'login_types': 'list[str]',
        'marketing_opt_in': 'MemberMarketingOptIn',
        'messages_dismissed': 'MemberMessagesDismissed',
        'one_time_messages_dismissed': 'list[str]',
        'prefs': 'MemberPrefs',
        'trophies': 'list[str]',
        'uploaded_avatar_hash': 'str',
        'uploaded_avatar_url': 'str',
        'premium_features': 'list[str]',
        'is_aa_mastered': 'bool',
        'ix_update': 'float',
        'id_boards_pinned': 'list[TrelloID]'
    }

    attribute_map = {
        'id': 'id',
        'activity_blocked': 'activityBlocked',
        'avatar_hash': 'avatarHash',
        'avatar_url': 'avatarUrl',
        'bio': 'bio',
        'bio_data': 'bioData',
        'confirmed': 'confirmed',
        'full_name': 'fullName',
        'id_enterprise': 'idEnterprise',
        'id_enterprises_deactivated': 'idEnterprisesDeactivated',
        'id_member_referrer': 'idMemberReferrer',
        'id_prem_orgs_admin': 'idPremOrgsAdmin',
        'initials': 'initials',
        'member_type': 'memberType',
        'non_public': 'nonPublic',
        'non_public_available': 'nonPublicAvailable',
        'products': 'products',
        'url': 'url',
        'username': 'username',
        'status': 'status',
        'aa_email': 'aaEmail',
        'aa_enrolled_date': 'aaEnrolledDate',
        'aa_id': 'aaId',
        'avatar_source': 'avatarSource',
        'email': 'email',
        'gravatar_hash': 'gravatarHash',
        'id_boards': 'idBoards',
        'id_organizations': 'idOrganizations',
        'id_enterprises_admin': 'idEnterprisesAdmin',
        'limits': 'limits',
        'login_types': 'loginTypes',
        'marketing_opt_in': 'marketingOptIn',
        'messages_dismissed': 'messagesDismissed',
        'one_time_messages_dismissed': 'oneTimeMessagesDismissed',
        'prefs': 'prefs',
        'trophies': 'trophies',
        'uploaded_avatar_hash': 'uploadedAvatarHash',
        'uploaded_avatar_url': 'uploadedAvatarUrl',
        'premium_features': 'premiumFeatures',
        'is_aa_mastered': 'isAaMastered',
        'ix_update': 'ixUpdate',
        'id_boards_pinned': 'idBoardsPinned'
    }

    def __init__(self, id=None, activity_blocked=None, avatar_hash=None, avatar_url=None, bio=None, bio_data=None, confirmed=None, full_name=None, id_enterprise=None, id_enterprises_deactivated=None, id_member_referrer=None, id_prem_orgs_admin=None, initials=None, member_type=None, non_public=None, non_public_available=None, products=None, url=None, username=None, status=None, aa_email=None, aa_enrolled_date=None, aa_id=None, avatar_source=None, email=None, gravatar_hash=None, id_boards=None, id_organizations=None, id_enterprises_admin=None, limits=None, login_types=None, marketing_opt_in=None, messages_dismissed=None, one_time_messages_dismissed=None, prefs=None, trophies=None, uploaded_avatar_hash=None, uploaded_avatar_url=None, premium_features=None, is_aa_mastered=None, ix_update=None, id_boards_pinned=None):  # noqa: E501
        """Member - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._activity_blocked = None
        self._avatar_hash = None
        self._avatar_url = None
        self._bio = None
        self._bio_data = None
        self._confirmed = None
        self._full_name = None
        self._id_enterprise = None
        self._id_enterprises_deactivated = None
        self._id_member_referrer = None
        self._id_prem_orgs_admin = None
        self._initials = None
        self._member_type = None
        self._non_public = None
        self._non_public_available = None
        self._products = None
        self._url = None
        self._username = None
        self._status = None
        self._aa_email = None
        self._aa_enrolled_date = None
        self._aa_id = None
        self._avatar_source = None
        self._email = None
        self._gravatar_hash = None
        self._id_boards = None
        self._id_organizations = None
        self._id_enterprises_admin = None
        self._limits = None
        self._login_types = None
        self._marketing_opt_in = None
        self._messages_dismissed = None
        self._one_time_messages_dismissed = None
        self._prefs = None
        self._trophies = None
        self._uploaded_avatar_hash = None
        self._uploaded_avatar_url = None
        self._premium_features = None
        self._is_aa_mastered = None
        self._ix_update = None
        self._id_boards_pinned = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if activity_blocked is not None:
            self.activity_blocked = activity_blocked
        if avatar_hash is not None:
            self.avatar_hash = avatar_hash
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if bio is not None:
            self.bio = bio
        if bio_data is not None:
            self.bio_data = bio_data
        if confirmed is not None:
            self.confirmed = confirmed
        if full_name is not None:
            self.full_name = full_name
        if id_enterprise is not None:
            self.id_enterprise = id_enterprise
        if id_enterprises_deactivated is not None:
            self.id_enterprises_deactivated = id_enterprises_deactivated
        if id_member_referrer is not None:
            self.id_member_referrer = id_member_referrer
        if id_prem_orgs_admin is not None:
            self.id_prem_orgs_admin = id_prem_orgs_admin
        if initials is not None:
            self.initials = initials
        if member_type is not None:
            self.member_type = member_type
        if non_public is not None:
            self.non_public = non_public
        if non_public_available is not None:
            self.non_public_available = non_public_available
        if products is not None:
            self.products = products
        if url is not None:
            self.url = url
        if username is not None:
            self.username = username
        if status is not None:
            self.status = status
        if aa_email is not None:
            self.aa_email = aa_email
        if aa_enrolled_date is not None:
            self.aa_enrolled_date = aa_enrolled_date
        if aa_id is not None:
            self.aa_id = aa_id
        if avatar_source is not None:
            self.avatar_source = avatar_source
        if email is not None:
            self.email = email
        if gravatar_hash is not None:
            self.gravatar_hash = gravatar_hash
        if id_boards is not None:
            self.id_boards = id_boards
        if id_organizations is not None:
            self.id_organizations = id_organizations
        if id_enterprises_admin is not None:
            self.id_enterprises_admin = id_enterprises_admin
        if limits is not None:
            self.limits = limits
        if login_types is not None:
            self.login_types = login_types
        if marketing_opt_in is not None:
            self.marketing_opt_in = marketing_opt_in
        if messages_dismissed is not None:
            self.messages_dismissed = messages_dismissed
        if one_time_messages_dismissed is not None:
            self.one_time_messages_dismissed = one_time_messages_dismissed
        if prefs is not None:
            self.prefs = prefs
        if trophies is not None:
            self.trophies = trophies
        if uploaded_avatar_hash is not None:
            self.uploaded_avatar_hash = uploaded_avatar_hash
        if uploaded_avatar_url is not None:
            self.uploaded_avatar_url = uploaded_avatar_url
        if premium_features is not None:
            self.premium_features = premium_features
        if is_aa_mastered is not None:
            self.is_aa_mastered = is_aa_mastered
        if ix_update is not None:
            self.ix_update = ix_update
        if id_boards_pinned is not None:
            self.id_boards_pinned = id_boards_pinned

    @property
    def id(self):
        """Gets the id of this Member.  # noqa: E501


        :return: The id of this Member.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Member.


        :param id: The id of this Member.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def activity_blocked(self):
        """Gets the activity_blocked of this Member.  # noqa: E501


        :return: The activity_blocked of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._activity_blocked

    @activity_blocked.setter
    def activity_blocked(self, activity_blocked):
        """Sets the activity_blocked of this Member.


        :param activity_blocked: The activity_blocked of this Member.  # noqa: E501
        :type: bool
        """

        self._activity_blocked = activity_blocked

    @property
    def avatar_hash(self):
        """Gets the avatar_hash of this Member.  # noqa: E501


        :return: The avatar_hash of this Member.  # noqa: E501
        :rtype: str
        """
        return self._avatar_hash

    @avatar_hash.setter
    def avatar_hash(self, avatar_hash):
        """Sets the avatar_hash of this Member.


        :param avatar_hash: The avatar_hash of this Member.  # noqa: E501
        :type: str
        """

        self._avatar_hash = avatar_hash

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Member.  # noqa: E501


        :return: The avatar_url of this Member.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Member.


        :param avatar_url: The avatar_url of this Member.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def bio(self):
        """Gets the bio of this Member.  # noqa: E501


        :return: The bio of this Member.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Member.


        :param bio: The bio of this Member.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def bio_data(self):
        """Gets the bio_data of this Member.  # noqa: E501


        :return: The bio_data of this Member.  # noqa: E501
        :rtype: CardDescData
        """
        return self._bio_data

    @bio_data.setter
    def bio_data(self, bio_data):
        """Sets the bio_data of this Member.


        :param bio_data: The bio_data of this Member.  # noqa: E501
        :type: CardDescData
        """

        self._bio_data = bio_data

    @property
    def confirmed(self):
        """Gets the confirmed of this Member.  # noqa: E501


        :return: The confirmed of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this Member.


        :param confirmed: The confirmed of this Member.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def full_name(self):
        """Gets the full_name of this Member.  # noqa: E501


        :return: The full_name of this Member.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Member.


        :param full_name: The full_name of this Member.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def id_enterprise(self):
        """Gets the id_enterprise of this Member.  # noqa: E501


        :return: The id_enterprise of this Member.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_enterprise

    @id_enterprise.setter
    def id_enterprise(self, id_enterprise):
        """Sets the id_enterprise of this Member.


        :param id_enterprise: The id_enterprise of this Member.  # noqa: E501
        :type: TrelloID
        """

        self._id_enterprise = id_enterprise

    @property
    def id_enterprises_deactivated(self):
        """Gets the id_enterprises_deactivated of this Member.  # noqa: E501


        :return: The id_enterprises_deactivated of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_enterprises_deactivated

    @id_enterprises_deactivated.setter
    def id_enterprises_deactivated(self, id_enterprises_deactivated):
        """Sets the id_enterprises_deactivated of this Member.


        :param id_enterprises_deactivated: The id_enterprises_deactivated of this Member.  # noqa: E501
        :type: list[str]
        """

        self._id_enterprises_deactivated = id_enterprises_deactivated

    @property
    def id_member_referrer(self):
        """Gets the id_member_referrer of this Member.  # noqa: E501


        :return: The id_member_referrer of this Member.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_member_referrer

    @id_member_referrer.setter
    def id_member_referrer(self, id_member_referrer):
        """Sets the id_member_referrer of this Member.


        :param id_member_referrer: The id_member_referrer of this Member.  # noqa: E501
        :type: TrelloID
        """

        self._id_member_referrer = id_member_referrer

    @property
    def id_prem_orgs_admin(self):
        """Gets the id_prem_orgs_admin of this Member.  # noqa: E501


        :return: The id_prem_orgs_admin of this Member.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_prem_orgs_admin

    @id_prem_orgs_admin.setter
    def id_prem_orgs_admin(self, id_prem_orgs_admin):
        """Sets the id_prem_orgs_admin of this Member.


        :param id_prem_orgs_admin: The id_prem_orgs_admin of this Member.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_prem_orgs_admin = id_prem_orgs_admin

    @property
    def initials(self):
        """Gets the initials of this Member.  # noqa: E501


        :return: The initials of this Member.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Member.


        :param initials: The initials of this Member.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def member_type(self):
        """Gets the member_type of this Member.  # noqa: E501


        :return: The member_type of this Member.  # noqa: E501
        :rtype: str
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this Member.


        :param member_type: The member_type of this Member.  # noqa: E501
        :type: str
        """
        allowed_values = ["normal", "ghost"]  # noqa: E501
        if member_type not in allowed_values:
            raise ValueError(
                "Invalid value for `member_type` ({0}), must be one of {1}"  # noqa: E501
                .format(member_type, allowed_values)
            )

        self._member_type = member_type

    @property
    def non_public(self):
        """Gets the non_public of this Member.  # noqa: E501


        :return: The non_public of this Member.  # noqa: E501
        :rtype: MemberNonPublic
        """
        return self._non_public

    @non_public.setter
    def non_public(self, non_public):
        """Sets the non_public of this Member.


        :param non_public: The non_public of this Member.  # noqa: E501
        :type: MemberNonPublic
        """

        self._non_public = non_public

    @property
    def non_public_available(self):
        """Gets the non_public_available of this Member.  # noqa: E501

        Whether the response contains non-public profile data for the member  # noqa: E501

        :return: The non_public_available of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._non_public_available

    @non_public_available.setter
    def non_public_available(self, non_public_available):
        """Sets the non_public_available of this Member.

        Whether the response contains non-public profile data for the member  # noqa: E501

        :param non_public_available: The non_public_available of this Member.  # noqa: E501
        :type: bool
        """

        self._non_public_available = non_public_available

    @property
    def products(self):
        """Gets the products of this Member.  # noqa: E501


        :return: The products of this Member.  # noqa: E501
        :rtype: list[int]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Member.


        :param products: The products of this Member.  # noqa: E501
        :type: list[int]
        """

        self._products = products

    @property
    def url(self):
        """Gets the url of this Member.  # noqa: E501


        :return: The url of this Member.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Member.


        :param url: The url of this Member.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this Member.  # noqa: E501


        :return: The username of this Member.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Member.


        :param username: The username of this Member.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def status(self):
        """Gets the status of this Member.  # noqa: E501


        :return: The status of this Member.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Member.


        :param status: The status of this Member.  # noqa: E501
        :type: str
        """
        allowed_values = ["disconnected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def aa_email(self):
        """Gets the aa_email of this Member.  # noqa: E501


        :return: The aa_email of this Member.  # noqa: E501
        :rtype: str
        """
        return self._aa_email

    @aa_email.setter
    def aa_email(self, aa_email):
        """Sets the aa_email of this Member.


        :param aa_email: The aa_email of this Member.  # noqa: E501
        :type: str
        """

        self._aa_email = aa_email

    @property
    def aa_enrolled_date(self):
        """Gets the aa_enrolled_date of this Member.  # noqa: E501


        :return: The aa_enrolled_date of this Member.  # noqa: E501
        :rtype: str
        """
        return self._aa_enrolled_date

    @aa_enrolled_date.setter
    def aa_enrolled_date(self, aa_enrolled_date):
        """Sets the aa_enrolled_date of this Member.


        :param aa_enrolled_date: The aa_enrolled_date of this Member.  # noqa: E501
        :type: str
        """

        self._aa_enrolled_date = aa_enrolled_date

    @property
    def aa_id(self):
        """Gets the aa_id of this Member.  # noqa: E501


        :return: The aa_id of this Member.  # noqa: E501
        :rtype: str
        """
        return self._aa_id

    @aa_id.setter
    def aa_id(self, aa_id):
        """Sets the aa_id of this Member.


        :param aa_id: The aa_id of this Member.  # noqa: E501
        :type: str
        """

        self._aa_id = aa_id

    @property
    def avatar_source(self):
        """Gets the avatar_source of this Member.  # noqa: E501


        :return: The avatar_source of this Member.  # noqa: E501
        :rtype: str
        """
        return self._avatar_source

    @avatar_source.setter
    def avatar_source(self, avatar_source):
        """Sets the avatar_source of this Member.


        :param avatar_source: The avatar_source of this Member.  # noqa: E501
        :type: str
        """
        allowed_values = ["gravatar", "upload"]  # noqa: E501
        if avatar_source not in allowed_values:
            raise ValueError(
                "Invalid value for `avatar_source` ({0}), must be one of {1}"  # noqa: E501
                .format(avatar_source, allowed_values)
            )

        self._avatar_source = avatar_source

    @property
    def email(self):
        """Gets the email of this Member.  # noqa: E501


        :return: The email of this Member.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Member.


        :param email: The email of this Member.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def gravatar_hash(self):
        """Gets the gravatar_hash of this Member.  # noqa: E501


        :return: The gravatar_hash of this Member.  # noqa: E501
        :rtype: str
        """
        return self._gravatar_hash

    @gravatar_hash.setter
    def gravatar_hash(self, gravatar_hash):
        """Sets the gravatar_hash of this Member.


        :param gravatar_hash: The gravatar_hash of this Member.  # noqa: E501
        :type: str
        """

        self._gravatar_hash = gravatar_hash

    @property
    def id_boards(self):
        """Gets the id_boards of this Member.  # noqa: E501


        :return: The id_boards of this Member.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_boards

    @id_boards.setter
    def id_boards(self, id_boards):
        """Sets the id_boards of this Member.


        :param id_boards: The id_boards of this Member.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_boards = id_boards

    @property
    def id_organizations(self):
        """Gets the id_organizations of this Member.  # noqa: E501


        :return: The id_organizations of this Member.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_organizations

    @id_organizations.setter
    def id_organizations(self, id_organizations):
        """Sets the id_organizations of this Member.


        :param id_organizations: The id_organizations of this Member.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_organizations = id_organizations

    @property
    def id_enterprises_admin(self):
        """Gets the id_enterprises_admin of this Member.  # noqa: E501


        :return: The id_enterprises_admin of this Member.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_enterprises_admin

    @id_enterprises_admin.setter
    def id_enterprises_admin(self, id_enterprises_admin):
        """Sets the id_enterprises_admin of this Member.


        :param id_enterprises_admin: The id_enterprises_admin of this Member.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_enterprises_admin = id_enterprises_admin

    @property
    def limits(self):
        """Gets the limits of this Member.  # noqa: E501


        :return: The limits of this Member.  # noqa: E501
        :rtype: LimitsObject
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this Member.


        :param limits: The limits of this Member.  # noqa: E501
        :type: LimitsObject
        """

        self._limits = limits

    @property
    def login_types(self):
        """Gets the login_types of this Member.  # noqa: E501


        :return: The login_types of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._login_types

    @login_types.setter
    def login_types(self, login_types):
        """Sets the login_types of this Member.


        :param login_types: The login_types of this Member.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["password", "saml"]  # noqa: E501
        if not set(login_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `login_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(login_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._login_types = login_types

    @property
    def marketing_opt_in(self):
        """Gets the marketing_opt_in of this Member.  # noqa: E501


        :return: The marketing_opt_in of this Member.  # noqa: E501
        :rtype: MemberMarketingOptIn
        """
        return self._marketing_opt_in

    @marketing_opt_in.setter
    def marketing_opt_in(self, marketing_opt_in):
        """Sets the marketing_opt_in of this Member.


        :param marketing_opt_in: The marketing_opt_in of this Member.  # noqa: E501
        :type: MemberMarketingOptIn
        """

        self._marketing_opt_in = marketing_opt_in

    @property
    def messages_dismissed(self):
        """Gets the messages_dismissed of this Member.  # noqa: E501


        :return: The messages_dismissed of this Member.  # noqa: E501
        :rtype: MemberMessagesDismissed
        """
        return self._messages_dismissed

    @messages_dismissed.setter
    def messages_dismissed(self, messages_dismissed):
        """Sets the messages_dismissed of this Member.


        :param messages_dismissed: The messages_dismissed of this Member.  # noqa: E501
        :type: MemberMessagesDismissed
        """

        self._messages_dismissed = messages_dismissed

    @property
    def one_time_messages_dismissed(self):
        """Gets the one_time_messages_dismissed of this Member.  # noqa: E501


        :return: The one_time_messages_dismissed of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._one_time_messages_dismissed

    @one_time_messages_dismissed.setter
    def one_time_messages_dismissed(self, one_time_messages_dismissed):
        """Sets the one_time_messages_dismissed of this Member.


        :param one_time_messages_dismissed: The one_time_messages_dismissed of this Member.  # noqa: E501
        :type: list[str]
        """

        self._one_time_messages_dismissed = one_time_messages_dismissed

    @property
    def prefs(self):
        """Gets the prefs of this Member.  # noqa: E501


        :return: The prefs of this Member.  # noqa: E501
        :rtype: MemberPrefs
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this Member.


        :param prefs: The prefs of this Member.  # noqa: E501
        :type: MemberPrefs
        """

        self._prefs = prefs

    @property
    def trophies(self):
        """Gets the trophies of this Member.  # noqa: E501


        :return: The trophies of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._trophies

    @trophies.setter
    def trophies(self, trophies):
        """Sets the trophies of this Member.


        :param trophies: The trophies of this Member.  # noqa: E501
        :type: list[str]
        """

        self._trophies = trophies

    @property
    def uploaded_avatar_hash(self):
        """Gets the uploaded_avatar_hash of this Member.  # noqa: E501


        :return: The uploaded_avatar_hash of this Member.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_avatar_hash

    @uploaded_avatar_hash.setter
    def uploaded_avatar_hash(self, uploaded_avatar_hash):
        """Sets the uploaded_avatar_hash of this Member.


        :param uploaded_avatar_hash: The uploaded_avatar_hash of this Member.  # noqa: E501
        :type: str
        """

        self._uploaded_avatar_hash = uploaded_avatar_hash

    @property
    def uploaded_avatar_url(self):
        """Gets the uploaded_avatar_url of this Member.  # noqa: E501


        :return: The uploaded_avatar_url of this Member.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_avatar_url

    @uploaded_avatar_url.setter
    def uploaded_avatar_url(self, uploaded_avatar_url):
        """Sets the uploaded_avatar_url of this Member.


        :param uploaded_avatar_url: The uploaded_avatar_url of this Member.  # noqa: E501
        :type: str
        """

        self._uploaded_avatar_url = uploaded_avatar_url

    @property
    def premium_features(self):
        """Gets the premium_features of this Member.  # noqa: E501


        :return: The premium_features of this Member.  # noqa: E501
        :rtype: list[str]
        """
        return self._premium_features

    @premium_features.setter
    def premium_features(self, premium_features):
        """Sets the premium_features of this Member.


        :param premium_features: The premium_features of this Member.  # noqa: E501
        :type: list[str]
        """

        self._premium_features = premium_features

    @property
    def is_aa_mastered(self):
        """Gets the is_aa_mastered of this Member.  # noqa: E501


        :return: The is_aa_mastered of this Member.  # noqa: E501
        :rtype: bool
        """
        return self._is_aa_mastered

    @is_aa_mastered.setter
    def is_aa_mastered(self, is_aa_mastered):
        """Sets the is_aa_mastered of this Member.


        :param is_aa_mastered: The is_aa_mastered of this Member.  # noqa: E501
        :type: bool
        """

        self._is_aa_mastered = is_aa_mastered

    @property
    def ix_update(self):
        """Gets the ix_update of this Member.  # noqa: E501


        :return: The ix_update of this Member.  # noqa: E501
        :rtype: float
        """
        return self._ix_update

    @ix_update.setter
    def ix_update(self, ix_update):
        """Sets the ix_update of this Member.


        :param ix_update: The ix_update of this Member.  # noqa: E501
        :type: float
        """

        self._ix_update = ix_update

    @property
    def id_boards_pinned(self):
        """Gets the id_boards_pinned of this Member.  # noqa: E501


        :return: The id_boards_pinned of this Member.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_boards_pinned

    @id_boards_pinned.setter
    def id_boards_pinned(self, id_boards_pinned):
        """Sets the id_boards_pinned of this Member.


        :param id_boards_pinned: The id_boards_pinned of this Member.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_boards_pinned = id_boards_pinned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Member, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Member):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
