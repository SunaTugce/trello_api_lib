# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrelloList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'name': 'str',
        'closed': 'bool',
        'pos': 'float',
        'soft_limit': 'str',
        'id_board': 'str',
        'subscribed': 'bool',
        'limits': 'Limits'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'closed': 'closed',
        'pos': 'pos',
        'soft_limit': 'softLimit',
        'id_board': 'idBoard',
        'subscribed': 'subscribed',
        'limits': 'limits'
    }

    def __init__(self, id=None, name=None, closed=None, pos=None, soft_limit=None, id_board=None, subscribed=None, limits=None):  # noqa: E501
        """TrelloList - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._closed = None
        self._pos = None
        self._soft_limit = None
        self._id_board = None
        self._subscribed = None
        self._limits = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if closed is not None:
            self.closed = closed
        if pos is not None:
            self.pos = pos
        if soft_limit is not None:
            self.soft_limit = soft_limit
        if id_board is not None:
            self.id_board = id_board
        if subscribed is not None:
            self.subscribed = subscribed
        if limits is not None:
            self.limits = limits

    @property
    def id(self):
        """Gets the id of this TrelloList.  # noqa: E501


        :return: The id of this TrelloList.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrelloList.


        :param id: The id of this TrelloList.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrelloList.  # noqa: E501

        The name of the list  # noqa: E501

        :return: The name of this TrelloList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrelloList.

        The name of the list  # noqa: E501

        :param name: The name of this TrelloList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def closed(self):
        """Gets the closed of this TrelloList.  # noqa: E501


        :return: The closed of this TrelloList.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this TrelloList.


        :param closed: The closed of this TrelloList.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def pos(self):
        """Gets the pos of this TrelloList.  # noqa: E501


        :return: The pos of this TrelloList.  # noqa: E501
        :rtype: float
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this TrelloList.


        :param pos: The pos of this TrelloList.  # noqa: E501
        :type: float
        """

        self._pos = pos

    @property
    def soft_limit(self):
        """Gets the soft_limit of this TrelloList.  # noqa: E501


        :return: The soft_limit of this TrelloList.  # noqa: E501
        :rtype: str
        """
        return self._soft_limit

    @soft_limit.setter
    def soft_limit(self, soft_limit):
        """Sets the soft_limit of this TrelloList.


        :param soft_limit: The soft_limit of this TrelloList.  # noqa: E501
        :type: str
        """

        self._soft_limit = soft_limit

    @property
    def id_board(self):
        """Gets the id_board of this TrelloList.  # noqa: E501


        :return: The id_board of this TrelloList.  # noqa: E501
        :rtype: str
        """
        return self._id_board

    @id_board.setter
    def id_board(self, id_board):
        """Sets the id_board of this TrelloList.


        :param id_board: The id_board of this TrelloList.  # noqa: E501
        :type: str
        """

        self._id_board = id_board

    @property
    def subscribed(self):
        """Gets the subscribed of this TrelloList.  # noqa: E501


        :return: The subscribed of this TrelloList.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this TrelloList.


        :param subscribed: The subscribed of this TrelloList.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def limits(self):
        """Gets the limits of this TrelloList.  # noqa: E501


        :return: The limits of this TrelloList.  # noqa: E501
        :rtype: Limits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this TrelloList.


        :param limits: The limits of this TrelloList.  # noqa: E501
        :type: Limits
        """

        self._limits = limits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrelloList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrelloList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
