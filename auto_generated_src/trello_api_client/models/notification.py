# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unread': 'bool',
        'type': 'str',
        '_date': 'str',
        'date_read': 'str',
        'data': 'str',
        'card': 'Card',
        'board': 'Board',
        'id_member_creator': 'TrelloID',
        'id_action': 'TrelloID',
        'reactions': 'list'
    }

    attribute_map = {
        'id': 'id',
        'unread': 'unread',
        'type': 'type',
        '_date': 'date',
        'date_read': 'dateRead',
        'data': 'data',
        'card': 'card',
        'board': 'board',
        'id_member_creator': 'idMemberCreator',
        'id_action': 'idAction',
        'reactions': 'reactions'
    }

    def __init__(self, id=None, unread=None, type=None, _date=None, date_read=None, data=None, card=None, board=None, id_member_creator=None, id_action=None, reactions=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._unread = None
        self._type = None
        self.__date = None
        self._date_read = None
        self._data = None
        self._card = None
        self._board = None
        self._id_member_creator = None
        self._id_action = None
        self._reactions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if unread is not None:
            self.unread = unread
        if type is not None:
            self.type = type
        if _date is not None:
            self._date = _date
        if date_read is not None:
            self.date_read = date_read
        if data is not None:
            self.data = data
        if card is not None:
            self.card = card
        if board is not None:
            self.board = board
        if id_member_creator is not None:
            self.id_member_creator = id_member_creator
        if id_action is not None:
            self.id_action = id_action
        if reactions is not None:
            self.reactions = reactions

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501


        :return: The id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def unread(self):
        """Gets the unread of this Notification.  # noqa: E501


        :return: The unread of this Notification.  # noqa: E501
        :rtype: bool
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Notification.


        :param unread: The unread of this Notification.  # noqa: E501
        :type: bool
        """

        self._unread = unread

    @property
    def type(self):
        """Gets the type of this Notification.  # noqa: E501


        :return: The type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.


        :param type: The type of this Notification.  # noqa: E501
        :type: str
        """
        allowed_values = ["cardDueSoon"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def _date(self):
        """Gets the _date of this Notification.  # noqa: E501


        :return: The _date of this Notification.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Notification.


        :param _date: The _date of this Notification.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def date_read(self):
        """Gets the date_read of this Notification.  # noqa: E501


        :return: The date_read of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._date_read

    @date_read.setter
    def date_read(self, date_read):
        """Sets the date_read of this Notification.


        :param date_read: The date_read of this Notification.  # noqa: E501
        :type: str
        """

        self._date_read = date_read

    @property
    def data(self):
        """Gets the data of this Notification.  # noqa: E501


        :return: The data of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Notification.


        :param data: The data of this Notification.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def card(self):
        """Gets the card of this Notification.  # noqa: E501


        :return: The card of this Notification.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Notification.


        :param card: The card of this Notification.  # noqa: E501
        :type: Card
        """

        self._card = card

    @property
    def board(self):
        """Gets the board of this Notification.  # noqa: E501


        :return: The board of this Notification.  # noqa: E501
        :rtype: Board
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this Notification.


        :param board: The board of this Notification.  # noqa: E501
        :type: Board
        """

        self._board = board

    @property
    def id_member_creator(self):
        """Gets the id_member_creator of this Notification.  # noqa: E501


        :return: The id_member_creator of this Notification.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_member_creator

    @id_member_creator.setter
    def id_member_creator(self, id_member_creator):
        """Sets the id_member_creator of this Notification.


        :param id_member_creator: The id_member_creator of this Notification.  # noqa: E501
        :type: TrelloID
        """

        self._id_member_creator = id_member_creator

    @property
    def id_action(self):
        """Gets the id_action of this Notification.  # noqa: E501


        :return: The id_action of this Notification.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_action

    @id_action.setter
    def id_action(self, id_action):
        """Sets the id_action of this Notification.


        :param id_action: The id_action of this Notification.  # noqa: E501
        :type: TrelloID
        """

        self._id_action = id_action

    @property
    def reactions(self):
        """Gets the reactions of this Notification.  # noqa: E501


        :return: The reactions of this Notification.  # noqa: E501
        :rtype: list
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this Notification.


        :param reactions: The reactions of this Notification.  # noqa: E501
        :type: list
        """

        self._reactions = reactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
