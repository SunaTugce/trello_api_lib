# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmojiTrello(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unified': 'str',
        'name': 'str',
        'native': 'str',
        'short_name': 'str',
        'short_names': 'list[str]',
        'text': 'str',
        'texts': 'str',
        'category': 'str',
        'sheet_x': 'float',
        'sheet_y': 'float',
        'tts': 'str',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'unified': 'unified',
        'name': 'name',
        'native': 'native',
        'short_name': 'shortName',
        'short_names': 'shortNames',
        'text': 'text',
        'texts': 'texts',
        'category': 'category',
        'sheet_x': 'sheetX',
        'sheet_y': 'sheetY',
        'tts': 'tts',
        'keywords': 'keywords'
    }

    def __init__(self, unified=None, name=None, native=None, short_name=None, short_names=None, text=None, texts=None, category=None, sheet_x=None, sheet_y=None, tts=None, keywords=None):  # noqa: E501
        """EmojiTrello - a model defined in Swagger"""  # noqa: E501
        self._unified = None
        self._name = None
        self._native = None
        self._short_name = None
        self._short_names = None
        self._text = None
        self._texts = None
        self._category = None
        self._sheet_x = None
        self._sheet_y = None
        self._tts = None
        self._keywords = None
        self.discriminator = None
        if unified is not None:
            self.unified = unified
        if name is not None:
            self.name = name
        if native is not None:
            self.native = native
        if short_name is not None:
            self.short_name = short_name
        if short_names is not None:
            self.short_names = short_names
        if text is not None:
            self.text = text
        if texts is not None:
            self.texts = texts
        if category is not None:
            self.category = category
        if sheet_x is not None:
            self.sheet_x = sheet_x
        if sheet_y is not None:
            self.sheet_y = sheet_y
        if tts is not None:
            self.tts = tts
        if keywords is not None:
            self.keywords = keywords

    @property
    def unified(self):
        """Gets the unified of this EmojiTrello.  # noqa: E501


        :return: The unified of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._unified

    @unified.setter
    def unified(self, unified):
        """Sets the unified of this EmojiTrello.


        :param unified: The unified of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._unified = unified

    @property
    def name(self):
        """Gets the name of this EmojiTrello.  # noqa: E501


        :return: The name of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmojiTrello.


        :param name: The name of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def native(self):
        """Gets the native of this EmojiTrello.  # noqa: E501


        :return: The native of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this EmojiTrello.


        :param native: The native of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._native = native

    @property
    def short_name(self):
        """Gets the short_name of this EmojiTrello.  # noqa: E501


        :return: The short_name of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this EmojiTrello.


        :param short_name: The short_name of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def short_names(self):
        """Gets the short_names of this EmojiTrello.  # noqa: E501


        :return: The short_names of this EmojiTrello.  # noqa: E501
        :rtype: list[str]
        """
        return self._short_names

    @short_names.setter
    def short_names(self, short_names):
        """Sets the short_names of this EmojiTrello.


        :param short_names: The short_names of this EmojiTrello.  # noqa: E501
        :type: list[str]
        """

        self._short_names = short_names

    @property
    def text(self):
        """Gets the text of this EmojiTrello.  # noqa: E501


        :return: The text of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EmojiTrello.


        :param text: The text of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def texts(self):
        """Gets the texts of this EmojiTrello.  # noqa: E501


        :return: The texts of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._texts

    @texts.setter
    def texts(self, texts):
        """Sets the texts of this EmojiTrello.


        :param texts: The texts of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._texts = texts

    @property
    def category(self):
        """Gets the category of this EmojiTrello.  # noqa: E501


        :return: The category of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EmojiTrello.


        :param category: The category of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def sheet_x(self):
        """Gets the sheet_x of this EmojiTrello.  # noqa: E501


        :return: The sheet_x of this EmojiTrello.  # noqa: E501
        :rtype: float
        """
        return self._sheet_x

    @sheet_x.setter
    def sheet_x(self, sheet_x):
        """Sets the sheet_x of this EmojiTrello.


        :param sheet_x: The sheet_x of this EmojiTrello.  # noqa: E501
        :type: float
        """

        self._sheet_x = sheet_x

    @property
    def sheet_y(self):
        """Gets the sheet_y of this EmojiTrello.  # noqa: E501


        :return: The sheet_y of this EmojiTrello.  # noqa: E501
        :rtype: float
        """
        return self._sheet_y

    @sheet_y.setter
    def sheet_y(self, sheet_y):
        """Sets the sheet_y of this EmojiTrello.


        :param sheet_y: The sheet_y of this EmojiTrello.  # noqa: E501
        :type: float
        """

        self._sheet_y = sheet_y

    @property
    def tts(self):
        """Gets the tts of this EmojiTrello.  # noqa: E501


        :return: The tts of this EmojiTrello.  # noqa: E501
        :rtype: str
        """
        return self._tts

    @tts.setter
    def tts(self, tts):
        """Sets the tts of this EmojiTrello.


        :param tts: The tts of this EmojiTrello.  # noqa: E501
        :type: str
        """

        self._tts = tts

    @property
    def keywords(self):
        """Gets the keywords of this EmojiTrello.  # noqa: E501


        :return: The keywords of this EmojiTrello.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this EmojiTrello.


        :param keywords: The keywords of this EmojiTrello.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmojiTrello, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmojiTrello):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
