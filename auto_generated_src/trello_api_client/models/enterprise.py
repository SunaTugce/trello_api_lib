# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Enterprise(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'name': 'str',
        'display_name': 'str',
        'logo_hash': 'str',
        'logo_url': 'str',
        'prefs': 'EnterprisePrefs',
        'organization_prefs': 'EnterpriseOrganizationPrefs',
        'sso_activation_failed': 'bool',
        'id_admins': 'list[TrelloID]',
        'enterprise_domains': 'list[str]',
        'is_real_enterprise': 'bool',
        'plugin_whitelisting_enabled': 'list[TrelloID]',
        'id_organizations': 'list[TrelloID]',
        'products': 'list[float]',
        'licenses': 'EnterpriseLicenses',
        'domains': 'list[str]',
        'date_organization_prefs_last_updated': 'date',
        'idp': 'EnterpriseIdp'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'displayName',
        'logo_hash': 'logoHash',
        'logo_url': 'logoUrl',
        'prefs': 'prefs',
        'organization_prefs': 'organizationPrefs',
        'sso_activation_failed': 'ssoActivationFailed',
        'id_admins': 'idAdmins',
        'enterprise_domains': 'enterpriseDomains',
        'is_real_enterprise': 'isRealEnterprise',
        'plugin_whitelisting_enabled': 'pluginWhitelistingEnabled',
        'id_organizations': 'idOrganizations',
        'products': 'products',
        'licenses': 'licenses',
        'domains': 'domains',
        'date_organization_prefs_last_updated': 'dateOrganizationPrefsLastUpdated',
        'idp': 'idp'
    }

    def __init__(self, id=None, name=None, display_name=None, logo_hash=None, logo_url=None, prefs=None, organization_prefs=None, sso_activation_failed=None, id_admins=None, enterprise_domains=None, is_real_enterprise=None, plugin_whitelisting_enabled=None, id_organizations=None, products=None, licenses=None, domains=None, date_organization_prefs_last_updated=None, idp=None):  # noqa: E501
        """Enterprise - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._display_name = None
        self._logo_hash = None
        self._logo_url = None
        self._prefs = None
        self._organization_prefs = None
        self._sso_activation_failed = None
        self._id_admins = None
        self._enterprise_domains = None
        self._is_real_enterprise = None
        self._plugin_whitelisting_enabled = None
        self._id_organizations = None
        self._products = None
        self._licenses = None
        self._domains = None
        self._date_organization_prefs_last_updated = None
        self._idp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if logo_hash is not None:
            self.logo_hash = logo_hash
        if logo_url is not None:
            self.logo_url = logo_url
        if prefs is not None:
            self.prefs = prefs
        if organization_prefs is not None:
            self.organization_prefs = organization_prefs
        if sso_activation_failed is not None:
            self.sso_activation_failed = sso_activation_failed
        if id_admins is not None:
            self.id_admins = id_admins
        if enterprise_domains is not None:
            self.enterprise_domains = enterprise_domains
        if is_real_enterprise is not None:
            self.is_real_enterprise = is_real_enterprise
        if plugin_whitelisting_enabled is not None:
            self.plugin_whitelisting_enabled = plugin_whitelisting_enabled
        if id_organizations is not None:
            self.id_organizations = id_organizations
        if products is not None:
            self.products = products
        if licenses is not None:
            self.licenses = licenses
        if domains is not None:
            self.domains = domains
        if date_organization_prefs_last_updated is not None:
            self.date_organization_prefs_last_updated = date_organization_prefs_last_updated
        if idp is not None:
            self.idp = idp

    @property
    def id(self):
        """Gets the id of this Enterprise.  # noqa: E501


        :return: The id of this Enterprise.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Enterprise.


        :param id: The id of this Enterprise.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Enterprise.  # noqa: E501


        :return: The name of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Enterprise.


        :param name: The name of this Enterprise.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this Enterprise.  # noqa: E501


        :return: The display_name of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Enterprise.


        :param display_name: The display_name of this Enterprise.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def logo_hash(self):
        """Gets the logo_hash of this Enterprise.  # noqa: E501


        :return: The logo_hash of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._logo_hash

    @logo_hash.setter
    def logo_hash(self, logo_hash):
        """Sets the logo_hash of this Enterprise.


        :param logo_hash: The logo_hash of this Enterprise.  # noqa: E501
        :type: str
        """

        self._logo_hash = logo_hash

    @property
    def logo_url(self):
        """Gets the logo_url of this Enterprise.  # noqa: E501


        :return: The logo_url of this Enterprise.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Enterprise.


        :param logo_url: The logo_url of this Enterprise.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def prefs(self):
        """Gets the prefs of this Enterprise.  # noqa: E501


        :return: The prefs of this Enterprise.  # noqa: E501
        :rtype: EnterprisePrefs
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this Enterprise.


        :param prefs: The prefs of this Enterprise.  # noqa: E501
        :type: EnterprisePrefs
        """

        self._prefs = prefs

    @property
    def organization_prefs(self):
        """Gets the organization_prefs of this Enterprise.  # noqa: E501


        :return: The organization_prefs of this Enterprise.  # noqa: E501
        :rtype: EnterpriseOrganizationPrefs
        """
        return self._organization_prefs

    @organization_prefs.setter
    def organization_prefs(self, organization_prefs):
        """Sets the organization_prefs of this Enterprise.


        :param organization_prefs: The organization_prefs of this Enterprise.  # noqa: E501
        :type: EnterpriseOrganizationPrefs
        """

        self._organization_prefs = organization_prefs

    @property
    def sso_activation_failed(self):
        """Gets the sso_activation_failed of this Enterprise.  # noqa: E501


        :return: The sso_activation_failed of this Enterprise.  # noqa: E501
        :rtype: bool
        """
        return self._sso_activation_failed

    @sso_activation_failed.setter
    def sso_activation_failed(self, sso_activation_failed):
        """Sets the sso_activation_failed of this Enterprise.


        :param sso_activation_failed: The sso_activation_failed of this Enterprise.  # noqa: E501
        :type: bool
        """

        self._sso_activation_failed = sso_activation_failed

    @property
    def id_admins(self):
        """Gets the id_admins of this Enterprise.  # noqa: E501


        :return: The id_admins of this Enterprise.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_admins

    @id_admins.setter
    def id_admins(self, id_admins):
        """Sets the id_admins of this Enterprise.


        :param id_admins: The id_admins of this Enterprise.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_admins = id_admins

    @property
    def enterprise_domains(self):
        """Gets the enterprise_domains of this Enterprise.  # noqa: E501


        :return: The enterprise_domains of this Enterprise.  # noqa: E501
        :rtype: list[str]
        """
        return self._enterprise_domains

    @enterprise_domains.setter
    def enterprise_domains(self, enterprise_domains):
        """Sets the enterprise_domains of this Enterprise.


        :param enterprise_domains: The enterprise_domains of this Enterprise.  # noqa: E501
        :type: list[str]
        """

        self._enterprise_domains = enterprise_domains

    @property
    def is_real_enterprise(self):
        """Gets the is_real_enterprise of this Enterprise.  # noqa: E501


        :return: The is_real_enterprise of this Enterprise.  # noqa: E501
        :rtype: bool
        """
        return self._is_real_enterprise

    @is_real_enterprise.setter
    def is_real_enterprise(self, is_real_enterprise):
        """Sets the is_real_enterprise of this Enterprise.


        :param is_real_enterprise: The is_real_enterprise of this Enterprise.  # noqa: E501
        :type: bool
        """

        self._is_real_enterprise = is_real_enterprise

    @property
    def plugin_whitelisting_enabled(self):
        """Gets the plugin_whitelisting_enabled of this Enterprise.  # noqa: E501


        :return: The plugin_whitelisting_enabled of this Enterprise.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._plugin_whitelisting_enabled

    @plugin_whitelisting_enabled.setter
    def plugin_whitelisting_enabled(self, plugin_whitelisting_enabled):
        """Sets the plugin_whitelisting_enabled of this Enterprise.


        :param plugin_whitelisting_enabled: The plugin_whitelisting_enabled of this Enterprise.  # noqa: E501
        :type: list[TrelloID]
        """

        self._plugin_whitelisting_enabled = plugin_whitelisting_enabled

    @property
    def id_organizations(self):
        """Gets the id_organizations of this Enterprise.  # noqa: E501


        :return: The id_organizations of this Enterprise.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_organizations

    @id_organizations.setter
    def id_organizations(self, id_organizations):
        """Sets the id_organizations of this Enterprise.


        :param id_organizations: The id_organizations of this Enterprise.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_organizations = id_organizations

    @property
    def products(self):
        """Gets the products of this Enterprise.  # noqa: E501


        :return: The products of this Enterprise.  # noqa: E501
        :rtype: list[float]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Enterprise.


        :param products: The products of this Enterprise.  # noqa: E501
        :type: list[float]
        """

        self._products = products

    @property
    def licenses(self):
        """Gets the licenses of this Enterprise.  # noqa: E501


        :return: The licenses of this Enterprise.  # noqa: E501
        :rtype: EnterpriseLicenses
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this Enterprise.


        :param licenses: The licenses of this Enterprise.  # noqa: E501
        :type: EnterpriseLicenses
        """

        self._licenses = licenses

    @property
    def domains(self):
        """Gets the domains of this Enterprise.  # noqa: E501


        :return: The domains of this Enterprise.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this Enterprise.


        :param domains: The domains of this Enterprise.  # noqa: E501
        :type: list[str]
        """

        self._domains = domains

    @property
    def date_organization_prefs_last_updated(self):
        """Gets the date_organization_prefs_last_updated of this Enterprise.  # noqa: E501


        :return: The date_organization_prefs_last_updated of this Enterprise.  # noqa: E501
        :rtype: date
        """
        return self._date_organization_prefs_last_updated

    @date_organization_prefs_last_updated.setter
    def date_organization_prefs_last_updated(self, date_organization_prefs_last_updated):
        """Sets the date_organization_prefs_last_updated of this Enterprise.


        :param date_organization_prefs_last_updated: The date_organization_prefs_last_updated of this Enterprise.  # noqa: E501
        :type: date
        """

        self._date_organization_prefs_last_updated = date_organization_prefs_last_updated

    @property
    def idp(self):
        """Gets the idp of this Enterprise.  # noqa: E501


        :return: The idp of this Enterprise.  # noqa: E501
        :rtype: EnterpriseIdp
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """Sets the idp of this Enterprise.


        :param idp: The idp of this Enterprise.  # noqa: E501
        :type: EnterpriseIdp
        """

        self._idp = idp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Enterprise, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enterprise):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
