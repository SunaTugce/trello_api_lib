# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberPrefs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone_info': 'MemberPrefsTimezoneInfo',
        'privacy': 'MemberPrefsPrivacy',
        'send_summaries': 'bool',
        'minutes_between_summaries': 'int',
        'minutes_before_deadline_to_notify': 'int',
        'color_blind': 'bool',
        'locale': 'str',
        'timezone': 'str',
        'two_factor': 'MemberPrefsTwoFactor'
    }

    attribute_map = {
        'timezone_info': 'timezoneInfo',
        'privacy': 'privacy',
        'send_summaries': 'sendSummaries',
        'minutes_between_summaries': 'minutesBetweenSummaries',
        'minutes_before_deadline_to_notify': 'minutesBeforeDeadlineToNotify',
        'color_blind': 'colorBlind',
        'locale': 'locale',
        'timezone': 'timezone',
        'two_factor': 'twoFactor'
    }

    def __init__(self, timezone_info=None, privacy=None, send_summaries=None, minutes_between_summaries=None, minutes_before_deadline_to_notify=None, color_blind=None, locale=None, timezone=None, two_factor=None):  # noqa: E501
        """MemberPrefs - a model defined in Swagger"""  # noqa: E501
        self._timezone_info = None
        self._privacy = None
        self._send_summaries = None
        self._minutes_between_summaries = None
        self._minutes_before_deadline_to_notify = None
        self._color_blind = None
        self._locale = None
        self._timezone = None
        self._two_factor = None
        self.discriminator = None
        if timezone_info is not None:
            self.timezone_info = timezone_info
        if privacy is not None:
            self.privacy = privacy
        if send_summaries is not None:
            self.send_summaries = send_summaries
        if minutes_between_summaries is not None:
            self.minutes_between_summaries = minutes_between_summaries
        if minutes_before_deadline_to_notify is not None:
            self.minutes_before_deadline_to_notify = minutes_before_deadline_to_notify
        if color_blind is not None:
            self.color_blind = color_blind
        if locale is not None:
            self.locale = locale
        if timezone is not None:
            self.timezone = timezone
        if two_factor is not None:
            self.two_factor = two_factor

    @property
    def timezone_info(self):
        """Gets the timezone_info of this MemberPrefs.  # noqa: E501


        :return: The timezone_info of this MemberPrefs.  # noqa: E501
        :rtype: MemberPrefsTimezoneInfo
        """
        return self._timezone_info

    @timezone_info.setter
    def timezone_info(self, timezone_info):
        """Sets the timezone_info of this MemberPrefs.


        :param timezone_info: The timezone_info of this MemberPrefs.  # noqa: E501
        :type: MemberPrefsTimezoneInfo
        """

        self._timezone_info = timezone_info

    @property
    def privacy(self):
        """Gets the privacy of this MemberPrefs.  # noqa: E501


        :return: The privacy of this MemberPrefs.  # noqa: E501
        :rtype: MemberPrefsPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this MemberPrefs.


        :param privacy: The privacy of this MemberPrefs.  # noqa: E501
        :type: MemberPrefsPrivacy
        """

        self._privacy = privacy

    @property
    def send_summaries(self):
        """Gets the send_summaries of this MemberPrefs.  # noqa: E501


        :return: The send_summaries of this MemberPrefs.  # noqa: E501
        :rtype: bool
        """
        return self._send_summaries

    @send_summaries.setter
    def send_summaries(self, send_summaries):
        """Sets the send_summaries of this MemberPrefs.


        :param send_summaries: The send_summaries of this MemberPrefs.  # noqa: E501
        :type: bool
        """

        self._send_summaries = send_summaries

    @property
    def minutes_between_summaries(self):
        """Gets the minutes_between_summaries of this MemberPrefs.  # noqa: E501


        :return: The minutes_between_summaries of this MemberPrefs.  # noqa: E501
        :rtype: int
        """
        return self._minutes_between_summaries

    @minutes_between_summaries.setter
    def minutes_between_summaries(self, minutes_between_summaries):
        """Sets the minutes_between_summaries of this MemberPrefs.


        :param minutes_between_summaries: The minutes_between_summaries of this MemberPrefs.  # noqa: E501
        :type: int
        """

        self._minutes_between_summaries = minutes_between_summaries

    @property
    def minutes_before_deadline_to_notify(self):
        """Gets the minutes_before_deadline_to_notify of this MemberPrefs.  # noqa: E501


        :return: The minutes_before_deadline_to_notify of this MemberPrefs.  # noqa: E501
        :rtype: int
        """
        return self._minutes_before_deadline_to_notify

    @minutes_before_deadline_to_notify.setter
    def minutes_before_deadline_to_notify(self, minutes_before_deadline_to_notify):
        """Sets the minutes_before_deadline_to_notify of this MemberPrefs.


        :param minutes_before_deadline_to_notify: The minutes_before_deadline_to_notify of this MemberPrefs.  # noqa: E501
        :type: int
        """

        self._minutes_before_deadline_to_notify = minutes_before_deadline_to_notify

    @property
    def color_blind(self):
        """Gets the color_blind of this MemberPrefs.  # noqa: E501


        :return: The color_blind of this MemberPrefs.  # noqa: E501
        :rtype: bool
        """
        return self._color_blind

    @color_blind.setter
    def color_blind(self, color_blind):
        """Sets the color_blind of this MemberPrefs.


        :param color_blind: The color_blind of this MemberPrefs.  # noqa: E501
        :type: bool
        """

        self._color_blind = color_blind

    @property
    def locale(self):
        """Gets the locale of this MemberPrefs.  # noqa: E501


        :return: The locale of this MemberPrefs.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this MemberPrefs.


        :param locale: The locale of this MemberPrefs.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def timezone(self):
        """Gets the timezone of this MemberPrefs.  # noqa: E501


        :return: The timezone of this MemberPrefs.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this MemberPrefs.


        :param timezone: The timezone of this MemberPrefs.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def two_factor(self):
        """Gets the two_factor of this MemberPrefs.  # noqa: E501


        :return: The two_factor of this MemberPrefs.  # noqa: E501
        :rtype: MemberPrefsTwoFactor
        """
        return self._two_factor

    @two_factor.setter
    def two_factor(self, two_factor):
        """Sets the two_factor of this MemberPrefs.


        :param two_factor: The two_factor of this MemberPrefs.  # noqa: E501
        :type: MemberPrefsTwoFactor
        """

        self._two_factor = two_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberPrefs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberPrefs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
