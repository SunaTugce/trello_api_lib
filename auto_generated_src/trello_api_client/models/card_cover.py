# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CardCover(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_attachment': 'TrelloID',
        'color': 'Color',
        'id_uploaded_background': 'bool',
        'size': 'str',
        'brightness': 'str',
        'is_template': 'bool'
    }

    attribute_map = {
        'id_attachment': 'idAttachment',
        'color': 'color',
        'id_uploaded_background': 'idUploadedBackground',
        'size': 'size',
        'brightness': 'brightness',
        'is_template': 'isTemplate'
    }

    def __init__(self, id_attachment=None, color=None, id_uploaded_background=None, size=None, brightness=None, is_template=None):  # noqa: E501
        """CardCover - a model defined in Swagger"""  # noqa: E501
        self._id_attachment = None
        self._color = None
        self._id_uploaded_background = None
        self._size = None
        self._brightness = None
        self._is_template = None
        self.discriminator = None
        if id_attachment is not None:
            self.id_attachment = id_attachment
        if color is not None:
            self.color = color
        if id_uploaded_background is not None:
            self.id_uploaded_background = id_uploaded_background
        if size is not None:
            self.size = size
        if brightness is not None:
            self.brightness = brightness
        if is_template is not None:
            self.is_template = is_template

    @property
    def id_attachment(self):
        """Gets the id_attachment of this CardCover.  # noqa: E501


        :return: The id_attachment of this CardCover.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_attachment

    @id_attachment.setter
    def id_attachment(self, id_attachment):
        """Sets the id_attachment of this CardCover.


        :param id_attachment: The id_attachment of this CardCover.  # noqa: E501
        :type: TrelloID
        """

        self._id_attachment = id_attachment

    @property
    def color(self):
        """Gets the color of this CardCover.  # noqa: E501


        :return: The color of this CardCover.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CardCover.


        :param color: The color of this CardCover.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def id_uploaded_background(self):
        """Gets the id_uploaded_background of this CardCover.  # noqa: E501


        :return: The id_uploaded_background of this CardCover.  # noqa: E501
        :rtype: bool
        """
        return self._id_uploaded_background

    @id_uploaded_background.setter
    def id_uploaded_background(self, id_uploaded_background):
        """Sets the id_uploaded_background of this CardCover.


        :param id_uploaded_background: The id_uploaded_background of this CardCover.  # noqa: E501
        :type: bool
        """

        self._id_uploaded_background = id_uploaded_background

    @property
    def size(self):
        """Gets the size of this CardCover.  # noqa: E501


        :return: The size of this CardCover.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CardCover.


        :param size: The size of this CardCover.  # noqa: E501
        :type: str
        """
        allowed_values = ["normal"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"  # noqa: E501
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def brightness(self):
        """Gets the brightness of this CardCover.  # noqa: E501


        :return: The brightness of this CardCover.  # noqa: E501
        :rtype: str
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this CardCover.


        :param brightness: The brightness of this CardCover.  # noqa: E501
        :type: str
        """
        allowed_values = ["light", "dark"]  # noqa: E501
        if brightness not in allowed_values:
            raise ValueError(
                "Invalid value for `brightness` ({0}), must be one of {1}"  # noqa: E501
                .format(brightness, allowed_values)
            )

        self._brightness = brightness

    @property
    def is_template(self):
        """Gets the is_template of this CardCover.  # noqa: E501


        :return: The is_template of this CardCover.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this CardCover.


        :param is_template: The is_template of this CardCover.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardCover, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardCover):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
