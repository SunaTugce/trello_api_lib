# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionDisplayEntities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_on': 'ActionDisplayEntitiesContextOn',
        'card': 'ActionDisplayEntitiesCard',
        'comment': 'ActionDisplayEntitiesComment',
        'member_creator': 'ActionDisplayEntitiesMemberCreator'
    }

    attribute_map = {
        'context_on': 'contextOn',
        'card': 'card',
        'comment': 'comment',
        'member_creator': 'memberCreator'
    }

    def __init__(self, context_on=None, card=None, comment=None, member_creator=None):  # noqa: E501
        """ActionDisplayEntities - a model defined in Swagger"""  # noqa: E501
        self._context_on = None
        self._card = None
        self._comment = None
        self._member_creator = None
        self.discriminator = None
        if context_on is not None:
            self.context_on = context_on
        if card is not None:
            self.card = card
        if comment is not None:
            self.comment = comment
        if member_creator is not None:
            self.member_creator = member_creator

    @property
    def context_on(self):
        """Gets the context_on of this ActionDisplayEntities.  # noqa: E501


        :return: The context_on of this ActionDisplayEntities.  # noqa: E501
        :rtype: ActionDisplayEntitiesContextOn
        """
        return self._context_on

    @context_on.setter
    def context_on(self, context_on):
        """Sets the context_on of this ActionDisplayEntities.


        :param context_on: The context_on of this ActionDisplayEntities.  # noqa: E501
        :type: ActionDisplayEntitiesContextOn
        """

        self._context_on = context_on

    @property
    def card(self):
        """Gets the card of this ActionDisplayEntities.  # noqa: E501


        :return: The card of this ActionDisplayEntities.  # noqa: E501
        :rtype: ActionDisplayEntitiesCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this ActionDisplayEntities.


        :param card: The card of this ActionDisplayEntities.  # noqa: E501
        :type: ActionDisplayEntitiesCard
        """

        self._card = card

    @property
    def comment(self):
        """Gets the comment of this ActionDisplayEntities.  # noqa: E501


        :return: The comment of this ActionDisplayEntities.  # noqa: E501
        :rtype: ActionDisplayEntitiesComment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ActionDisplayEntities.


        :param comment: The comment of this ActionDisplayEntities.  # noqa: E501
        :type: ActionDisplayEntitiesComment
        """

        self._comment = comment

    @property
    def member_creator(self):
        """Gets the member_creator of this ActionDisplayEntities.  # noqa: E501


        :return: The member_creator of this ActionDisplayEntities.  # noqa: E501
        :rtype: ActionDisplayEntitiesMemberCreator
        """
        return self._member_creator

    @member_creator.setter
    def member_creator(self, member_creator):
        """Sets the member_creator of this ActionDisplayEntities.


        :param member_creator: The member_creator of this ActionDisplayEntities.  # noqa: E501
        :type: ActionDisplayEntitiesMemberCreator
        """

        self._member_creator = member_creator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionDisplayEntities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionDisplayEntities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
