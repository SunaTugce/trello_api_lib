# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnterpriseOrganizationPrefs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'board_visibility_restrict': 'object',
        'board_delete_restrict': 'object',
        'attachment_restrictions': 'list[str]'
    }

    attribute_map = {
        'board_visibility_restrict': 'boardVisibilityRestrict',
        'board_delete_restrict': 'boardDeleteRestrict',
        'attachment_restrictions': 'attachmentRestrictions'
    }

    def __init__(self, board_visibility_restrict=None, board_delete_restrict=None, attachment_restrictions=None):  # noqa: E501
        """EnterpriseOrganizationPrefs - a model defined in Swagger"""  # noqa: E501
        self._board_visibility_restrict = None
        self._board_delete_restrict = None
        self._attachment_restrictions = None
        self.discriminator = None
        if board_visibility_restrict is not None:
            self.board_visibility_restrict = board_visibility_restrict
        if board_delete_restrict is not None:
            self.board_delete_restrict = board_delete_restrict
        if attachment_restrictions is not None:
            self.attachment_restrictions = attachment_restrictions

    @property
    def board_visibility_restrict(self):
        """Gets the board_visibility_restrict of this EnterpriseOrganizationPrefs.  # noqa: E501


        :return: The board_visibility_restrict of this EnterpriseOrganizationPrefs.  # noqa: E501
        :rtype: object
        """
        return self._board_visibility_restrict

    @board_visibility_restrict.setter
    def board_visibility_restrict(self, board_visibility_restrict):
        """Sets the board_visibility_restrict of this EnterpriseOrganizationPrefs.


        :param board_visibility_restrict: The board_visibility_restrict of this EnterpriseOrganizationPrefs.  # noqa: E501
        :type: object
        """

        self._board_visibility_restrict = board_visibility_restrict

    @property
    def board_delete_restrict(self):
        """Gets the board_delete_restrict of this EnterpriseOrganizationPrefs.  # noqa: E501


        :return: The board_delete_restrict of this EnterpriseOrganizationPrefs.  # noqa: E501
        :rtype: object
        """
        return self._board_delete_restrict

    @board_delete_restrict.setter
    def board_delete_restrict(self, board_delete_restrict):
        """Sets the board_delete_restrict of this EnterpriseOrganizationPrefs.


        :param board_delete_restrict: The board_delete_restrict of this EnterpriseOrganizationPrefs.  # noqa: E501
        :type: object
        """

        self._board_delete_restrict = board_delete_restrict

    @property
    def attachment_restrictions(self):
        """Gets the attachment_restrictions of this EnterpriseOrganizationPrefs.  # noqa: E501


        :return: The attachment_restrictions of this EnterpriseOrganizationPrefs.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_restrictions

    @attachment_restrictions.setter
    def attachment_restrictions(self, attachment_restrictions):
        """Sets the attachment_restrictions of this EnterpriseOrganizationPrefs.


        :param attachment_restrictions: The attachment_restrictions of this EnterpriseOrganizationPrefs.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["computer", "trello", "google-drive", "box", "onedrive", "link"]  # noqa: E501
        if not set(attachment_restrictions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attachment_restrictions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(attachment_restrictions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._attachment_restrictions = attachment_restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseOrganizationPrefs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseOrganizationPrefs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
