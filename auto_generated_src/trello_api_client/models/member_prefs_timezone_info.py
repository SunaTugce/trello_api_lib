# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberPrefsTimezoneInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset_current': 'int',
        'timezone_current': 'str',
        'offset_next': 'int',
        'date_next': 'date',
        'timezone_next': 'str'
    }

    attribute_map = {
        'offset_current': 'offsetCurrent',
        'timezone_current': 'timezoneCurrent',
        'offset_next': 'offsetNext',
        'date_next': 'dateNext',
        'timezone_next': 'timezoneNext'
    }

    def __init__(self, offset_current=None, timezone_current=None, offset_next=None, date_next=None, timezone_next=None):  # noqa: E501
        """MemberPrefsTimezoneInfo - a model defined in Swagger"""  # noqa: E501
        self._offset_current = None
        self._timezone_current = None
        self._offset_next = None
        self._date_next = None
        self._timezone_next = None
        self.discriminator = None
        if offset_current is not None:
            self.offset_current = offset_current
        if timezone_current is not None:
            self.timezone_current = timezone_current
        if offset_next is not None:
            self.offset_next = offset_next
        if date_next is not None:
            self.date_next = date_next
        if timezone_next is not None:
            self.timezone_next = timezone_next

    @property
    def offset_current(self):
        """Gets the offset_current of this MemberPrefsTimezoneInfo.  # noqa: E501


        :return: The offset_current of this MemberPrefsTimezoneInfo.  # noqa: E501
        :rtype: int
        """
        return self._offset_current

    @offset_current.setter
    def offset_current(self, offset_current):
        """Sets the offset_current of this MemberPrefsTimezoneInfo.


        :param offset_current: The offset_current of this MemberPrefsTimezoneInfo.  # noqa: E501
        :type: int
        """

        self._offset_current = offset_current

    @property
    def timezone_current(self):
        """Gets the timezone_current of this MemberPrefsTimezoneInfo.  # noqa: E501


        :return: The timezone_current of this MemberPrefsTimezoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._timezone_current

    @timezone_current.setter
    def timezone_current(self, timezone_current):
        """Sets the timezone_current of this MemberPrefsTimezoneInfo.


        :param timezone_current: The timezone_current of this MemberPrefsTimezoneInfo.  # noqa: E501
        :type: str
        """

        self._timezone_current = timezone_current

    @property
    def offset_next(self):
        """Gets the offset_next of this MemberPrefsTimezoneInfo.  # noqa: E501


        :return: The offset_next of this MemberPrefsTimezoneInfo.  # noqa: E501
        :rtype: int
        """
        return self._offset_next

    @offset_next.setter
    def offset_next(self, offset_next):
        """Sets the offset_next of this MemberPrefsTimezoneInfo.


        :param offset_next: The offset_next of this MemberPrefsTimezoneInfo.  # noqa: E501
        :type: int
        """

        self._offset_next = offset_next

    @property
    def date_next(self):
        """Gets the date_next of this MemberPrefsTimezoneInfo.  # noqa: E501


        :return: The date_next of this MemberPrefsTimezoneInfo.  # noqa: E501
        :rtype: date
        """
        return self._date_next

    @date_next.setter
    def date_next(self, date_next):
        """Sets the date_next of this MemberPrefsTimezoneInfo.


        :param date_next: The date_next of this MemberPrefsTimezoneInfo.  # noqa: E501
        :type: date
        """

        self._date_next = date_next

    @property
    def timezone_next(self):
        """Gets the timezone_next of this MemberPrefsTimezoneInfo.  # noqa: E501


        :return: The timezone_next of this MemberPrefsTimezoneInfo.  # noqa: E501
        :rtype: str
        """
        return self._timezone_next

    @timezone_next.setter
    def timezone_next(self, timezone_next):
        """Sets the timezone_next of this MemberPrefsTimezoneInfo.


        :param timezone_next: The timezone_next of this MemberPrefsTimezoneInfo.  # noqa: E501
        :type: str
        """

        self._timezone_next = timezone_next

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberPrefsTimezoneInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberPrefsTimezoneInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
