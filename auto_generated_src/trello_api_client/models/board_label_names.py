# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BoardLabelNames(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'green': 'str',
        'yellow': 'str',
        'orange': 'str',
        'red': 'str',
        'purple': 'str',
        'blue': 'str',
        'sky': 'str',
        'lime': 'str',
        'pink': 'str',
        'black': 'str'
    }

    attribute_map = {
        'green': 'green',
        'yellow': 'yellow',
        'orange': 'orange',
        'red': 'red',
        'purple': 'purple',
        'blue': 'blue',
        'sky': 'sky',
        'lime': 'lime',
        'pink': 'pink',
        'black': 'black'
    }

    def __init__(self, green=None, yellow=None, orange=None, red=None, purple=None, blue=None, sky=None, lime=None, pink=None, black=None):  # noqa: E501
        """BoardLabelNames - a model defined in Swagger"""  # noqa: E501
        self._green = None
        self._yellow = None
        self._orange = None
        self._red = None
        self._purple = None
        self._blue = None
        self._sky = None
        self._lime = None
        self._pink = None
        self._black = None
        self.discriminator = None
        if green is not None:
            self.green = green
        if yellow is not None:
            self.yellow = yellow
        if orange is not None:
            self.orange = orange
        if red is not None:
            self.red = red
        if purple is not None:
            self.purple = purple
        if blue is not None:
            self.blue = blue
        if sky is not None:
            self.sky = sky
        if lime is not None:
            self.lime = lime
        if pink is not None:
            self.pink = pink
        if black is not None:
            self.black = black

    @property
    def green(self):
        """Gets the green of this BoardLabelNames.  # noqa: E501


        :return: The green of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this BoardLabelNames.


        :param green: The green of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._green = green

    @property
    def yellow(self):
        """Gets the yellow of this BoardLabelNames.  # noqa: E501


        :return: The yellow of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._yellow

    @yellow.setter
    def yellow(self, yellow):
        """Sets the yellow of this BoardLabelNames.


        :param yellow: The yellow of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._yellow = yellow

    @property
    def orange(self):
        """Gets the orange of this BoardLabelNames.  # noqa: E501


        :return: The orange of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._orange

    @orange.setter
    def orange(self, orange):
        """Sets the orange of this BoardLabelNames.


        :param orange: The orange of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._orange = orange

    @property
    def red(self):
        """Gets the red of this BoardLabelNames.  # noqa: E501


        :return: The red of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this BoardLabelNames.


        :param red: The red of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._red = red

    @property
    def purple(self):
        """Gets the purple of this BoardLabelNames.  # noqa: E501


        :return: The purple of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._purple

    @purple.setter
    def purple(self, purple):
        """Sets the purple of this BoardLabelNames.


        :param purple: The purple of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._purple = purple

    @property
    def blue(self):
        """Gets the blue of this BoardLabelNames.  # noqa: E501


        :return: The blue of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this BoardLabelNames.


        :param blue: The blue of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._blue = blue

    @property
    def sky(self):
        """Gets the sky of this BoardLabelNames.  # noqa: E501


        :return: The sky of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._sky

    @sky.setter
    def sky(self, sky):
        """Sets the sky of this BoardLabelNames.


        :param sky: The sky of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._sky = sky

    @property
    def lime(self):
        """Gets the lime of this BoardLabelNames.  # noqa: E501


        :return: The lime of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._lime

    @lime.setter
    def lime(self, lime):
        """Sets the lime of this BoardLabelNames.


        :param lime: The lime of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._lime = lime

    @property
    def pink(self):
        """Gets the pink of this BoardLabelNames.  # noqa: E501


        :return: The pink of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._pink

    @pink.setter
    def pink(self, pink):
        """Sets the pink of this BoardLabelNames.


        :param pink: The pink of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._pink = pink

    @property
    def black(self):
        """Gets the black of this BoardLabelNames.  # noqa: E501


        :return: The black of this BoardLabelNames.  # noqa: E501
        :rtype: str
        """
        return self._black

    @black.setter
    def black(self, black):
        """Sets the black of this BoardLabelNames.


        :param black: The black of this BoardLabelNames.  # noqa: E501
        :type: str
        """

        self._black = black

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BoardLabelNames, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoardLabelNames):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
