# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClaimableOrganizationsOrganizations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'active_membership_count': 'float',
        'id_active_admins': 'list[TrelloID]',
        'products': 'list[float]',
        'id': 'TrelloID',
        'logo_url': 'str',
        'date_last_active': 'date'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'displayName',
        'active_membership_count': 'activeMembershipCount',
        'id_active_admins': 'idActiveAdmins',
        'products': 'products',
        'id': 'id',
        'logo_url': 'logoUrl',
        'date_last_active': 'dateLastActive'
    }

    def __init__(self, name=None, display_name=None, active_membership_count=None, id_active_admins=None, products=None, id=None, logo_url=None, date_last_active=None):  # noqa: E501
        """ClaimableOrganizationsOrganizations - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._display_name = None
        self._active_membership_count = None
        self._id_active_admins = None
        self._products = None
        self._id = None
        self._logo_url = None
        self._date_last_active = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if active_membership_count is not None:
            self.active_membership_count = active_membership_count
        if id_active_admins is not None:
            self.id_active_admins = id_active_admins
        if products is not None:
            self.products = products
        if id is not None:
            self.id = id
        if logo_url is not None:
            self.logo_url = logo_url
        if date_last_active is not None:
            self.date_last_active = date_last_active

    @property
    def name(self):
        """Gets the name of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The name of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClaimableOrganizationsOrganizations.


        :param name: The name of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The display_name of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ClaimableOrganizationsOrganizations.


        :param display_name: The display_name of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def active_membership_count(self):
        """Gets the active_membership_count of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The active_membership_count of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: float
        """
        return self._active_membership_count

    @active_membership_count.setter
    def active_membership_count(self, active_membership_count):
        """Sets the active_membership_count of this ClaimableOrganizationsOrganizations.


        :param active_membership_count: The active_membership_count of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: float
        """

        self._active_membership_count = active_membership_count

    @property
    def id_active_admins(self):
        """Gets the id_active_admins of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The id_active_admins of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: list[TrelloID]
        """
        return self._id_active_admins

    @id_active_admins.setter
    def id_active_admins(self, id_active_admins):
        """Sets the id_active_admins of this ClaimableOrganizationsOrganizations.


        :param id_active_admins: The id_active_admins of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: list[TrelloID]
        """

        self._id_active_admins = id_active_admins

    @property
    def products(self):
        """Gets the products of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The products of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: list[float]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ClaimableOrganizationsOrganizations.


        :param products: The products of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: list[float]
        """

        self._products = products

    @property
    def id(self):
        """Gets the id of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The id of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClaimableOrganizationsOrganizations.


        :param id: The id of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def logo_url(self):
        """Gets the logo_url of this ClaimableOrganizationsOrganizations.  # noqa: E501


        :return: The logo_url of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this ClaimableOrganizationsOrganizations.


        :param logo_url: The logo_url of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def date_last_active(self):
        """Gets the date_last_active of this ClaimableOrganizationsOrganizations.  # noqa: E501

        The date of the most recent activity on any of the boards in the workspace. If the workspace has no boards, or the boards have no activity, this value will be null.  # noqa: E501

        :return: The date_last_active of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :rtype: date
        """
        return self._date_last_active

    @date_last_active.setter
    def date_last_active(self, date_last_active):
        """Sets the date_last_active of this ClaimableOrganizationsOrganizations.

        The date of the most recent activity on any of the boards in the workspace. If the workspace has no boards, or the boards have no activity, this value will be null.  # noqa: E501

        :param date_last_active: The date_last_active of this ClaimableOrganizationsOrganizations.  # noqa: E501
        :type: date
        """

        self._date_last_active = date_last_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClaimableOrganizationsOrganizations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClaimableOrganizationsOrganizations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
