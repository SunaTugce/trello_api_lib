# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'card': 'ActionDataCard',
        'board': 'ActionDataBoard',
        'list': 'ActionDataList'
    }

    attribute_map = {
        'text': 'text',
        'card': 'card',
        'board': 'board',
        'list': 'list'
    }

    def __init__(self, text=None, card=None, board=None, list=None):  # noqa: E501
        """ActionData - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._card = None
        self._board = None
        self._list = None
        self.discriminator = None
        if text is not None:
            self.text = text
        if card is not None:
            self.card = card
        if board is not None:
            self.board = board
        if list is not None:
            self.list = list

    @property
    def text(self):
        """Gets the text of this ActionData.  # noqa: E501


        :return: The text of this ActionData.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ActionData.


        :param text: The text of this ActionData.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def card(self):
        """Gets the card of this ActionData.  # noqa: E501


        :return: The card of this ActionData.  # noqa: E501
        :rtype: ActionDataCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this ActionData.


        :param card: The card of this ActionData.  # noqa: E501
        :type: ActionDataCard
        """

        self._card = card

    @property
    def board(self):
        """Gets the board of this ActionData.  # noqa: E501


        :return: The board of this ActionData.  # noqa: E501
        :rtype: ActionDataBoard
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this ActionData.


        :param board: The board of this ActionData.  # noqa: E501
        :type: ActionDataBoard
        """

        self._board = board

    @property
    def list(self):
        """Gets the list of this ActionData.  # noqa: E501


        :return: The list of this ActionData.  # noqa: E501
        :rtype: ActionDataList
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this ActionData.


        :param list: The list of this ActionData.  # noqa: E501
        :type: ActionDataList
        """

        self._list = list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
