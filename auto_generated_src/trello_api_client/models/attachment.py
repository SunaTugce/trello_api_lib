# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Attachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'bytes': 'str',
        '_date': 'date',
        'edge_color': 'Color',
        'id_member': 'TrelloID',
        'is_upload': 'bool',
        'mime_type': 'str',
        'name': 'str',
        'previews': 'list[str]',
        'url': 'str',
        'pos': 'float'
    }

    attribute_map = {
        'id': 'id',
        'bytes': 'bytes',
        '_date': 'date',
        'edge_color': 'edgeColor',
        'id_member': 'idMember',
        'is_upload': 'isUpload',
        'mime_type': 'mimeType',
        'name': 'name',
        'previews': 'previews',
        'url': 'url',
        'pos': 'pos'
    }

    def __init__(self, id=None, bytes=None, _date=None, edge_color=None, id_member=None, is_upload=None, mime_type=None, name=None, previews=None, url=None, pos=None):  # noqa: E501
        """Attachment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._bytes = None
        self.__date = None
        self._edge_color = None
        self._id_member = None
        self._is_upload = None
        self._mime_type = None
        self._name = None
        self._previews = None
        self._url = None
        self._pos = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if bytes is not None:
            self.bytes = bytes
        if _date is not None:
            self._date = _date
        if edge_color is not None:
            self.edge_color = edge_color
        if id_member is not None:
            self.id_member = id_member
        if is_upload is not None:
            self.is_upload = is_upload
        if mime_type is not None:
            self.mime_type = mime_type
        if name is not None:
            self.name = name
        if previews is not None:
            self.previews = previews
        if url is not None:
            self.url = url
        if pos is not None:
            self.pos = pos

    @property
    def id(self):
        """Gets the id of this Attachment.  # noqa: E501


        :return: The id of this Attachment.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.


        :param id: The id of this Attachment.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def bytes(self):
        """Gets the bytes of this Attachment.  # noqa: E501


        :return: The bytes of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this Attachment.


        :param bytes: The bytes of this Attachment.  # noqa: E501
        :type: str
        """

        self._bytes = bytes

    @property
    def _date(self):
        """Gets the _date of this Attachment.  # noqa: E501


        :return: The _date of this Attachment.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Attachment.


        :param _date: The _date of this Attachment.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def edge_color(self):
        """Gets the edge_color of this Attachment.  # noqa: E501


        :return: The edge_color of this Attachment.  # noqa: E501
        :rtype: Color
        """
        return self._edge_color

    @edge_color.setter
    def edge_color(self, edge_color):
        """Sets the edge_color of this Attachment.


        :param edge_color: The edge_color of this Attachment.  # noqa: E501
        :type: Color
        """

        self._edge_color = edge_color

    @property
    def id_member(self):
        """Gets the id_member of this Attachment.  # noqa: E501


        :return: The id_member of this Attachment.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_member

    @id_member.setter
    def id_member(self, id_member):
        """Sets the id_member of this Attachment.


        :param id_member: The id_member of this Attachment.  # noqa: E501
        :type: TrelloID
        """

        self._id_member = id_member

    @property
    def is_upload(self):
        """Gets the is_upload of this Attachment.  # noqa: E501


        :return: The is_upload of this Attachment.  # noqa: E501
        :rtype: bool
        """
        return self._is_upload

    @is_upload.setter
    def is_upload(self, is_upload):
        """Sets the is_upload of this Attachment.


        :param is_upload: The is_upload of this Attachment.  # noqa: E501
        :type: bool
        """

        self._is_upload = is_upload

    @property
    def mime_type(self):
        """Gets the mime_type of this Attachment.  # noqa: E501


        :return: The mime_type of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Attachment.


        :param mime_type: The mime_type of this Attachment.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this Attachment.  # noqa: E501


        :return: The name of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attachment.


        :param name: The name of this Attachment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def previews(self):
        """Gets the previews of this Attachment.  # noqa: E501


        :return: The previews of this Attachment.  # noqa: E501
        :rtype: list[str]
        """
        return self._previews

    @previews.setter
    def previews(self, previews):
        """Sets the previews of this Attachment.


        :param previews: The previews of this Attachment.  # noqa: E501
        :type: list[str]
        """

        self._previews = previews

    @property
    def url(self):
        """Gets the url of this Attachment.  # noqa: E501


        :return: The url of this Attachment.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Attachment.


        :param url: The url of this Attachment.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def pos(self):
        """Gets the pos of this Attachment.  # noqa: E501


        :return: The pos of this Attachment.  # noqa: E501
        :rtype: float
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Attachment.


        :param pos: The pos of this Attachment.  # noqa: E501
        :type: float
        """

        self._pos = pos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Attachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
