# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Membership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'managed': 'bool',
        'licensed': 'bool',
        'admin': 'bool',
        'deactivated': 'bool',
        'collaborator': 'bool',
        'member': 'MembershipMember'
    }

    attribute_map = {
        'managed': 'managed',
        'licensed': 'licensed',
        'admin': 'admin',
        'deactivated': 'deactivated',
        'collaborator': 'collaborator',
        'member': 'member'
    }

    def __init__(self, managed=None, licensed=None, admin=None, deactivated=None, collaborator=None, member=None):  # noqa: E501
        """Membership - a model defined in Swagger"""  # noqa: E501
        self._managed = None
        self._licensed = None
        self._admin = None
        self._deactivated = None
        self._collaborator = None
        self._member = None
        self.discriminator = None
        if managed is not None:
            self.managed = managed
        if licensed is not None:
            self.licensed = licensed
        if admin is not None:
            self.admin = admin
        if deactivated is not None:
            self.deactivated = deactivated
        if collaborator is not None:
            self.collaborator = collaborator
        if member is not None:
            self.member = member

    @property
    def managed(self):
        """Gets the managed of this Membership.  # noqa: E501


        :return: The managed of this Membership.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this Membership.


        :param managed: The managed of this Membership.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def licensed(self):
        """Gets the licensed of this Membership.  # noqa: E501


        :return: The licensed of this Membership.  # noqa: E501
        :rtype: bool
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this Membership.


        :param licensed: The licensed of this Membership.  # noqa: E501
        :type: bool
        """

        self._licensed = licensed

    @property
    def admin(self):
        """Gets the admin of this Membership.  # noqa: E501


        :return: The admin of this Membership.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Membership.


        :param admin: The admin of this Membership.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def deactivated(self):
        """Gets the deactivated of this Membership.  # noqa: E501


        :return: The deactivated of this Membership.  # noqa: E501
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this Membership.


        :param deactivated: The deactivated of this Membership.  # noqa: E501
        :type: bool
        """

        self._deactivated = deactivated

    @property
    def collaborator(self):
        """Gets the collaborator of this Membership.  # noqa: E501


        :return: The collaborator of this Membership.  # noqa: E501
        :rtype: bool
        """
        return self._collaborator

    @collaborator.setter
    def collaborator(self, collaborator):
        """Sets the collaborator of this Membership.


        :param collaborator: The collaborator of this Membership.  # noqa: E501
        :type: bool
        """

        self._collaborator = collaborator

    @property
    def member(self):
        """Gets the member of this Membership.  # noqa: E501


        :return: The member of this Membership.  # noqa: E501
        :rtype: MembershipMember
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Membership.


        :param member: The member of this Membership.  # noqa: E501
        :type: MembershipMember
        """

        self._member = member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Membership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Membership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
