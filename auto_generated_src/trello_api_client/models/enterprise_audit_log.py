# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnterpriseAuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_action': 'TrelloID',
        'type': 'str',
        '_date': 'date',
        'member_creator': 'EnterpriseAuditLogMemberCreator',
        'organization': 'EnterpriseAuditLogOrganization',
        'member': 'EnterpriseAuditLogMember'
    }

    attribute_map = {
        'id_action': 'idAction',
        'type': 'type',
        '_date': 'date',
        'member_creator': 'memberCreator',
        'organization': 'organization',
        'member': 'member'
    }

    def __init__(self, id_action=None, type=None, _date=None, member_creator=None, organization=None, member=None):  # noqa: E501
        """EnterpriseAuditLog - a model defined in Swagger"""  # noqa: E501
        self._id_action = None
        self._type = None
        self.__date = None
        self._member_creator = None
        self._organization = None
        self._member = None
        self.discriminator = None
        if id_action is not None:
            self.id_action = id_action
        if type is not None:
            self.type = type
        if _date is not None:
            self._date = _date
        if member_creator is not None:
            self.member_creator = member_creator
        if organization is not None:
            self.organization = organization
        if member is not None:
            self.member = member

    @property
    def id_action(self):
        """Gets the id_action of this EnterpriseAuditLog.  # noqa: E501


        :return: The id_action of this EnterpriseAuditLog.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_action

    @id_action.setter
    def id_action(self, id_action):
        """Sets the id_action of this EnterpriseAuditLog.


        :param id_action: The id_action of this EnterpriseAuditLog.  # noqa: E501
        :type: TrelloID
        """

        self._id_action = id_action

    @property
    def type(self):
        """Gets the type of this EnterpriseAuditLog.  # noqa: E501


        :return: The type of this EnterpriseAuditLog.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnterpriseAuditLog.


        :param type: The type of this EnterpriseAuditLog.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def _date(self):
        """Gets the _date of this EnterpriseAuditLog.  # noqa: E501


        :return: The _date of this EnterpriseAuditLog.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EnterpriseAuditLog.


        :param _date: The _date of this EnterpriseAuditLog.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def member_creator(self):
        """Gets the member_creator of this EnterpriseAuditLog.  # noqa: E501


        :return: The member_creator of this EnterpriseAuditLog.  # noqa: E501
        :rtype: EnterpriseAuditLogMemberCreator
        """
        return self._member_creator

    @member_creator.setter
    def member_creator(self, member_creator):
        """Sets the member_creator of this EnterpriseAuditLog.


        :param member_creator: The member_creator of this EnterpriseAuditLog.  # noqa: E501
        :type: EnterpriseAuditLogMemberCreator
        """

        self._member_creator = member_creator

    @property
    def organization(self):
        """Gets the organization of this EnterpriseAuditLog.  # noqa: E501


        :return: The organization of this EnterpriseAuditLog.  # noqa: E501
        :rtype: EnterpriseAuditLogOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this EnterpriseAuditLog.


        :param organization: The organization of this EnterpriseAuditLog.  # noqa: E501
        :type: EnterpriseAuditLogOrganization
        """

        self._organization = organization

    @property
    def member(self):
        """Gets the member of this EnterpriseAuditLog.  # noqa: E501


        :return: The member of this EnterpriseAuditLog.  # noqa: E501
        :rtype: EnterpriseAuditLogMember
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this EnterpriseAuditLog.


        :param member: The member of this EnterpriseAuditLog.  # noqa: E501
        :type: EnterpriseAuditLogMember
        """

        self._member = member

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterpriseAuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterpriseAuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
