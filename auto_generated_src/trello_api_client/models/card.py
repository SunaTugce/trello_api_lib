# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'address': 'str',
        'badges': 'CardBadges',
        'check_item_states': 'list[OneOfCardCheckItemStatesItems]',
        'closed': 'bool',
        'coordinates': 'str',
        'creation_method': 'str',
        'date_last_activity': 'datetime',
        'desc': 'str',
        'desc_data': 'CardDescData',
        'due': 'date',
        'due_reminder': 'str',
        'email': 'str',
        'id_board': 'TrelloID',
        'id_checklists': 'list[OneOfCardIdChecklistsItems]',
        'id_labels': 'list[OneOfCardIdLabelsItems]',
        'id_list': 'TrelloID',
        'id_members': 'list[OneOfCardIdMembersItems]',
        'id_members_voted': 'list[OneOfCardIdMembersVotedItems]',
        'id_short': 'int',
        'id_attachment_cover': 'TrelloID',
        'labels': 'list[OneOfCardLabelsItems]',
        'limits': 'Limits',
        'location_name': 'str',
        'manual_cover_attachment': 'bool',
        'name': 'str',
        'pos': 'float',
        'short_link': 'str',
        'short_url': 'str',
        'subscribed': 'bool',
        'url': 'str',
        'cover': 'CardCover'
    }

    attribute_map = {
        'id': 'id',
        'address': 'address',
        'badges': 'badges',
        'check_item_states': 'checkItemStates',
        'closed': 'closed',
        'coordinates': 'coordinates',
        'creation_method': 'creationMethod',
        'date_last_activity': 'dateLastActivity',
        'desc': 'desc',
        'desc_data': 'descData',
        'due': 'due',
        'due_reminder': 'dueReminder',
        'email': 'email',
        'id_board': 'idBoard',
        'id_checklists': 'idChecklists',
        'id_labels': 'idLabels',
        'id_list': 'idList',
        'id_members': 'idMembers',
        'id_members_voted': 'idMembersVoted',
        'id_short': 'idShort',
        'id_attachment_cover': 'idAttachmentCover',
        'labels': 'labels',
        'limits': 'limits',
        'location_name': 'locationName',
        'manual_cover_attachment': 'manualCoverAttachment',
        'name': 'name',
        'pos': 'pos',
        'short_link': 'shortLink',
        'short_url': 'shortUrl',
        'subscribed': 'subscribed',
        'url': 'url',
        'cover': 'cover'
    }

    def __init__(self, id=None, address=None, badges=None, check_item_states=None, closed=None, coordinates=None, creation_method=None, date_last_activity=None, desc=None, desc_data=None, due=None, due_reminder=None, email=None, id_board=None, id_checklists=None, id_labels=None, id_list=None, id_members=None, id_members_voted=None, id_short=None, id_attachment_cover=None, labels=None, limits=None, location_name=None, manual_cover_attachment=None, name=None, pos=None, short_link=None, short_url=None, subscribed=None, url=None, cover=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._address = None
        self._badges = None
        self._check_item_states = None
        self._closed = None
        self._coordinates = None
        self._creation_method = None
        self._date_last_activity = None
        self._desc = None
        self._desc_data = None
        self._due = None
        self._due_reminder = None
        self._email = None
        self._id_board = None
        self._id_checklists = None
        self._id_labels = None
        self._id_list = None
        self._id_members = None
        self._id_members_voted = None
        self._id_short = None
        self._id_attachment_cover = None
        self._labels = None
        self._limits = None
        self._location_name = None
        self._manual_cover_attachment = None
        self._name = None
        self._pos = None
        self._short_link = None
        self._short_url = None
        self._subscribed = None
        self._url = None
        self._cover = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if address is not None:
            self.address = address
        if badges is not None:
            self.badges = badges
        if check_item_states is not None:
            self.check_item_states = check_item_states
        if closed is not None:
            self.closed = closed
        if coordinates is not None:
            self.coordinates = coordinates
        if creation_method is not None:
            self.creation_method = creation_method
        if date_last_activity is not None:
            self.date_last_activity = date_last_activity
        if desc is not None:
            self.desc = desc
        if desc_data is not None:
            self.desc_data = desc_data
        if due is not None:
            self.due = due
        if due_reminder is not None:
            self.due_reminder = due_reminder
        if email is not None:
            self.email = email
        if id_board is not None:
            self.id_board = id_board
        if id_checklists is not None:
            self.id_checklists = id_checklists
        if id_labels is not None:
            self.id_labels = id_labels
        if id_list is not None:
            self.id_list = id_list
        if id_members is not None:
            self.id_members = id_members
        if id_members_voted is not None:
            self.id_members_voted = id_members_voted
        if id_short is not None:
            self.id_short = id_short
        if id_attachment_cover is not None:
            self.id_attachment_cover = id_attachment_cover
        if labels is not None:
            self.labels = labels
        if limits is not None:
            self.limits = limits
        if location_name is not None:
            self.location_name = location_name
        if manual_cover_attachment is not None:
            self.manual_cover_attachment = manual_cover_attachment
        if name is not None:
            self.name = name
        if pos is not None:
            self.pos = pos
        if short_link is not None:
            self.short_link = short_link
        if short_url is not None:
            self.short_url = short_url
        if subscribed is not None:
            self.subscribed = subscribed
        if url is not None:
            self.url = url
        if cover is not None:
            self.cover = cover

    @property
    def id(self):
        """Gets the id of this Card.  # noqa: E501


        :return: The id of this Card.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Card.


        :param id: The id of this Card.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this Card.  # noqa: E501


        :return: The address of this Card.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Card.


        :param address: The address of this Card.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def badges(self):
        """Gets the badges of this Card.  # noqa: E501


        :return: The badges of this Card.  # noqa: E501
        :rtype: CardBadges
        """
        return self._badges

    @badges.setter
    def badges(self, badges):
        """Sets the badges of this Card.


        :param badges: The badges of this Card.  # noqa: E501
        :type: CardBadges
        """

        self._badges = badges

    @property
    def check_item_states(self):
        """Gets the check_item_states of this Card.  # noqa: E501


        :return: The check_item_states of this Card.  # noqa: E501
        :rtype: list[OneOfCardCheckItemStatesItems]
        """
        return self._check_item_states

    @check_item_states.setter
    def check_item_states(self, check_item_states):
        """Sets the check_item_states of this Card.


        :param check_item_states: The check_item_states of this Card.  # noqa: E501
        :type: list[OneOfCardCheckItemStatesItems]
        """

        self._check_item_states = check_item_states

    @property
    def closed(self):
        """Gets the closed of this Card.  # noqa: E501


        :return: The closed of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this Card.


        :param closed: The closed of this Card.  # noqa: E501
        :type: bool
        """

        self._closed = closed

    @property
    def coordinates(self):
        """Gets the coordinates of this Card.  # noqa: E501


        :return: The coordinates of this Card.  # noqa: E501
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Card.


        :param coordinates: The coordinates of this Card.  # noqa: E501
        :type: str
        """

        self._coordinates = coordinates

    @property
    def creation_method(self):
        """Gets the creation_method of this Card.  # noqa: E501


        :return: The creation_method of this Card.  # noqa: E501
        :rtype: str
        """
        return self._creation_method

    @creation_method.setter
    def creation_method(self, creation_method):
        """Sets the creation_method of this Card.


        :param creation_method: The creation_method of this Card.  # noqa: E501
        :type: str
        """

        self._creation_method = creation_method

    @property
    def date_last_activity(self):
        """Gets the date_last_activity of this Card.  # noqa: E501


        :return: The date_last_activity of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._date_last_activity

    @date_last_activity.setter
    def date_last_activity(self, date_last_activity):
        """Sets the date_last_activity of this Card.


        :param date_last_activity: The date_last_activity of this Card.  # noqa: E501
        :type: datetime
        """

        self._date_last_activity = date_last_activity

    @property
    def desc(self):
        """Gets the desc of this Card.  # noqa: E501


        :return: The desc of this Card.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Card.


        :param desc: The desc of this Card.  # noqa: E501
        :type: str
        """

        self._desc = desc

    @property
    def desc_data(self):
        """Gets the desc_data of this Card.  # noqa: E501


        :return: The desc_data of this Card.  # noqa: E501
        :rtype: CardDescData
        """
        return self._desc_data

    @desc_data.setter
    def desc_data(self, desc_data):
        """Sets the desc_data of this Card.


        :param desc_data: The desc_data of this Card.  # noqa: E501
        :type: CardDescData
        """

        self._desc_data = desc_data

    @property
    def due(self):
        """Gets the due of this Card.  # noqa: E501


        :return: The due of this Card.  # noqa: E501
        :rtype: date
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Card.


        :param due: The due of this Card.  # noqa: E501
        :type: date
        """

        self._due = due

    @property
    def due_reminder(self):
        """Gets the due_reminder of this Card.  # noqa: E501


        :return: The due_reminder of this Card.  # noqa: E501
        :rtype: str
        """
        return self._due_reminder

    @due_reminder.setter
    def due_reminder(self, due_reminder):
        """Sets the due_reminder of this Card.


        :param due_reminder: The due_reminder of this Card.  # noqa: E501
        :type: str
        """

        self._due_reminder = due_reminder

    @property
    def email(self):
        """Gets the email of this Card.  # noqa: E501


        :return: The email of this Card.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Card.


        :param email: The email of this Card.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def id_board(self):
        """Gets the id_board of this Card.  # noqa: E501


        :return: The id_board of this Card.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_board

    @id_board.setter
    def id_board(self, id_board):
        """Sets the id_board of this Card.


        :param id_board: The id_board of this Card.  # noqa: E501
        :type: TrelloID
        """

        self._id_board = id_board

    @property
    def id_checklists(self):
        """Gets the id_checklists of this Card.  # noqa: E501


        :return: The id_checklists of this Card.  # noqa: E501
        :rtype: list[OneOfCardIdChecklistsItems]
        """
        return self._id_checklists

    @id_checklists.setter
    def id_checklists(self, id_checklists):
        """Sets the id_checklists of this Card.


        :param id_checklists: The id_checklists of this Card.  # noqa: E501
        :type: list[OneOfCardIdChecklistsItems]
        """

        self._id_checklists = id_checklists

    @property
    def id_labels(self):
        """Gets the id_labels of this Card.  # noqa: E501


        :return: The id_labels of this Card.  # noqa: E501
        :rtype: list[OneOfCardIdLabelsItems]
        """
        return self._id_labels

    @id_labels.setter
    def id_labels(self, id_labels):
        """Sets the id_labels of this Card.


        :param id_labels: The id_labels of this Card.  # noqa: E501
        :type: list[OneOfCardIdLabelsItems]
        """

        self._id_labels = id_labels

    @property
    def id_list(self):
        """Gets the id_list of this Card.  # noqa: E501


        :return: The id_list of this Card.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_list

    @id_list.setter
    def id_list(self, id_list):
        """Sets the id_list of this Card.


        :param id_list: The id_list of this Card.  # noqa: E501
        :type: TrelloID
        """

        self._id_list = id_list

    @property
    def id_members(self):
        """Gets the id_members of this Card.  # noqa: E501


        :return: The id_members of this Card.  # noqa: E501
        :rtype: list[OneOfCardIdMembersItems]
        """
        return self._id_members

    @id_members.setter
    def id_members(self, id_members):
        """Sets the id_members of this Card.


        :param id_members: The id_members of this Card.  # noqa: E501
        :type: list[OneOfCardIdMembersItems]
        """

        self._id_members = id_members

    @property
    def id_members_voted(self):
        """Gets the id_members_voted of this Card.  # noqa: E501


        :return: The id_members_voted of this Card.  # noqa: E501
        :rtype: list[OneOfCardIdMembersVotedItems]
        """
        return self._id_members_voted

    @id_members_voted.setter
    def id_members_voted(self, id_members_voted):
        """Sets the id_members_voted of this Card.


        :param id_members_voted: The id_members_voted of this Card.  # noqa: E501
        :type: list[OneOfCardIdMembersVotedItems]
        """

        self._id_members_voted = id_members_voted

    @property
    def id_short(self):
        """Gets the id_short of this Card.  # noqa: E501


        :return: The id_short of this Card.  # noqa: E501
        :rtype: int
        """
        return self._id_short

    @id_short.setter
    def id_short(self, id_short):
        """Sets the id_short of this Card.


        :param id_short: The id_short of this Card.  # noqa: E501
        :type: int
        """

        self._id_short = id_short

    @property
    def id_attachment_cover(self):
        """Gets the id_attachment_cover of this Card.  # noqa: E501


        :return: The id_attachment_cover of this Card.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_attachment_cover

    @id_attachment_cover.setter
    def id_attachment_cover(self, id_attachment_cover):
        """Sets the id_attachment_cover of this Card.


        :param id_attachment_cover: The id_attachment_cover of this Card.  # noqa: E501
        :type: TrelloID
        """

        self._id_attachment_cover = id_attachment_cover

    @property
    def labels(self):
        """Gets the labels of this Card.  # noqa: E501


        :return: The labels of this Card.  # noqa: E501
        :rtype: list[OneOfCardLabelsItems]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Card.


        :param labels: The labels of this Card.  # noqa: E501
        :type: list[OneOfCardLabelsItems]
        """

        self._labels = labels

    @property
    def limits(self):
        """Gets the limits of this Card.  # noqa: E501


        :return: The limits of this Card.  # noqa: E501
        :rtype: Limits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this Card.


        :param limits: The limits of this Card.  # noqa: E501
        :type: Limits
        """

        self._limits = limits

    @property
    def location_name(self):
        """Gets the location_name of this Card.  # noqa: E501


        :return: The location_name of this Card.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this Card.


        :param location_name: The location_name of this Card.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def manual_cover_attachment(self):
        """Gets the manual_cover_attachment of this Card.  # noqa: E501


        :return: The manual_cover_attachment of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._manual_cover_attachment

    @manual_cover_attachment.setter
    def manual_cover_attachment(self, manual_cover_attachment):
        """Sets the manual_cover_attachment of this Card.


        :param manual_cover_attachment: The manual_cover_attachment of this Card.  # noqa: E501
        :type: bool
        """

        self._manual_cover_attachment = manual_cover_attachment

    @property
    def name(self):
        """Gets the name of this Card.  # noqa: E501


        :return: The name of this Card.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Card.


        :param name: The name of this Card.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def pos(self):
        """Gets the pos of this Card.  # noqa: E501


        :return: The pos of this Card.  # noqa: E501
        :rtype: float
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Card.


        :param pos: The pos of this Card.  # noqa: E501
        :type: float
        """

        self._pos = pos

    @property
    def short_link(self):
        """Gets the short_link of this Card.  # noqa: E501


        :return: The short_link of this Card.  # noqa: E501
        :rtype: str
        """
        return self._short_link

    @short_link.setter
    def short_link(self, short_link):
        """Sets the short_link of this Card.


        :param short_link: The short_link of this Card.  # noqa: E501
        :type: str
        """

        self._short_link = short_link

    @property
    def short_url(self):
        """Gets the short_url of this Card.  # noqa: E501


        :return: The short_url of this Card.  # noqa: E501
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url):
        """Sets the short_url of this Card.


        :param short_url: The short_url of this Card.  # noqa: E501
        :type: str
        """

        self._short_url = short_url

    @property
    def subscribed(self):
        """Gets the subscribed of this Card.  # noqa: E501


        :return: The subscribed of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Card.


        :param subscribed: The subscribed of this Card.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def url(self):
        """Gets the url of this Card.  # noqa: E501


        :return: The url of this Card.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Card.


        :param url: The url of this Card.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def cover(self):
        """Gets the cover of this Card.  # noqa: E501


        :return: The cover of this Card.  # noqa: E501
        :rtype: CardCover
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this Card.


        :param cover: The cover of this Card.  # noqa: E501
        :type: CardCover
        """

        self._cover = cover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
