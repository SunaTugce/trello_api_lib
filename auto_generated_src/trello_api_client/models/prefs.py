# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Prefs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permission_level': 'str',
        'hide_votes': 'bool',
        'voting': 'str',
        'comments': 'str',
        'invitations': 'str',
        'self_join': 'bool',
        'card_covers': 'bool',
        'is_template': 'bool',
        'card_aging': 'CardAging',
        'calendar_feed_enabled': 'bool',
        'background': 'TrelloID',
        'background_image': 'str',
        'background_image_scaled': 'list[ImageDescriptor]',
        'background_tile': 'bool',
        'background_brightness': 'str',
        'background_bottom_color': 'str',
        'background_top_color': 'str',
        'can_be_public': 'bool',
        'can_be_enterprise': 'bool',
        'can_be_org': 'bool',
        'can_be_private': 'bool',
        'can_invite': 'bool'
    }

    attribute_map = {
        'permission_level': 'permissionLevel',
        'hide_votes': 'hideVotes',
        'voting': 'voting',
        'comments': 'comments',
        'invitations': 'invitations',
        'self_join': 'selfJoin',
        'card_covers': 'cardCovers',
        'is_template': 'isTemplate',
        'card_aging': 'cardAging',
        'calendar_feed_enabled': 'calendarFeedEnabled',
        'background': 'background',
        'background_image': 'backgroundImage',
        'background_image_scaled': 'backgroundImageScaled',
        'background_tile': 'backgroundTile',
        'background_brightness': 'backgroundBrightness',
        'background_bottom_color': 'backgroundBottomColor',
        'background_top_color': 'backgroundTopColor',
        'can_be_public': 'canBePublic',
        'can_be_enterprise': 'canBeEnterprise',
        'can_be_org': 'canBeOrg',
        'can_be_private': 'canBePrivate',
        'can_invite': 'canInvite'
    }

    def __init__(self, permission_level=None, hide_votes=None, voting=None, comments=None, invitations=None, self_join=None, card_covers=None, is_template=None, card_aging=None, calendar_feed_enabled=None, background=None, background_image=None, background_image_scaled=None, background_tile=None, background_brightness=None, background_bottom_color=None, background_top_color=None, can_be_public=None, can_be_enterprise=None, can_be_org=None, can_be_private=None, can_invite=None):  # noqa: E501
        """Prefs - a model defined in Swagger"""  # noqa: E501
        self._permission_level = None
        self._hide_votes = None
        self._voting = None
        self._comments = None
        self._invitations = None
        self._self_join = None
        self._card_covers = None
        self._is_template = None
        self._card_aging = None
        self._calendar_feed_enabled = None
        self._background = None
        self._background_image = None
        self._background_image_scaled = None
        self._background_tile = None
        self._background_brightness = None
        self._background_bottom_color = None
        self._background_top_color = None
        self._can_be_public = None
        self._can_be_enterprise = None
        self._can_be_org = None
        self._can_be_private = None
        self._can_invite = None
        self.discriminator = None
        if permission_level is not None:
            self.permission_level = permission_level
        if hide_votes is not None:
            self.hide_votes = hide_votes
        if voting is not None:
            self.voting = voting
        if comments is not None:
            self.comments = comments
        if invitations is not None:
            self.invitations = invitations
        if self_join is not None:
            self.self_join = self_join
        if card_covers is not None:
            self.card_covers = card_covers
        if is_template is not None:
            self.is_template = is_template
        if card_aging is not None:
            self.card_aging = card_aging
        if calendar_feed_enabled is not None:
            self.calendar_feed_enabled = calendar_feed_enabled
        if background is not None:
            self.background = background
        if background_image is not None:
            self.background_image = background_image
        if background_image_scaled is not None:
            self.background_image_scaled = background_image_scaled
        if background_tile is not None:
            self.background_tile = background_tile
        if background_brightness is not None:
            self.background_brightness = background_brightness
        if background_bottom_color is not None:
            self.background_bottom_color = background_bottom_color
        if background_top_color is not None:
            self.background_top_color = background_top_color
        if can_be_public is not None:
            self.can_be_public = can_be_public
        if can_be_enterprise is not None:
            self.can_be_enterprise = can_be_enterprise
        if can_be_org is not None:
            self.can_be_org = can_be_org
        if can_be_private is not None:
            self.can_be_private = can_be_private
        if can_invite is not None:
            self.can_invite = can_invite

    @property
    def permission_level(self):
        """Gets the permission_level of this Prefs.  # noqa: E501


        :return: The permission_level of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._permission_level

    @permission_level.setter
    def permission_level(self, permission_level):
        """Sets the permission_level of this Prefs.


        :param permission_level: The permission_level of this Prefs.  # noqa: E501
        :type: str
        """
        allowed_values = ["org", "board"]  # noqa: E501
        if permission_level not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_level` ({0}), must be one of {1}"  # noqa: E501
                .format(permission_level, allowed_values)
            )

        self._permission_level = permission_level

    @property
    def hide_votes(self):
        """Gets the hide_votes of this Prefs.  # noqa: E501


        :return: The hide_votes of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._hide_votes

    @hide_votes.setter
    def hide_votes(self, hide_votes):
        """Sets the hide_votes of this Prefs.


        :param hide_votes: The hide_votes of this Prefs.  # noqa: E501
        :type: bool
        """

        self._hide_votes = hide_votes

    @property
    def voting(self):
        """Gets the voting of this Prefs.  # noqa: E501


        :return: The voting of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._voting

    @voting.setter
    def voting(self, voting):
        """Sets the voting of this Prefs.


        :param voting: The voting of this Prefs.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if voting not in allowed_values:
            raise ValueError(
                "Invalid value for `voting` ({0}), must be one of {1}"  # noqa: E501
                .format(voting, allowed_values)
            )

        self._voting = voting

    @property
    def comments(self):
        """Gets the comments of this Prefs.  # noqa: E501


        :return: The comments of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Prefs.


        :param comments: The comments of this Prefs.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def invitations(self):
        """Gets the invitations of this Prefs.  # noqa: E501


        :return: The invitations of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._invitations

    @invitations.setter
    def invitations(self, invitations):
        """Sets the invitations of this Prefs.


        :param invitations: The invitations of this Prefs.  # noqa: E501
        :type: str
        """

        self._invitations = invitations

    @property
    def self_join(self):
        """Gets the self_join of this Prefs.  # noqa: E501


        :return: The self_join of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._self_join

    @self_join.setter
    def self_join(self, self_join):
        """Sets the self_join of this Prefs.


        :param self_join: The self_join of this Prefs.  # noqa: E501
        :type: bool
        """

        self._self_join = self_join

    @property
    def card_covers(self):
        """Gets the card_covers of this Prefs.  # noqa: E501


        :return: The card_covers of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._card_covers

    @card_covers.setter
    def card_covers(self, card_covers):
        """Sets the card_covers of this Prefs.


        :param card_covers: The card_covers of this Prefs.  # noqa: E501
        :type: bool
        """

        self._card_covers = card_covers

    @property
    def is_template(self):
        """Gets the is_template of this Prefs.  # noqa: E501


        :return: The is_template of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this Prefs.


        :param is_template: The is_template of this Prefs.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    @property
    def card_aging(self):
        """Gets the card_aging of this Prefs.  # noqa: E501


        :return: The card_aging of this Prefs.  # noqa: E501
        :rtype: CardAging
        """
        return self._card_aging

    @card_aging.setter
    def card_aging(self, card_aging):
        """Sets the card_aging of this Prefs.


        :param card_aging: The card_aging of this Prefs.  # noqa: E501
        :type: CardAging
        """

        self._card_aging = card_aging

    @property
    def calendar_feed_enabled(self):
        """Gets the calendar_feed_enabled of this Prefs.  # noqa: E501


        :return: The calendar_feed_enabled of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._calendar_feed_enabled

    @calendar_feed_enabled.setter
    def calendar_feed_enabled(self, calendar_feed_enabled):
        """Sets the calendar_feed_enabled of this Prefs.


        :param calendar_feed_enabled: The calendar_feed_enabled of this Prefs.  # noqa: E501
        :type: bool
        """

        self._calendar_feed_enabled = calendar_feed_enabled

    @property
    def background(self):
        """Gets the background of this Prefs.  # noqa: E501


        :return: The background of this Prefs.  # noqa: E501
        :rtype: TrelloID
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this Prefs.


        :param background: The background of this Prefs.  # noqa: E501
        :type: TrelloID
        """

        self._background = background

    @property
    def background_image(self):
        """Gets the background_image of this Prefs.  # noqa: E501


        :return: The background_image of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this Prefs.


        :param background_image: The background_image of this Prefs.  # noqa: E501
        :type: str
        """

        self._background_image = background_image

    @property
    def background_image_scaled(self):
        """Gets the background_image_scaled of this Prefs.  # noqa: E501


        :return: The background_image_scaled of this Prefs.  # noqa: E501
        :rtype: list[ImageDescriptor]
        """
        return self._background_image_scaled

    @background_image_scaled.setter
    def background_image_scaled(self, background_image_scaled):
        """Sets the background_image_scaled of this Prefs.


        :param background_image_scaled: The background_image_scaled of this Prefs.  # noqa: E501
        :type: list[ImageDescriptor]
        """

        self._background_image_scaled = background_image_scaled

    @property
    def background_tile(self):
        """Gets the background_tile of this Prefs.  # noqa: E501


        :return: The background_tile of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._background_tile

    @background_tile.setter
    def background_tile(self, background_tile):
        """Sets the background_tile of this Prefs.


        :param background_tile: The background_tile of this Prefs.  # noqa: E501
        :type: bool
        """

        self._background_tile = background_tile

    @property
    def background_brightness(self):
        """Gets the background_brightness of this Prefs.  # noqa: E501


        :return: The background_brightness of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._background_brightness

    @background_brightness.setter
    def background_brightness(self, background_brightness):
        """Sets the background_brightness of this Prefs.


        :param background_brightness: The background_brightness of this Prefs.  # noqa: E501
        :type: str
        """

        self._background_brightness = background_brightness

    @property
    def background_bottom_color(self):
        """Gets the background_bottom_color of this Prefs.  # noqa: E501


        :return: The background_bottom_color of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._background_bottom_color

    @background_bottom_color.setter
    def background_bottom_color(self, background_bottom_color):
        """Sets the background_bottom_color of this Prefs.


        :param background_bottom_color: The background_bottom_color of this Prefs.  # noqa: E501
        :type: str
        """

        self._background_bottom_color = background_bottom_color

    @property
    def background_top_color(self):
        """Gets the background_top_color of this Prefs.  # noqa: E501


        :return: The background_top_color of this Prefs.  # noqa: E501
        :rtype: str
        """
        return self._background_top_color

    @background_top_color.setter
    def background_top_color(self, background_top_color):
        """Sets the background_top_color of this Prefs.


        :param background_top_color: The background_top_color of this Prefs.  # noqa: E501
        :type: str
        """

        self._background_top_color = background_top_color

    @property
    def can_be_public(self):
        """Gets the can_be_public of this Prefs.  # noqa: E501


        :return: The can_be_public of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_public

    @can_be_public.setter
    def can_be_public(self, can_be_public):
        """Sets the can_be_public of this Prefs.


        :param can_be_public: The can_be_public of this Prefs.  # noqa: E501
        :type: bool
        """

        self._can_be_public = can_be_public

    @property
    def can_be_enterprise(self):
        """Gets the can_be_enterprise of this Prefs.  # noqa: E501


        :return: The can_be_enterprise of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_enterprise

    @can_be_enterprise.setter
    def can_be_enterprise(self, can_be_enterprise):
        """Sets the can_be_enterprise of this Prefs.


        :param can_be_enterprise: The can_be_enterprise of this Prefs.  # noqa: E501
        :type: bool
        """

        self._can_be_enterprise = can_be_enterprise

    @property
    def can_be_org(self):
        """Gets the can_be_org of this Prefs.  # noqa: E501


        :return: The can_be_org of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_org

    @can_be_org.setter
    def can_be_org(self, can_be_org):
        """Sets the can_be_org of this Prefs.


        :param can_be_org: The can_be_org of this Prefs.  # noqa: E501
        :type: bool
        """

        self._can_be_org = can_be_org

    @property
    def can_be_private(self):
        """Gets the can_be_private of this Prefs.  # noqa: E501


        :return: The can_be_private of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_private

    @can_be_private.setter
    def can_be_private(self, can_be_private):
        """Sets the can_be_private of this Prefs.


        :param can_be_private: The can_be_private of this Prefs.  # noqa: E501
        :type: bool
        """

        self._can_be_private = can_be_private

    @property
    def can_invite(self):
        """Gets the can_invite of this Prefs.  # noqa: E501


        :return: The can_invite of this Prefs.  # noqa: E501
        :rtype: bool
        """
        return self._can_invite

    @can_invite.setter
    def can_invite(self, can_invite):
        """Sets the can_invite of this Prefs.


        :param can_invite: The can_invite of this Prefs.  # noqa: E501
        :type: bool
        """

        self._can_invite = can_invite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Prefs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Prefs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
