# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'id_model': 'str',
        'model_type': 'str',
        'field_group': 'str',
        'display': 'CustomFieldDisplay',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'id_model': 'idModel',
        'model_type': 'modelType',
        'field_group': 'fieldGroup',
        'display': 'display',
        'type': 'type'
    }

    def __init__(self, id=None, id_model=None, model_type=None, field_group=None, display=None, type=None):  # noqa: E501
        """CustomField - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id_model = None
        self._model_type = None
        self._field_group = None
        self._display = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if id_model is not None:
            self.id_model = id_model
        if model_type is not None:
            self.model_type = model_type
        if field_group is not None:
            self.field_group = field_group
        if display is not None:
            self.display = display
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this CustomField.  # noqa: E501


        :return: The id of this CustomField.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomField.


        :param id: The id of this CustomField.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def id_model(self):
        """Gets the id_model of this CustomField.  # noqa: E501


        :return: The id_model of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this CustomField.


        :param id_model: The id_model of this CustomField.  # noqa: E501
        :type: str
        """

        self._id_model = id_model

    @property
    def model_type(self):
        """Gets the model_type of this CustomField.  # noqa: E501


        :return: The model_type of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this CustomField.


        :param model_type: The model_type of this CustomField.  # noqa: E501
        :type: str
        """
        allowed_values = ["card", "board", "member"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def field_group(self):
        """Gets the field_group of this CustomField.  # noqa: E501


        :return: The field_group of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._field_group

    @field_group.setter
    def field_group(self, field_group):
        """Sets the field_group of this CustomField.


        :param field_group: The field_group of this CustomField.  # noqa: E501
        :type: str
        """

        self._field_group = field_group

    @property
    def display(self):
        """Gets the display of this CustomField.  # noqa: E501


        :return: The display of this CustomField.  # noqa: E501
        :rtype: CustomFieldDisplay
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CustomField.


        :param display: The display of this CustomField.  # noqa: E501
        :type: CustomFieldDisplay
        """

        self._display = display

    @property
    def type(self):
        """Gets the type of this CustomField.  # noqa: E501


        :return: The type of this CustomField.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomField.


        :param type: The type of this CustomField.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
