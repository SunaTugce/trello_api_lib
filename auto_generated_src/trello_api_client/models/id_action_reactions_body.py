# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdActionReactionsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_name': 'str',
        'skin_variation': 'str',
        'native': 'str',
        'unified': 'str'
    }

    attribute_map = {
        'short_name': 'shortName',
        'skin_variation': 'skinVariation',
        'native': 'native',
        'unified': 'unified'
    }

    def __init__(self, short_name=None, skin_variation=None, native=None, unified=None):  # noqa: E501
        """IdActionReactionsBody - a model defined in Swagger"""  # noqa: E501
        self._short_name = None
        self._skin_variation = None
        self._native = None
        self._unified = None
        self.discriminator = None
        if short_name is not None:
            self.short_name = short_name
        if skin_variation is not None:
            self.skin_variation = skin_variation
        if native is not None:
            self.native = native
        if unified is not None:
            self.unified = unified

    @property
    def short_name(self):
        """Gets the short_name of this IdActionReactionsBody.  # noqa: E501

        The primary `shortName` of the emoji to add. See [/emoji](#emoji)  # noqa: E501

        :return: The short_name of this IdActionReactionsBody.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this IdActionReactionsBody.

        The primary `shortName` of the emoji to add. See [/emoji](#emoji)  # noqa: E501

        :param short_name: The short_name of this IdActionReactionsBody.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def skin_variation(self):
        """Gets the skin_variation of this IdActionReactionsBody.  # noqa: E501

        The `skinVariation` of the emoji to add. See [/emoji](#emoji)  # noqa: E501

        :return: The skin_variation of this IdActionReactionsBody.  # noqa: E501
        :rtype: str
        """
        return self._skin_variation

    @skin_variation.setter
    def skin_variation(self, skin_variation):
        """Sets the skin_variation of this IdActionReactionsBody.

        The `skinVariation` of the emoji to add. See [/emoji](#emoji)  # noqa: E501

        :param skin_variation: The skin_variation of this IdActionReactionsBody.  # noqa: E501
        :type: str
        """

        self._skin_variation = skin_variation

    @property
    def native(self):
        """Gets the native of this IdActionReactionsBody.  # noqa: E501

        The emoji to add as a native unicode emoji. See [/emoji](#emoji)  # noqa: E501

        :return: The native of this IdActionReactionsBody.  # noqa: E501
        :rtype: str
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this IdActionReactionsBody.

        The emoji to add as a native unicode emoji. See [/emoji](#emoji)  # noqa: E501

        :param native: The native of this IdActionReactionsBody.  # noqa: E501
        :type: str
        """

        self._native = native

    @property
    def unified(self):
        """Gets the unified of this IdActionReactionsBody.  # noqa: E501

        The `unified` value of the emoji to add. See [/emoji](#emoji)  # noqa: E501

        :return: The unified of this IdActionReactionsBody.  # noqa: E501
        :rtype: str
        """
        return self._unified

    @unified.setter
    def unified(self, unified):
        """Sets the unified of this IdActionReactionsBody.

        The `unified` value of the emoji to add. See [/emoji](#emoji)  # noqa: E501

        :param unified: The unified of this IdActionReactionsBody.  # noqa: E501
        :type: str
        """

        self._unified = unified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdActionReactionsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdActionReactionsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
