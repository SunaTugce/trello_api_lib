# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnterprisePrefs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sso_only': 'bool',
        'signup': 'EnterprisePrefsSignup',
        'mandatory_transfer_date': 'date',
        'branding_color': 'str',
        'auto_join_organizations': 'bool',
        'notifications': 'object',
        'max_members': 'float'
    }

    attribute_map = {
        'sso_only': 'ssoOnly',
        'signup': 'signup',
        'mandatory_transfer_date': 'mandatoryTransferDate',
        'branding_color': 'brandingColor',
        'auto_join_organizations': 'autoJoinOrganizations',
        'notifications': 'notifications',
        'max_members': 'maxMembers'
    }

    def __init__(self, sso_only=None, signup=None, mandatory_transfer_date=None, branding_color=None, auto_join_organizations=None, notifications=None, max_members=None):  # noqa: E501
        """EnterprisePrefs - a model defined in Swagger"""  # noqa: E501
        self._sso_only = None
        self._signup = None
        self._mandatory_transfer_date = None
        self._branding_color = None
        self._auto_join_organizations = None
        self._notifications = None
        self._max_members = None
        self.discriminator = None
        if sso_only is not None:
            self.sso_only = sso_only
        if signup is not None:
            self.signup = signup
        if mandatory_transfer_date is not None:
            self.mandatory_transfer_date = mandatory_transfer_date
        if branding_color is not None:
            self.branding_color = branding_color
        if auto_join_organizations is not None:
            self.auto_join_organizations = auto_join_organizations
        if notifications is not None:
            self.notifications = notifications
        if max_members is not None:
            self.max_members = max_members

    @property
    def sso_only(self):
        """Gets the sso_only of this EnterprisePrefs.  # noqa: E501


        :return: The sso_only of this EnterprisePrefs.  # noqa: E501
        :rtype: bool
        """
        return self._sso_only

    @sso_only.setter
    def sso_only(self, sso_only):
        """Sets the sso_only of this EnterprisePrefs.


        :param sso_only: The sso_only of this EnterprisePrefs.  # noqa: E501
        :type: bool
        """

        self._sso_only = sso_only

    @property
    def signup(self):
        """Gets the signup of this EnterprisePrefs.  # noqa: E501


        :return: The signup of this EnterprisePrefs.  # noqa: E501
        :rtype: EnterprisePrefsSignup
        """
        return self._signup

    @signup.setter
    def signup(self, signup):
        """Sets the signup of this EnterprisePrefs.


        :param signup: The signup of this EnterprisePrefs.  # noqa: E501
        :type: EnterprisePrefsSignup
        """

        self._signup = signup

    @property
    def mandatory_transfer_date(self):
        """Gets the mandatory_transfer_date of this EnterprisePrefs.  # noqa: E501


        :return: The mandatory_transfer_date of this EnterprisePrefs.  # noqa: E501
        :rtype: date
        """
        return self._mandatory_transfer_date

    @mandatory_transfer_date.setter
    def mandatory_transfer_date(self, mandatory_transfer_date):
        """Sets the mandatory_transfer_date of this EnterprisePrefs.


        :param mandatory_transfer_date: The mandatory_transfer_date of this EnterprisePrefs.  # noqa: E501
        :type: date
        """

        self._mandatory_transfer_date = mandatory_transfer_date

    @property
    def branding_color(self):
        """Gets the branding_color of this EnterprisePrefs.  # noqa: E501


        :return: The branding_color of this EnterprisePrefs.  # noqa: E501
        :rtype: str
        """
        return self._branding_color

    @branding_color.setter
    def branding_color(self, branding_color):
        """Sets the branding_color of this EnterprisePrefs.


        :param branding_color: The branding_color of this EnterprisePrefs.  # noqa: E501
        :type: str
        """

        self._branding_color = branding_color

    @property
    def auto_join_organizations(self):
        """Gets the auto_join_organizations of this EnterprisePrefs.  # noqa: E501


        :return: The auto_join_organizations of this EnterprisePrefs.  # noqa: E501
        :rtype: bool
        """
        return self._auto_join_organizations

    @auto_join_organizations.setter
    def auto_join_organizations(self, auto_join_organizations):
        """Sets the auto_join_organizations of this EnterprisePrefs.


        :param auto_join_organizations: The auto_join_organizations of this EnterprisePrefs.  # noqa: E501
        :type: bool
        """

        self._auto_join_organizations = auto_join_organizations

    @property
    def notifications(self):
        """Gets the notifications of this EnterprisePrefs.  # noqa: E501


        :return: The notifications of this EnterprisePrefs.  # noqa: E501
        :rtype: object
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this EnterprisePrefs.


        :param notifications: The notifications of this EnterprisePrefs.  # noqa: E501
        :type: object
        """

        self._notifications = notifications

    @property
    def max_members(self):
        """Gets the max_members of this EnterprisePrefs.  # noqa: E501


        :return: The max_members of this EnterprisePrefs.  # noqa: E501
        :rtype: float
        """
        return self._max_members

    @max_members.setter
    def max_members(self, max_members):
        """Sets the max_members of this EnterprisePrefs.


        :param max_members: The max_members of this EnterprisePrefs.  # noqa: E501
        :type: float
        """

        self._max_members = max_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnterprisePrefs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnterprisePrefs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
