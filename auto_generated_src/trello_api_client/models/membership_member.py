# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MembershipMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'fullname': 'str',
        'username': 'str',
        'date_last_impression': 'str',
        'email': 'str',
        'initials': 'str',
        'avatar_url': 'str',
        'member_type': 'str',
        'confirmed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'fullname': 'fullname',
        'username': 'username',
        'date_last_impression': 'dateLastImpression',
        'email': 'email',
        'initials': 'initials',
        'avatar_url': 'avatarURL',
        'member_type': 'memberType',
        'confirmed': 'confirmed'
    }

    def __init__(self, id=None, fullname=None, username=None, date_last_impression=None, email=None, initials=None, avatar_url=None, member_type=None, confirmed=None):  # noqa: E501
        """MembershipMember - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._fullname = None
        self._username = None
        self._date_last_impression = None
        self._email = None
        self._initials = None
        self._avatar_url = None
        self._member_type = None
        self._confirmed = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if fullname is not None:
            self.fullname = fullname
        if username is not None:
            self.username = username
        if date_last_impression is not None:
            self.date_last_impression = date_last_impression
        if email is not None:
            self.email = email
        if initials is not None:
            self.initials = initials
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if member_type is not None:
            self.member_type = member_type
        if confirmed is not None:
            self.confirmed = confirmed

    @property
    def id(self):
        """Gets the id of this MembershipMember.  # noqa: E501


        :return: The id of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MembershipMember.


        :param id: The id of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def fullname(self):
        """Gets the fullname of this MembershipMember.  # noqa: E501


        :return: The fullname of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this MembershipMember.


        :param fullname: The fullname of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def username(self):
        """Gets the username of this MembershipMember.  # noqa: E501


        :return: The username of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MembershipMember.


        :param username: The username of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def date_last_impression(self):
        """Gets the date_last_impression of this MembershipMember.  # noqa: E501


        :return: The date_last_impression of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._date_last_impression

    @date_last_impression.setter
    def date_last_impression(self, date_last_impression):
        """Sets the date_last_impression of this MembershipMember.


        :param date_last_impression: The date_last_impression of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._date_last_impression = date_last_impression

    @property
    def email(self):
        """Gets the email of this MembershipMember.  # noqa: E501


        :return: The email of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MembershipMember.


        :param email: The email of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def initials(self):
        """Gets the initials of this MembershipMember.  # noqa: E501


        :return: The initials of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this MembershipMember.


        :param initials: The initials of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def avatar_url(self):
        """Gets the avatar_url of this MembershipMember.  # noqa: E501


        :return: The avatar_url of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this MembershipMember.


        :param avatar_url: The avatar_url of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def member_type(self):
        """Gets the member_type of this MembershipMember.  # noqa: E501


        :return: The member_type of this MembershipMember.  # noqa: E501
        :rtype: str
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this MembershipMember.


        :param member_type: The member_type of this MembershipMember.  # noqa: E501
        :type: str
        """

        self._member_type = member_type

    @property
    def confirmed(self):
        """Gets the confirmed of this MembershipMember.  # noqa: E501


        :return: The confirmed of this MembershipMember.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this MembershipMember.


        :param confirmed: The confirmed of this MembershipMember.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MembershipMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembershipMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
