# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CardsidValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'brightness': 'str',
        'url': 'str'
    }

    attribute_map = {
        'color': 'color',
        'brightness': 'brightness',
        'url': 'url'
    }

    def __init__(self, color=None, brightness=None, url=None):  # noqa: E501
        """CardsidValue - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._brightness = None
        self._url = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if brightness is not None:
            self.brightness = brightness
        if url is not None:
            self.url = url

    @property
    def color(self):
        """Gets the color of this CardsidValue.  # noqa: E501

        One of: `pink, yellow, lime, blue, black, orange, red, purple, sky, green`  # noqa: E501

        :return: The color of this CardsidValue.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this CardsidValue.

        One of: `pink, yellow, lime, blue, black, orange, red, purple, sky, green`  # noqa: E501

        :param color: The color of this CardsidValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["pink", "yellow", "lime", "blue", "black", "orange", "red", "purple", "sky", "green"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def brightness(self):
        """Gets the brightness of this CardsidValue.  # noqa: E501

        Determines whether the text on the cover should be dark or light. Setting it to `light` will make the text on the card cover dark. And vice versa, setting it to dark will make the text on the card cover light  # noqa: E501

        :return: The brightness of this CardsidValue.  # noqa: E501
        :rtype: str
        """
        return self._brightness

    @brightness.setter
    def brightness(self, brightness):
        """Sets the brightness of this CardsidValue.

        Determines whether the text on the cover should be dark or light. Setting it to `light` will make the text on the card cover dark. And vice versa, setting it to dark will make the text on the card cover light  # noqa: E501

        :param brightness: The brightness of this CardsidValue.  # noqa: E501
        :type: str
        """
        allowed_values = ["dark", "light"]  # noqa: E501
        if brightness not in allowed_values:
            raise ValueError(
                "Invalid value for `brightness` ({0}), must be one of {1}"  # noqa: E501
                .format(brightness, allowed_values)
            )

        self._brightness = brightness

    @property
    def url(self):
        """Gets the url of this CardsidValue.  # noqa: E501

        Used if making an image the cover. Only Unsplash URLs (https://images.unsplash.com/) work.  # noqa: E501

        :return: The url of this CardsidValue.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CardsidValue.

        Used if making an image the cover. Only Unsplash URLs (https://images.unsplash.com/) work.  # noqa: E501

        :param url: The url of this CardsidValue.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardsidValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardsidValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
