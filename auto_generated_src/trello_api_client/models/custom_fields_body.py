# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomFieldsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id_model': 'TrelloID',
        'model_type': 'str',
        'name': 'str',
        'type': 'str',
        'options': 'str',
        'pos': 'PosStringOrNumber',
        'display_card_front': 'bool'
    }

    attribute_map = {
        'id_model': 'idModel',
        'model_type': 'modelType',
        'name': 'name',
        'type': 'type',
        'options': 'options',
        'pos': 'pos',
        'display_card_front': 'display_cardFront'
    }

    def __init__(self, id_model=None, model_type=None, name=None, type=None, options=None, pos=None, display_card_front=True):  # noqa: E501
        """CustomFieldsBody - a model defined in Swagger"""  # noqa: E501
        self._id_model = None
        self._model_type = None
        self._name = None
        self._type = None
        self._options = None
        self._pos = None
        self._display_card_front = None
        self.discriminator = None
        self.id_model = id_model
        self.model_type = model_type
        self.name = name
        self.type = type
        if options is not None:
            self.options = options
        self.pos = pos
        if display_card_front is not None:
            self.display_card_front = display_card_front

    @property
    def id_model(self):
        """Gets the id_model of this CustomFieldsBody.  # noqa: E501


        :return: The id_model of this CustomFieldsBody.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id_model

    @id_model.setter
    def id_model(self, id_model):
        """Sets the id_model of this CustomFieldsBody.


        :param id_model: The id_model of this CustomFieldsBody.  # noqa: E501
        :type: TrelloID
        """
        if id_model is None:
            raise ValueError("Invalid value for `id_model`, must not be `None`")  # noqa: E501

        self._id_model = id_model

    @property
    def model_type(self):
        """Gets the model_type of this CustomFieldsBody.  # noqa: E501

        The type of model that the Custom Field is being defined on. This should always be `board`.  # noqa: E501

        :return: The model_type of this CustomFieldsBody.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this CustomFieldsBody.

        The type of model that the Custom Field is being defined on. This should always be `board`.  # noqa: E501

        :param model_type: The model_type of this CustomFieldsBody.  # noqa: E501
        :type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501
        allowed_values = ["board"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def name(self):
        """Gets the name of this CustomFieldsBody.  # noqa: E501

        The name of the Custom Field  # noqa: E501

        :return: The name of this CustomFieldsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldsBody.

        The name of the Custom Field  # noqa: E501

        :param name: The name of this CustomFieldsBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this CustomFieldsBody.  # noqa: E501

        The type of Custom Field to create.  # noqa: E501

        :return: The type of this CustomFieldsBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldsBody.

        The type of Custom Field to create.  # noqa: E501

        :param type: The type of this CustomFieldsBody.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["checkbox", "list", "number", "text", "date"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def options(self):
        """Gets the options of this CustomFieldsBody.  # noqa: E501

        If the type is `checkbox`   # noqa: E501

        :return: The options of this CustomFieldsBody.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CustomFieldsBody.

        If the type is `checkbox`   # noqa: E501

        :param options: The options of this CustomFieldsBody.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def pos(self):
        """Gets the pos of this CustomFieldsBody.  # noqa: E501


        :return: The pos of this CustomFieldsBody.  # noqa: E501
        :rtype: PosStringOrNumber
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this CustomFieldsBody.


        :param pos: The pos of this CustomFieldsBody.  # noqa: E501
        :type: PosStringOrNumber
        """
        if pos is None:
            raise ValueError("Invalid value for `pos`, must not be `None`")  # noqa: E501

        self._pos = pos

    @property
    def display_card_front(self):
        """Gets the display_card_front of this CustomFieldsBody.  # noqa: E501

        Whether this Custom Field should be shown on the front of Cards  # noqa: E501

        :return: The display_card_front of this CustomFieldsBody.  # noqa: E501
        :rtype: bool
        """
        return self._display_card_front

    @display_card_front.setter
    def display_card_front(self, display_card_front):
        """Sets the display_card_front of this CustomFieldsBody.

        Whether this Custom Field should be shown on the front of Cards  # noqa: E501

        :param display_card_front: The display_card_front of this CustomFieldsBody.  # noqa: E501
        :type: bool
        """

        self._display_card_front = display_card_front

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
