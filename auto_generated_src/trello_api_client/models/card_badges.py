# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CardBadges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments_by_type': 'CardBadgesAttachmentsByType',
        'location': 'bool',
        'votes': 'int',
        'viewing_member_voted': 'bool',
        'subscribed': 'bool',
        'fogbugz': 'str',
        'check_items': 'int',
        'check_items_checked': 'int',
        'comments': 'int',
        'attachments': 'int',
        'description': 'bool',
        'due': 'date',
        'start': 'date',
        'due_complete': 'bool'
    }

    attribute_map = {
        'attachments_by_type': 'attachmentsByType',
        'location': 'location',
        'votes': 'votes',
        'viewing_member_voted': 'viewingMemberVoted',
        'subscribed': 'subscribed',
        'fogbugz': 'fogbugz',
        'check_items': 'checkItems',
        'check_items_checked': 'checkItemsChecked',
        'comments': 'comments',
        'attachments': 'attachments',
        'description': 'description',
        'due': 'due',
        'start': 'start',
        'due_complete': 'dueComplete'
    }

    def __init__(self, attachments_by_type=None, location=None, votes=None, viewing_member_voted=None, subscribed=None, fogbugz=None, check_items=None, check_items_checked=None, comments=None, attachments=None, description=None, due=None, start=None, due_complete=None):  # noqa: E501
        """CardBadges - a model defined in Swagger"""  # noqa: E501
        self._attachments_by_type = None
        self._location = None
        self._votes = None
        self._viewing_member_voted = None
        self._subscribed = None
        self._fogbugz = None
        self._check_items = None
        self._check_items_checked = None
        self._comments = None
        self._attachments = None
        self._description = None
        self._due = None
        self._start = None
        self._due_complete = None
        self.discriminator = None
        if attachments_by_type is not None:
            self.attachments_by_type = attachments_by_type
        if location is not None:
            self.location = location
        if votes is not None:
            self.votes = votes
        if viewing_member_voted is not None:
            self.viewing_member_voted = viewing_member_voted
        if subscribed is not None:
            self.subscribed = subscribed
        if fogbugz is not None:
            self.fogbugz = fogbugz
        if check_items is not None:
            self.check_items = check_items
        if check_items_checked is not None:
            self.check_items_checked = check_items_checked
        if comments is not None:
            self.comments = comments
        if attachments is not None:
            self.attachments = attachments
        if description is not None:
            self.description = description
        if due is not None:
            self.due = due
        if start is not None:
            self.start = start
        if due_complete is not None:
            self.due_complete = due_complete

    @property
    def attachments_by_type(self):
        """Gets the attachments_by_type of this CardBadges.  # noqa: E501


        :return: The attachments_by_type of this CardBadges.  # noqa: E501
        :rtype: CardBadgesAttachmentsByType
        """
        return self._attachments_by_type

    @attachments_by_type.setter
    def attachments_by_type(self, attachments_by_type):
        """Sets the attachments_by_type of this CardBadges.


        :param attachments_by_type: The attachments_by_type of this CardBadges.  # noqa: E501
        :type: CardBadgesAttachmentsByType
        """

        self._attachments_by_type = attachments_by_type

    @property
    def location(self):
        """Gets the location of this CardBadges.  # noqa: E501


        :return: The location of this CardBadges.  # noqa: E501
        :rtype: bool
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CardBadges.


        :param location: The location of this CardBadges.  # noqa: E501
        :type: bool
        """

        self._location = location

    @property
    def votes(self):
        """Gets the votes of this CardBadges.  # noqa: E501


        :return: The votes of this CardBadges.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this CardBadges.


        :param votes: The votes of this CardBadges.  # noqa: E501
        :type: int
        """

        self._votes = votes

    @property
    def viewing_member_voted(self):
        """Gets the viewing_member_voted of this CardBadges.  # noqa: E501


        :return: The viewing_member_voted of this CardBadges.  # noqa: E501
        :rtype: bool
        """
        return self._viewing_member_voted

    @viewing_member_voted.setter
    def viewing_member_voted(self, viewing_member_voted):
        """Sets the viewing_member_voted of this CardBadges.


        :param viewing_member_voted: The viewing_member_voted of this CardBadges.  # noqa: E501
        :type: bool
        """

        self._viewing_member_voted = viewing_member_voted

    @property
    def subscribed(self):
        """Gets the subscribed of this CardBadges.  # noqa: E501


        :return: The subscribed of this CardBadges.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this CardBadges.


        :param subscribed: The subscribed of this CardBadges.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def fogbugz(self):
        """Gets the fogbugz of this CardBadges.  # noqa: E501


        :return: The fogbugz of this CardBadges.  # noqa: E501
        :rtype: str
        """
        return self._fogbugz

    @fogbugz.setter
    def fogbugz(self, fogbugz):
        """Sets the fogbugz of this CardBadges.


        :param fogbugz: The fogbugz of this CardBadges.  # noqa: E501
        :type: str
        """

        self._fogbugz = fogbugz

    @property
    def check_items(self):
        """Gets the check_items of this CardBadges.  # noqa: E501


        :return: The check_items of this CardBadges.  # noqa: E501
        :rtype: int
        """
        return self._check_items

    @check_items.setter
    def check_items(self, check_items):
        """Sets the check_items of this CardBadges.


        :param check_items: The check_items of this CardBadges.  # noqa: E501
        :type: int
        """

        self._check_items = check_items

    @property
    def check_items_checked(self):
        """Gets the check_items_checked of this CardBadges.  # noqa: E501


        :return: The check_items_checked of this CardBadges.  # noqa: E501
        :rtype: int
        """
        return self._check_items_checked

    @check_items_checked.setter
    def check_items_checked(self, check_items_checked):
        """Sets the check_items_checked of this CardBadges.


        :param check_items_checked: The check_items_checked of this CardBadges.  # noqa: E501
        :type: int
        """

        self._check_items_checked = check_items_checked

    @property
    def comments(self):
        """Gets the comments of this CardBadges.  # noqa: E501


        :return: The comments of this CardBadges.  # noqa: E501
        :rtype: int
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CardBadges.


        :param comments: The comments of this CardBadges.  # noqa: E501
        :type: int
        """

        self._comments = comments

    @property
    def attachments(self):
        """Gets the attachments of this CardBadges.  # noqa: E501


        :return: The attachments of this CardBadges.  # noqa: E501
        :rtype: int
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CardBadges.


        :param attachments: The attachments of this CardBadges.  # noqa: E501
        :type: int
        """

        self._attachments = attachments

    @property
    def description(self):
        """Gets the description of this CardBadges.  # noqa: E501


        :return: The description of this CardBadges.  # noqa: E501
        :rtype: bool
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CardBadges.


        :param description: The description of this CardBadges.  # noqa: E501
        :type: bool
        """

        self._description = description

    @property
    def due(self):
        """Gets the due of this CardBadges.  # noqa: E501


        :return: The due of this CardBadges.  # noqa: E501
        :rtype: date
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this CardBadges.


        :param due: The due of this CardBadges.  # noqa: E501
        :type: date
        """

        self._due = due

    @property
    def start(self):
        """Gets the start of this CardBadges.  # noqa: E501


        :return: The start of this CardBadges.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CardBadges.


        :param start: The start of this CardBadges.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def due_complete(self):
        """Gets the due_complete of this CardBadges.  # noqa: E501


        :return: The due_complete of this CardBadges.  # noqa: E501
        :rtype: bool
        """
        return self._due_complete

    @due_complete.setter
    def due_complete(self, due_complete):
        """Sets the due_complete of this CardBadges.


        :param due_complete: The due_complete of this CardBadges.  # noqa: E501
        :type: bool
        """

        self._due_complete = due_complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardBadges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardBadges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
