# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Export(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'TrelloID',
        'status': 'ExportStatus',
        'started_at': 'datetime',
        'size': 'str',
        'export_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'started_at': 'startedAt',
        'size': 'size',
        'export_url': 'exportUrl'
    }

    def __init__(self, id=None, status=None, started_at=None, size=None, export_url=None):  # noqa: E501
        """Export - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._status = None
        self._started_at = None
        self._size = None
        self._export_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if started_at is not None:
            self.started_at = started_at
        if size is not None:
            self.size = size
        if export_url is not None:
            self.export_url = export_url

    @property
    def id(self):
        """Gets the id of this Export.  # noqa: E501


        :return: The id of this Export.  # noqa: E501
        :rtype: TrelloID
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Export.


        :param id: The id of this Export.  # noqa: E501
        :type: TrelloID
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Export.  # noqa: E501


        :return: The status of this Export.  # noqa: E501
        :rtype: ExportStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Export.


        :param status: The status of this Export.  # noqa: E501
        :type: ExportStatus
        """

        self._status = status

    @property
    def started_at(self):
        """Gets the started_at of this Export.  # noqa: E501


        :return: The started_at of this Export.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Export.


        :param started_at: The started_at of this Export.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def size(self):
        """Gets the size of this Export.  # noqa: E501


        :return: The size of this Export.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Export.


        :param size: The size of this Export.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def export_url(self):
        """Gets the export_url of this Export.  # noqa: E501


        :return: The export_url of this Export.  # noqa: E501
        :rtype: str
        """
        return self._export_url

    @export_url.setter
    def export_url(self, export_url):
        """Sets the export_url of this Export.


        :param export_url: The export_url of this Export.  # noqa: E501
        :type: str
        """

        self._export_url = export_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Export, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Export):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
