# coding: utf-8

"""
    Trello REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from trello_api_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def applications_key_compliance(self, key, **kwargs):  # noqa: E501
        """Get Application's compliance data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_key_compliance(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.applications_key_compliance_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.applications_key_compliance_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def applications_key_compliance_with_http_info(self, key, **kwargs):  # noqa: E501
        """Get Application's compliance data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.applications_key_compliance_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method applications_key_compliance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `applications_key_compliance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/applications/{key}/compliance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boards_id_checklists(self, id, **kwargs):  # noqa: E501
        """Get Checklists on a Board  # noqa: E501

        Get all of the checklists on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.boards_id_checklists(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.boards_id_checklists_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.boards_id_checklists_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def boards_id_checklists_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Checklists on a Board  # noqa: E501

        Get all of the checklists on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.boards_id_checklists_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boards_id_checklists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boards_id_checklists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/checklists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def boardsidmembersidmember(self, id, id_member, **kwargs):  # noqa: E501
        """Remove Member from Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.boardsidmembersidmember(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID id_member: The id of the member to add to the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.boardsidmembersidmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.boardsidmembersidmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def boardsidmembersidmember_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove Member from Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.boardsidmembersidmember_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID id_member: The id of the member to add to the board. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method boardsidmembersidmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `boardsidmembersidmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `boardsidmembersidmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cardsidmembersvoted1(self, id, value, **kwargs):  # noqa: E501
        """Add Member vote to Card  # noqa: E501

        Vote on the card for a given member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cardsidmembersvoted1(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID value: The ID of the member to vote 'yes' on the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cardsidmembersvoted1_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.cardsidmembersvoted1_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def cardsidmembersvoted1_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Add Member vote to Card  # noqa: E501

        Vote on the card for a given member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cardsidmembersvoted1_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID value: The ID of the member to vote 'yes' on the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cardsidmembersvoted1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cardsidmembersvoted1`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `cardsidmembersvoted1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/membersVoted', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_actions_id(self, id, **kwargs):  # noqa: E501
        """Delete an Action  # noqa: E501

        Delete a specific action. Only comment actions can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_actions_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_actions_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_actions_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_actions_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an Action  # noqa: E501

        Delete a specific action. Only comment actions can be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_actions_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_actions_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_actions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_actions_idaction_reactions_id(self, id_action, id, **kwargs):  # noqa: E501
        """Delete Action's Reaction  # noqa: E501

        Deletes a reaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_actions_idaction_reactions_id(id_action, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the Action (required)
        :param TrelloID id: The ID of the reaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_actions_idaction_reactions_id_with_http_info(id_action, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_actions_idaction_reactions_id_with_http_info(id_action, id, **kwargs)  # noqa: E501
            return data

    def delete_actions_idaction_reactions_id_with_http_info(self, id_action, id, **kwargs):  # noqa: E501
        """Delete Action's Reaction  # noqa: E501

        Deletes a reaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_actions_idaction_reactions_id_with_http_info(id_action, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the Action (required)
        :param TrelloID id: The ID of the reaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_actions_idaction_reactions_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `delete_actions_idaction_reactions_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_actions_idaction_reactions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_boards_id(self, id, **kwargs):  # noqa: E501
        """Delete a Board  # noqa: E501

        Delete a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_boards_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the board to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_boards_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_boards_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_boards_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Board  # noqa: E501

        Delete a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_boards_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the board to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_boards_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_boards_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_boards_id_boardplugins(self, id, id_plugin, **kwargs):  # noqa: E501
        """Disable a Power-Up on a Board  # noqa: E501

        Disable a Power-Up on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_boards_id_boardplugins(id, id_plugin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param TrelloID id_plugin: The ID of the Power-Up to disable (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_boards_id_boardplugins_with_http_info(id, id_plugin, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_boards_id_boardplugins_with_http_info(id, id_plugin, **kwargs)  # noqa: E501
            return data

    def delete_boards_id_boardplugins_with_http_info(self, id, id_plugin, **kwargs):  # noqa: E501
        """Disable a Power-Up on a Board  # noqa: E501

        Disable a Power-Up on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_boards_id_boardplugins_with_http_info(id, id_plugin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param TrelloID id_plugin: The ID of the Power-Up to disable (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_plugin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_boards_id_boardplugins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_boards_id_boardplugins`")  # noqa: E501
        # verify the required parameter 'id_plugin' is set
        if ('id_plugin' not in params or
                params['id_plugin'] is None):
            raise ValueError("Missing the required parameter `id_plugin` when calling `delete_boards_id_boardplugins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_plugin' in params:
            path_params['idPlugin'] = params['id_plugin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardPlugins/{idPlugin}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id(self, id, **kwargs):  # noqa: E501
        """Delete a Card  # noqa: E501

        Delete a Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Card  # noqa: E501

        Delete a Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id_actions_id_comments(self, id, id_action, **kwargs):  # noqa: E501
        """Delete a comment on a Card  # noqa: E501

        Delete a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_actions_id_comments(id, id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_action: The ID of the comment action to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_actions_id_comments_with_http_info(id, id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_actions_id_comments_with_http_info(id, id_action, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_actions_id_comments_with_http_info(self, id, id_action, **kwargs):  # noqa: E501
        """Delete a comment on a Card  # noqa: E501

        Delete a comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_actions_id_comments_with_http_info(id, id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_action: The ID of the comment action to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id_actions_id_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id_actions_id_comments`")  # noqa: E501
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `delete_cards_id_actions_id_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions/{idAction}/comments', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id_checkitem_idcheckitem(self, id, id_check_item, **kwargs):  # noqa: E501
        """Delete checkItem on a Card  # noqa: E501

        Delete a checklist item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_checkitem_idcheckitem(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checkitem (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_checkitem_idcheckitem_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Delete checkItem on a Card  # noqa: E501

        Delete a checklist item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checkitem (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id_checkitem_idcheckitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id_checkitem_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `delete_cards_id_checkitem_idcheckitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItem/{idCheckItem}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id_checklists_idchecklist(self, id, id_checklist, **kwargs):  # noqa: E501
        """Delete a Checklist on a Card  # noqa: E501

        Delete a checklist from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_checklists_idchecklist(id, id_checklist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_checklist: The ID of the checklist to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_checklists_idchecklist_with_http_info(id, id_checklist, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_checklists_idchecklist_with_http_info(id, id_checklist, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_checklists_idchecklist_with_http_info(self, id, id_checklist, **kwargs):  # noqa: E501
        """Delete a Checklist on a Card  # noqa: E501

        Delete a checklist from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_checklists_idchecklist_with_http_info(id, id_checklist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_checklist: The ID of the checklist to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_checklist']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id_checklists_idchecklist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id_checklists_idchecklist`")  # noqa: E501
        # verify the required parameter 'id_checklist' is set
        if ('id_checklist' not in params or
                params['id_checklist'] is None):
            raise ValueError("Missing the required parameter `id_checklist` when calling `delete_cards_id_checklists_idchecklist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_checklist' in params:
            path_params['idChecklist'] = params['id_checklist']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checklists/{idChecklist}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id_idlabels_idlabel(self, id, id_label, **kwargs):  # noqa: E501
        """Remove a Label from a Card  # noqa: E501

        Remove a label from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_idlabels_idlabel(id, id_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_label: The ID of the label to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_idlabels_idlabel_with_http_info(id, id_label, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_idlabels_idlabel_with_http_info(id, id_label, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_idlabels_idlabel_with_http_info(self, id, id_label, **kwargs):  # noqa: E501
        """Remove a Label from a Card  # noqa: E501

        Remove a label from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_idlabels_idlabel_with_http_info(id, id_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_label: The ID of the label to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id_idlabels_idlabel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id_idlabels_idlabel`")  # noqa: E501
        # verify the required parameter 'id_label' is set
        if ('id_label' not in params or
                params['id_label'] is None):
            raise ValueError("Missing the required parameter `id_label` when calling `delete_cards_id_idlabels_idlabel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_label' in params:
            path_params['idLabel'] = params['id_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idLabels/{idLabel}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id_membersvoted_idmember(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member's Vote on a Card  # noqa: E501

        Remove a member's vote from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_membersvoted_idmember(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_member: The ID of the member whose vote to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_membersvoted_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_membersvoted_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_membersvoted_idmember_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member's Vote on a Card  # noqa: E501

        Remove a member's vote from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_membersvoted_idmember_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_member: The ID of the member whose vote to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id_membersvoted_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id_membersvoted_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `delete_cards_id_membersvoted_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/membersVoted/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cards_id_stickers_idsticker(self, id, id_sticker, **kwargs):  # noqa: E501
        """Delete a Sticker on a Card  # noqa: E501

        Remove a sticker from the card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_stickers_idsticker(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_sticker: The ID of the sticker (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cards_id_stickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cards_id_stickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def delete_cards_id_stickers_idsticker_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Delete a Sticker on a Card  # noqa: E501

        Remove a sticker from the card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cards_id_stickers_idsticker_with_http_info(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_sticker: The ID of the sticker (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cards_id_stickers_idsticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cards_id_stickers_idsticker`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `delete_cards_id_stickers_idsticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers/{idSticker}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_checklists_id(self, id, **kwargs):  # noqa: E501
        """Delete a Checklist  # noqa: E501

        Delete a checklist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_checklists_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_checklists_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_checklists_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_checklists_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Checklist  # noqa: E501

        Delete a checklist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_checklists_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_checklists_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_checklists_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_checklists_id_checkitems_idcheckitem(self, id, id_check_item, **kwargs):  # noqa: E501
        """Delete Checkitem from Checklist  # noqa: E501

        Remove an item from a checklist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_checklists_id_checkitems_idcheckitem(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param TrelloID id_check_item: ID of the check item to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_checklists_id_checkitems_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_checklists_id_checkitems_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def delete_checklists_id_checkitems_idcheckitem_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Delete Checkitem from Checklist  # noqa: E501

        Remove an item from a checklist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_checklists_id_checkitems_idcheckitem_with_http_info(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param TrelloID id_check_item: ID of the check item to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_checklists_id_checkitems_idcheckitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_checklists_id_checkitems_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `delete_checklists_id_checkitems_idcheckitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems/{idCheckItem}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customfields_id(self, id, **kwargs):  # noqa: E501
        """Delete a Custom Field definition  # noqa: E501

        Delete a Custom Field from a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customfields_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Custom Field. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customfields_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customfields_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_customfields_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Custom Field definition  # noqa: E501

        Delete a Custom Field from a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customfields_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Custom Field. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customfields_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_customfields_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_customfields_options_idcustomfieldoption(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """Delete Option of Custom Field dropdown  # noqa: E501

        Delete an option from a Custom Field dropdown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customfields_options_idcustomfieldoption(id, id_custom_field_option, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfielditem. (required)
        :param TrelloID id_custom_field_option: ID of the customfieldoption to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_customfields_options_idcustomfieldoption_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_customfields_options_idcustomfieldoption_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
            return data

    def delete_customfields_options_idcustomfieldoption_with_http_info(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """Delete Option of Custom Field dropdown  # noqa: E501

        Delete an option from a Custom Field dropdown.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_customfields_options_idcustomfieldoption_with_http_info(id, id_custom_field_option, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfielditem. (required)
        :param TrelloID id_custom_field_option: ID of the customfieldoption to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_custom_field_option']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_customfields_options_idcustomfieldoption" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_customfields_options_idcustomfieldoption`")  # noqa: E501
        # verify the required parameter 'id_custom_field_option' is set
        if ('id_custom_field_option' not in params or
                params['id_custom_field_option'] is None):
            raise ValueError("Missing the required parameter `id_custom_field_option` when calling `delete_customfields_options_idcustomfieldoption`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_custom_field_option' in params:
            path_params['idCustomFieldOption'] = params['id_custom_field_option']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options/{idCustomFieldOption}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_enterprises_id_organizations_idorg(self, id, id_org, **kwargs):  # noqa: E501
        """Delete an Organization from an Enterprise.  # noqa: E501

        Remove an organization from an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enterprises_id_organizations_idorg(id, id_org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_org: ID of the organization to be removed from the enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_enterprises_id_organizations_idorg_with_http_info(id, id_org, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_enterprises_id_organizations_idorg_with_http_info(id, id_org, **kwargs)  # noqa: E501
            return data

    def delete_enterprises_id_organizations_idorg_with_http_info(self, id, id_org, **kwargs):  # noqa: E501
        """Delete an Organization from an Enterprise.  # noqa: E501

        Remove an organization from an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enterprises_id_organizations_idorg_with_http_info(id, id_org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_org: ID of the organization to be removed from the enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_org']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_enterprises_id_organizations_idorg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_enterprises_id_organizations_idorg`")  # noqa: E501
        # verify the required parameter 'id_org' is set
        if ('id_org' not in params or
                params['id_org'] is None):
            raise ValueError("Missing the required parameter `id_org` when calling `delete_enterprises_id_organizations_idorg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_org' in params:
            path_params['idOrg'] = params['id_org']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/organizations/{idOrg}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_id_idmembers_idmember(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member from a Card  # noqa: E501

        Remove a member from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_id_idmembers_idmember(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_member: The ID of the member to remove from the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_id_idmembers_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_id_idmembers_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def delete_id_idmembers_idmember_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member from a Card  # noqa: E501

        Remove a member from a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_id_idmembers_idmember_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_member: The ID of the member to remove from the card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_id_idmembers_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_id_idmembers_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `delete_id_idmembers_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idMembers/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_labels_id(self, id, **kwargs):  # noqa: E501
        """Delete a Label  # noqa: E501

        Delete a label by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_labels_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Label (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_labels_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_labels_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_labels_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Label  # noqa: E501

        Delete a label by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_labels_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Label (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_labels_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_labels_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_id_boardbackgrounds_idbackground(self, id, id_background, **kwargs):  # noqa: E501
        """Delete a Member's custom Board background  # noqa: E501

        Delete a board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_boardbackgrounds_idbackground(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the board background (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def delete_members_id_boardbackgrounds_idbackground_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Delete a Member's custom Board background  # noqa: E501

        Delete a board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the board background (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_id_boardbackgrounds_idbackground" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_members_id_boardbackgrounds_idbackground`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `delete_members_id_boardbackgrounds_idbackground`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds/{idBackground}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_id_boardstars_idstar(self, id, id_star, **kwargs):  # noqa: E501
        """Delete Star for Board  # noqa: E501

        Unstar a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_boardstars_idstar(id, id_star, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_star: The ID of the board star (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_id_boardstars_idstar_with_http_info(id, id_star, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_id_boardstars_idstar_with_http_info(id, id_star, **kwargs)  # noqa: E501
            return data

    def delete_members_id_boardstars_idstar_with_http_info(self, id, id_star, **kwargs):  # noqa: E501
        """Delete Star for Board  # noqa: E501

        Unstar a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_boardstars_idstar_with_http_info(id, id_star, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_star: The ID of the board star (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_star']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_id_boardstars_idstar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_members_id_boardstars_idstar`")  # noqa: E501
        # verify the required parameter 'id_star' is set
        if ('id_star' not in params or
                params['id_star'] is None):
            raise ValueError("Missing the required parameter `id_star` when calling `delete_members_id_boardstars_idstar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_star' in params:
            path_params['idStar'] = params['id_star']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars/{idStar}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_id_customboardbackgrounds_idbackground(self, id, id_background, **kwargs):  # noqa: E501
        """Delete custom Board Background of Member  # noqa: E501

        Delete a specific custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_customboardbackgrounds_idbackground(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id2 id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the custom background (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def delete_members_id_customboardbackgrounds_idbackground_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Delete custom Board Background of Member  # noqa: E501

        Delete a specific custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id2 id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the custom background (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_id_customboardbackgrounds_idbackground" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_members_id_customboardbackgrounds_idbackground`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `delete_members_id_customboardbackgrounds_idbackground`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds/{idBackground}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_id_customstickers_idsticker(self, id, id_sticker, **kwargs):  # noqa: E501
        """Delete a Member's custom Sticker  # noqa: E501

        Delete a Member's custom Sticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_customstickers_idsticker(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_sticker: The ID of the uploaded sticker (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_id_customstickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_id_customstickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def delete_members_id_customstickers_idsticker_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Delete a Member's custom Sticker  # noqa: E501

        Delete a Member's custom Sticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_customstickers_idsticker_with_http_info(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_sticker: The ID of the uploaded sticker (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_id_customstickers_idsticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_members_id_customstickers_idsticker`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `delete_members_id_customstickers_idsticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers/{idSticker}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_id_savedsearches_idsearch(self, id, id_search, **kwargs):  # noqa: E501
        """Delete a saved search  # noqa: E501

        Delete a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_savedsearches_idsearch(id, id_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_id_savedsearches_idsearch_with_http_info(id, id_search, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_id_savedsearches_idsearch_with_http_info(id, id_search, **kwargs)  # noqa: E501
            return data

    def delete_members_id_savedsearches_idsearch_with_http_info(self, id, id_search, **kwargs):  # noqa: E501
        """Delete a saved search  # noqa: E501

        Delete a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_id_savedsearches_idsearch_with_http_info(id, id_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_id_savedsearches_idsearch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_members_id_savedsearches_idsearch`")  # noqa: E501
        # verify the required parameter 'id_search' is set
        if ('id_search' not in params or
                params['id_search'] is None):
            raise ValueError("Missing the required parameter `id_search` when calling `delete_members_id_savedsearches_idsearch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_search' in params:
            path_params['idSearch'] = params['id_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches/{idSearch}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organizations_id(self, id, **kwargs):  # noqa: E501
        """Delete an Organization  # noqa: E501

        Delete an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_organizations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an Organization  # noqa: E501

        Delete an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_organizations_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organizations_id_logo(self, id, **kwargs):  # noqa: E501
        """Delete Logo for Organization  # noqa: E501

        Delete a the logo from a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_logo(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organizations_id_logo_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organizations_id_logo_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_organizations_id_logo_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Logo for Organization  # noqa: E501

        Delete a the logo from a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_logo_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id_logo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_organizations_id_logo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/logo', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organizations_id_members(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member from an Organization  # noqa: E501

        Remove a member from a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_members(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id7 id: The ID or name of the organization (required)
        :param TrelloID id_member: The ID of the Member to remove from the Workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organizations_id_members_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organizations_id_members_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def delete_organizations_id_members_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member from an Organization  # noqa: E501

        Remove a member from a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_members_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id7 id: The ID or name of the organization (required)
        :param TrelloID id_member: The ID of the Member to remove from the Workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_organizations_id_members`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `delete_organizations_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organizations_id_prefs_associateddomain(self, id, **kwargs):  # noqa: E501
        """Remove the associated Google Apps domain from a Workspace  # noqa: E501

        Remove the associated Google Apps domain from a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_prefs_associateddomain(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organizations_id_prefs_associateddomain_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organizations_id_prefs_associateddomain_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_organizations_id_prefs_associateddomain_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove the associated Google Apps domain from a Workspace  # noqa: E501

        Remove the associated Google Apps domain from a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_prefs_associateddomain_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id_prefs_associateddomain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_organizations_id_prefs_associateddomain`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/prefs/associatedDomain', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organizations_id_prefs_orginviterestrict(self, id, **kwargs):  # noqa: E501
        """Delete the email domain restriction on who can be invited to the Workspace  # noqa: E501

        Remove the email domain restriction on who can be invited to the Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_prefs_orginviterestrict(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organizations_id_prefs_orginviterestrict_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organizations_id_prefs_orginviterestrict_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_organizations_id_prefs_orginviterestrict_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete the email domain restriction on who can be invited to the Workspace  # noqa: E501

        Remove the email domain restriction on who can be invited to the Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_prefs_orginviterestrict_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id_prefs_orginviterestrict" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_organizations_id_prefs_orginviterestrict`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/prefs/orgInviteRestrict', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organizations_id_tags_idtag(self, id, id_tag, **kwargs):  # noqa: E501
        """Delete an Organization's Tag  # noqa: E501

        Delete an organization's tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_tags_idtag(id, id_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or name of the organization (required)
        :param str id_tag: The ID of the tag to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organizations_id_tags_idtag_with_http_info(id, id_tag, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organizations_id_tags_idtag_with_http_info(id, id_tag, **kwargs)  # noqa: E501
            return data

    def delete_organizations_id_tags_idtag_with_http_info(self, id, id_tag, **kwargs):  # noqa: E501
        """Delete an Organization's Tag  # noqa: E501

        Delete an organization's tag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organizations_id_tags_idtag_with_http_info(id, id_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or name of the organization (required)
        :param str id_tag: The ID of the tag to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organizations_id_tags_idtag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_organizations_id_tags_idtag`")  # noqa: E501
        # verify the required parameter 'id_tag' is set
        if ('id_tag' not in params or
                params['id_tag'] is None):
            raise ValueError("Missing the required parameter `id_tag` when calling `delete_organizations_id_tags_idtag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_tag' in params:
            path_params['idTag'] = params['id_tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tags/{idTag}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_token(self, token, **kwargs):  # noqa: E501
        """Delete a Token  # noqa: E501

        Delete a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_token(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_token_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_token_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def delete_token_with_http_info(self, token, **kwargs):  # noqa: E501
        """Delete a Token  # noqa: E501

        Delete a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_tokens_token_webhooks_idwebhook(self, token, id_webhook, **kwargs):  # noqa: E501
        """Delete a Webhook created by Token  # noqa: E501

        Delete a webhook created with given token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tokens_token_webhooks_idwebhook(token, id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TrelloID id_webhook: ID of the [Webhooks](ref:webhooks) to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_tokens_token_webhooks_idwebhook_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_tokens_token_webhooks_idwebhook_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
            return data

    def delete_tokens_token_webhooks_idwebhook_with_http_info(self, token, id_webhook, **kwargs):  # noqa: E501
        """Delete a Webhook created by Token  # noqa: E501

        Delete a webhook created with given token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_tokens_token_webhooks_idwebhook_with_http_info(token, id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TrelloID id_webhook: ID of the [Webhooks](ref:webhooks) to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'id_webhook']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_tokens_token_webhooks_idwebhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_tokens_token_webhooks_idwebhook`")  # noqa: E501
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in params or
                params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `delete_tokens_token_webhooks_idwebhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'id_webhook' in params:
            path_params['idWebhook'] = params['id_webhook']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks/{idWebhook}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webhooks_id(self, id, **kwargs):  # noqa: E501
        """Delete a Webhook  # noqa: E501

        Delete a webhook by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhooks_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webhooks_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webhooks_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_webhooks_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Webhook  # noqa: E501

        Delete a webhook by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhooks_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webhooks_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_webhooks_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deleted_cards_id_attachments_idattachment(self, id, id_attachment, **kwargs):  # noqa: E501
        """Delete an Attachment on a Card  # noqa: E501

        Delete an Attachment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deleted_cards_id_attachments_idattachment(id, id_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_attachment: The ID of the attachment to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deleted_cards_id_attachments_idattachment_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
        else:
            (data) = self.deleted_cards_id_attachments_idattachment_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
            return data

    def deleted_cards_id_attachments_idattachment_with_http_info(self, id, id_attachment, **kwargs):  # noqa: E501
        """Delete an Attachment on a Card  # noqa: E501

        Delete an Attachment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deleted_cards_id_attachments_idattachment_with_http_info(id, id_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_attachment: The ID of the attachment to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_attachment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deleted_cards_id_attachments_idattachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `deleted_cards_id_attachments_idattachment`")  # noqa: E501
        # verify the required parameter 'id_attachment' is set
        if ('id_attachment' not in params or
                params['id_attachment'] is None):
            raise ValueError("Missing the required parameter `id_attachment` when calling `deleted_cards_id_attachments_idattachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_attachment' in params:
            path_params['idAttachment'] = params['id_attachment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments/{idAttachment}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def emoji(self, **kwargs):  # noqa: E501
        """List available Emoji  # noqa: E501

        List available Emoji  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emoji(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: The locale to return emoji descriptions and names in. Defaults to the logged in member's locale.
        :param bool spritesheets: `true` to return spritesheet URLs in the response
        :return: Emoji
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.emoji_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.emoji_with_http_info(**kwargs)  # noqa: E501
            return data

    def emoji_with_http_info(self, **kwargs):  # noqa: E501
        """List available Emoji  # noqa: E501

        List available Emoji  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.emoji_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: The locale to return emoji descriptions and names in. Defaults to the logged in member's locale.
        :param bool spritesheets: `true` to return spritesheet URLs in the response
        :return: Emoji
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'spritesheets']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method emoji" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'locale' in params:
            query_params.append(('locale', params['locale']))  # noqa: E501
        if 'spritesheets' in params:
            query_params.append(('spritesheets', params['spritesheets']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/emoji', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Emoji',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_members_id_member_deactivated(self, id, id_member, value, **kwargs):  # noqa: E501
        """Deactivate a Member of an Enterprise.  # noqa: E501

        Deactivate a Member of an Enterprise.   NOTE: Deactivation is not possible for enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enterprises_id_members_id_member_deactivated(id, id_member, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_member: ID of the Member to deactive. (required)
        :param bool value: Determines whether the user is deactivated or not. (required)
        :param MemberFields fields: A comma separated list of any valid values that the [nested member field resource]() accepts.
        :param OrganizationFields organization_fields: Any valid value that the [nested organization resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :param BoardFields board_fields: Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enterprises_id_members_id_member_deactivated_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_members_id_member_deactivated_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
            return data

    def enterprises_id_members_id_member_deactivated_with_http_info(self, id, id_member, value, **kwargs):  # noqa: E501
        """Deactivate a Member of an Enterprise.  # noqa: E501

        Deactivate a Member of an Enterprise.   NOTE: Deactivation is not possible for enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enterprises_id_members_id_member_deactivated_with_http_info(id, id_member, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_member: ID of the Member to deactive. (required)
        :param bool value: Determines whether the user is deactivated or not. (required)
        :param MemberFields fields: A comma separated list of any valid values that the [nested member field resource]() accepts.
        :param OrganizationFields organization_fields: Any valid value that the [nested organization resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :param BoardFields board_fields: Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'value', 'fields', 'organization_fields', 'board_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_members_id_member_deactivated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_members_id_member_deactivated`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `enterprises_id_members_id_member_deactivated`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `enterprises_id_members_id_member_deactivated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members/{idMember}/deactivated', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enterprises_id_organizations_idmember(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member as admin from Enterprise.  # noqa: E501

        Remove a member as admin from an enterprise.   NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enterprises_id_organizations_idmember(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param TrelloID id_member: ID of the member to be removed as an admin from enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enterprises_id_organizations_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.enterprises_id_organizations_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def enterprises_id_organizations_idmember_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member as admin from Enterprise.  # noqa: E501

        Remove a member as admin from an enterprise.   NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enterprises_id_organizations_idmember_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param TrelloID id_member: ID of the member to be removed as an admin from enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enterprises_id_organizations_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enterprises_id_organizations_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `enterprises_id_organizations_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/admins/{idMember}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id(self, id, **kwargs):  # noqa: E501
        """Get an Action  # noqa: E501

        Get an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param bool display:
        :param bool entities:
        :param str fields: `all` or a comma-separated list of action [fields](/cloud/trello/guides/rest-api/object-definitions/#action-object)
        :param bool member:
        :param str member_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool member_creator: Whether to include the member object for the creator of the action
        :param str member_creator_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an Action  # noqa: E501

        Get an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param bool display:
        :param bool entities:
        :param str fields: `all` or a comma-separated list of action [fields](/cloud/trello/guides/rest-api/object-definitions/#action-object)
        :param bool member:
        :param str member_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool member_creator: Whether to include the member object for the creator of the action
        :param str member_creator_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'display', 'entities', 'fields', 'member', 'member_fields', 'member_creator', 'member_creator_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'display' in params:
            query_params.append(('display', params['display']))  # noqa: E501
        if 'entities' in params:
            query_params.append(('entities', params['entities']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_board(self, id, **kwargs):  # noqa: E501
        """Get the Board for an Action  # noqa: E501

        Get the Board for an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_board(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param BoardFields fields: `all` or a comma-separated list of board fields
        :return: Board
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_board_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_board_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_board_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Board for an Action  # noqa: E501

        Get the Board for an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_board_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param BoardFields fields: `all` or a comma-separated list of board fields
        :return: Board
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_board`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Board',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_card(self, id, **kwargs):  # noqa: E501
        """Get the Card for an Action  # noqa: E501

        Get the card for an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_card(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param CardFields fields: `all` or a comma-separated list of card fields
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_card_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_card_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_card_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Card for an Action  # noqa: E501

        Get the card for an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_card_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param CardFields fields: `all` or a comma-separated list of card fields
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/card', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Card',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get a specific field on an Action  # noqa: E501

        Get a specific property of an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param ActionFields field: An action field (required)
        :return: Action
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_actions_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a specific field on an Action  # noqa: E501

        Get a specific property of an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param ActionFields field: An action field (required)
        :return: Action
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_actions_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Action',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_list(self, id, **kwargs):  # noqa: E501
        """Get the List for an Action  # noqa: E501

        Get the List for an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param ListFields fields: `all` or a comma-separated list of list fields
        :return: TrelloList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the List for an Action  # noqa: E501

        Get the List for an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param ListFields fields: `all` or a comma-separated list of list fields
        :return: TrelloList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrelloList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_member(self, id, **kwargs):  # noqa: E501
        """Get the Member of an Action  # noqa: E501

        Gets the member of an action (not the creator)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_member(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param MemberFields fields: `all` or a comma-separated list of member fields
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_member_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_member_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_member_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Member of an Action  # noqa: E501

        Gets the member of an action (not the creator)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_member_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param MemberFields fields: `all` or a comma-separated list of member fields
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Member',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_membercreator(self, id, **kwargs):  # noqa: E501
        """Get the Member Creator of an Action  # noqa: E501

        Get the Member who created the Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_membercreator(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param MemberFields fields: `all` or a comma-separated list of member fields
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_membercreator_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_membercreator_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_membercreator_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Member Creator of an Action  # noqa: E501

        Get the Member who created the Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_membercreator_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param MemberFields fields: `all` or a comma-separated list of member fields
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_membercreator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_membercreator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/memberCreator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Member',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_id_organization(self, id, **kwargs):  # noqa: E501
        """Get the Organization of an Action  # noqa: E501

        Get the Organization of an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_organization(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param OrganizationFields fields: `all` or a comma-separated list of organization fields
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_id_organization_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_id_organization_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_actions_id_organization_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Organization of an Action  # noqa: E501

        Get the Organization of an Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_id_organization_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action (required)
        :param OrganizationFields fields: `all` or a comma-separated list of organization fields
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_id_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_id_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_idaction_reactions(self, id_action, **kwargs):  # noqa: E501
        """Get Action's Reactions  # noqa: E501

        List reactions for an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_idaction_reactions(id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the action (required)
        :param bool member: Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
        :param bool emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_idaction_reactions_with_http_info(id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_idaction_reactions_with_http_info(id_action, **kwargs)  # noqa: E501
            return data

    def get_actions_idaction_reactions_with_http_info(self, id_action, **kwargs):  # noqa: E501
        """Get Action's Reactions  # noqa: E501

        List reactions for an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_idaction_reactions_with_http_info(id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the action (required)
        :param bool member: Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
        :param bool emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'member', 'emoji']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_idaction_reactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `get_actions_idaction_reactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'emoji' in params:
            query_params.append(('emoji', params['emoji']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_idaction_reactions_id(self, id_action, id, **kwargs):  # noqa: E501
        """Get Action's Reaction  # noqa: E501

        Get information for a reaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_idaction_reactions_id(id_action, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the Action (required)
        :param TrelloID id: The ID of the reaction (required)
        :param bool member: Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
        :param bool emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_idaction_reactions_id_with_http_info(id_action, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_idaction_reactions_id_with_http_info(id_action, id, **kwargs)  # noqa: E501
            return data

    def get_actions_idaction_reactions_id_with_http_info(self, id_action, id, **kwargs):  # noqa: E501
        """Get Action's Reaction  # noqa: E501

        Get information for a reaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_idaction_reactions_id_with_http_info(id_action, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the Action (required)
        :param TrelloID id: The ID of the reaction (required)
        :param bool member: Whether to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource)
        :param bool emoji: Whether to load the emoji as a nested resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'id', 'member', 'emoji']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_idaction_reactions_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `get_actions_idaction_reactions_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_actions_idaction_reactions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'emoji' in params:
            query_params.append(('emoji', params['emoji']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_actions_idaction_reactionsummary(self, id_action, **kwargs):  # noqa: E501
        """List Action's summary of Reactions  # noqa: E501

        List a summary of all reactions for an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_idaction_reactionsummary(id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actions_idaction_reactionsummary_with_http_info(id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actions_idaction_reactionsummary_with_http_info(id_action, **kwargs)  # noqa: E501
            return data

    def get_actions_idaction_reactionsummary_with_http_info(self, id_action, **kwargs):  # noqa: E501
        """List Action's summary of Reactions  # noqa: E501

        List a summary of all reactions for an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actions_idaction_reactionsummary_with_http_info(id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the action (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions_idaction_reactionsummary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `get_actions_idaction_reactionsummary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactionsSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_batch(self, urls, **kwargs):  # noqa: E501
        """Batch Requests  # noqa: E501

        Make up to 10 GET requests in a single, batched API call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch(urls, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str urls: A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. \"urls=/members/trello,/cards/[cardId]\" (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_batch_with_http_info(urls, **kwargs)  # noqa: E501
        else:
            (data) = self.get_batch_with_http_info(urls, **kwargs)  # noqa: E501
            return data

    def get_batch_with_http_info(self, urls, **kwargs):  # noqa: E501
        """Batch Requests  # noqa: E501

        Make up to 10 GET requests in a single, batched API call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_batch_with_http_info(urls, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str urls: A list of API routes. Maximum of 10 routes allowed. The routes should begin with a forward slash and should not include the API version number - e.g. \"urls=/members/trello,/cards/[cardId]\" (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['urls']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'urls' is set
        if ('urls' not in params or
                params['urls'] is None):
            raise ValueError("Missing the required parameter `urls` when calling `get_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'urls' in params:
            query_params.append(('urls', params['urls']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/batch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_board_id_plugins(self, id, **kwargs):  # noqa: E501
        """Get Power-Ups on a Board  # noqa: E501

        List the Power-Ups on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_board_id_plugins(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param str filter: One of: `enabled` or `available`
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_board_id_plugins_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_board_id_plugins_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_board_id_plugins_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Power-Ups on a Board  # noqa: E501

        List the Power-Ups on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_board_id_plugins_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param str filter: One of: `enabled` or `available`
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_board_id_plugins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_board_id_plugins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/plugins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Plugin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id(self, id, **kwargs):  # noqa: E501
        """Get a Board  # noqa: E501

        Request a single board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: (required)
        :param str actions: This is a nested resource. Read more about actions as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str board_stars: Valid values are one of: `mine` or `none`.
        :param str cards: This is a nested resource. Read more about cards as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool card_plugin_data: Use with the `cards` param to include card pluginData with the response
        :param str checklists: This is a nested resource. Read more about checklists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool custom_fields: This is a nested resource. Read more about custom fields as nested resources [here](#custom-fields-nested-resource).
        :param str fields: The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
        :param str labels: This is a nested resource. Read more about labels as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str lists: This is a nested resource. Read more about lists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str members: This is a nested resource. Read more about members as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str memberships: This is a nested resource. Read more about memberships as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool plugin_data: Determines whether the pluginData for this board should be returned. Valid values: true or false.
        :param bool organization: This is a nested resource. Read more about organizations as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool organization_plugin_data: Use with the `organization` param to include organization pluginData with the response
        :param bool my_prefs:
        :param bool tags: Also known as collections, tags, refer to the collection(s) that a Board belongs to.
        :return: Board
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Board  # noqa: E501

        Request a single board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: (required)
        :param str actions: This is a nested resource. Read more about actions as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str board_stars: Valid values are one of: `mine` or `none`.
        :param str cards: This is a nested resource. Read more about cards as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool card_plugin_data: Use with the `cards` param to include card pluginData with the response
        :param str checklists: This is a nested resource. Read more about checklists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool custom_fields: This is a nested resource. Read more about custom fields as nested resources [here](#custom-fields-nested-resource).
        :param str fields: The fields of the board to be included in the response. Valid values: all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url
        :param str labels: This is a nested resource. Read more about labels as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str lists: This is a nested resource. Read more about lists as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str members: This is a nested resource. Read more about members as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param str memberships: This is a nested resource. Read more about memberships as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool plugin_data: Determines whether the pluginData for this board should be returned. Valid values: true or false.
        :param bool organization: This is a nested resource. Read more about organizations as nested resources [here](/cloud/trello/guides/rest-api/nested-resources/).
        :param bool organization_plugin_data: Use with the `organization` param to include organization pluginData with the response
        :param bool my_prefs:
        :param bool tags: Also known as collections, tags, refer to the collection(s) that a Board belongs to.
        :return: Board
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'actions', 'board_stars', 'cards', 'card_plugin_data', 'checklists', 'custom_fields', 'fields', 'labels', 'lists', 'members', 'memberships', 'plugin_data', 'organization', 'organization_plugin_data', 'my_prefs', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'actions' in params:
            query_params.append(('actions', params['actions']))  # noqa: E501
        if 'board_stars' in params:
            query_params.append(('boardStars', params['board_stars']))  # noqa: E501
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'card_plugin_data' in params:
            query_params.append(('card_pluginData', params['card_plugin_data']))  # noqa: E501
        if 'checklists' in params:
            query_params.append(('checklists', params['checklists']))  # noqa: E501
        if 'custom_fields' in params:
            query_params.append(('customFields', params['custom_fields']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
        if 'lists' in params:
            query_params.append(('lists', params['lists']))  # noqa: E501
        if 'members' in params:
            query_params.append(('members', params['members']))  # noqa: E501
        if 'memberships' in params:
            query_params.append(('memberships', params['memberships']))  # noqa: E501
        if 'plugin_data' in params:
            query_params.append(('pluginData', params['plugin_data']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization_plugin_data' in params:
            query_params.append(('organization_pluginData', params['organization_plugin_data']))  # noqa: E501
        if 'my_prefs' in params:
            query_params.append(('myPrefs', params['my_prefs']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Board',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_actions(self, board_id, **kwargs):  # noqa: E501
        """Get Actions of a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_actions(board_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str board_id: (required)
        :param Action fields: The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
        :param str filter: A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/).
        :param str format: The format of the returned Actions. Either list or count.
        :param str id_models: A comma-separated list of idModels. Only actions related to these models will be returned.
        :param float limit: The limit of the number of responses, between 0 and 1000.
        :param bool member: Whether to return the member object for each action.
        :param str member_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return.
        :param bool member_creator: Whether to return the memberCreator object for each action.
        :param str member_creator_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return
        :param float page: The page of results for actions.
        :param bool reactions: Whether to show reactions on comments or not.
        :param str before: An Action ID
        :param str since: An Action ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_actions_with_http_info(board_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_actions_with_http_info(board_id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_actions_with_http_info(self, board_id, **kwargs):  # noqa: E501
        """Get Actions of a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_actions_with_http_info(board_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str board_id: (required)
        :param Action fields: The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
        :param str filter: A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/).
        :param str format: The format of the returned Actions. Either list or count.
        :param str id_models: A comma-separated list of idModels. Only actions related to these models will be returned.
        :param float limit: The limit of the number of responses, between 0 and 1000.
        :param bool member: Whether to return the member object for each action.
        :param str member_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return.
        :param bool member_creator: Whether to return the memberCreator object for each action.
        :param str member_creator_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return
        :param float page: The page of results for actions.
        :param bool reactions: Whether to show reactions on comments or not.
        :param str before: An Action ID
        :param str since: An Action ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['board_id', 'fields', 'filter', 'format', 'id_models', 'limit', 'member', 'member_fields', 'member_creator', 'member_creator_fields', 'page', 'reactions', 'before', 'since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'board_id' is set
        if ('board_id' not in params or
                params['board_id'] is None):
            raise ValueError("Missing the required parameter `board_id` when calling `get_boards_id_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'board_id' in params:
            path_params['boardId'] = params['board_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'id_models' in params:
            query_params.append(('idModels', params['id_models']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'reactions' in params:
            query_params.append(('reactions', params['reactions']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{boardId}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_boardplugins(self, id, **kwargs):  # noqa: E501
        """Get Enabled Power-Ups on Board  # noqa: E501

        Get the enabled Power-Ups on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_boardplugins(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Board (required)
        :return: list[Plugin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_boardplugins_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_boardplugins_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_boardplugins_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Enabled Power-Ups on Board  # noqa: E501

        Get the enabled Power-Ups on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_boardplugins_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Board (required)
        :return: list[Plugin]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_boardplugins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_boardplugins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardPlugins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Plugin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_boardstars(self, board_id, **kwargs):  # noqa: E501
        """Get boardStars on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_boardstars(board_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str board_id: (required)
        :param str filter: Valid values: mine, none
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_boardstars_with_http_info(board_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_boardstars_with_http_info(board_id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_boardstars_with_http_info(self, board_id, **kwargs):  # noqa: E501
        """Get boardStars on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_boardstars_with_http_info(board_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str board_id: (required)
        :param str filter: Valid values: mine, none
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['board_id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_boardstars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'board_id' is set
        if ('board_id' not in params or
                params['board_id'] is None):
            raise ValueError("Missing the required parameter `board_id` when calling `get_boards_id_boardstars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'board_id' in params:
            path_params['boardId'] = params['board_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{boardId}/boardStars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_cards(self, id, **kwargs):  # noqa: E501
        """Get Cards on a Board  # noqa: E501

        Get all of the open Cards on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_cards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_cards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_cards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_cards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Cards on a Board  # noqa: E501

        Get all of the open Cards on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_cards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_cards_filter(self, id, filter, **kwargs):  # noqa: E501
        """Get filtered Cards on a Board  # noqa: E501

        Get the Cards on a Board that match a given filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_cards_filter(id, filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the Board (required)
        :param str filter: Valid Values: all, closed, none, open, visible. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_cards_filter_with_http_info(id, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_cards_filter_with_http_info(id, filter, **kwargs)  # noqa: E501
            return data

    def get_boards_id_cards_filter_with_http_info(self, id, filter, **kwargs):  # noqa: E501
        """Get filtered Cards on a Board  # noqa: E501

        Get the Cards on a Board that match a given filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_cards_filter_with_http_info(id, filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the Board (required)
        :param str filter: Valid Values: all, closed, none, open, visible. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_cards_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_cards_filter`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_boards_id_cards_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/cards/{filter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_cards_idcard(self, id, id_card, **kwargs):  # noqa: E501
        """Get a Card on a Board  # noqa: E501

        Get a single Card on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_cards_idcard(id, id_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the board (required)
        :param str id_card: The id the card to retrieve. (required)
        :param Action fields: The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
        :param str filter: A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/).
        :param str format: The format of the returned Actions. Either list or count.
        :param str id_models: A comma-separated list of idModels. Only actions related to these models will be returned.
        :param float limit: The limit of the number of responses, between 0 and 1000.
        :param bool member: Whether to return the member object for each action.
        :param str member_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return.
        :param bool member_creator: Whether to return the memberCreator object for each action.
        :param str member_creator_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return
        :param float page: The page of results for actions.
        :param bool reactions: Whether to show reactions on comments or not.
        :param str before: An Action ID
        :param str since: An Action ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_cards_idcard_with_http_info(id, id_card, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_cards_idcard_with_http_info(id, id_card, **kwargs)  # noqa: E501
            return data

    def get_boards_id_cards_idcard_with_http_info(self, id, id_card, **kwargs):  # noqa: E501
        """Get a Card on a Board  # noqa: E501

        Get a single Card on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_cards_idcard_with_http_info(id, id_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the board (required)
        :param str id_card: The id the card to retrieve. (required)
        :param Action fields: The fields to be returned for the Actions. [See Action fields here](/cloud/trello/guides/rest-api/object-definitions/#action-object).
        :param str filter: A comma-separated list of [action types](/cloud/trello/guides/rest-api/action-types/).
        :param str format: The format of the returned Actions. Either list or count.
        :param str id_models: A comma-separated list of idModels. Only actions related to these models will be returned.
        :param float limit: The limit of the number of responses, between 0 and 1000.
        :param bool member: Whether to return the member object for each action.
        :param str member_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) to return.
        :param bool member_creator: Whether to return the memberCreator object for each action.
        :param str member_creator_fields: The fields of the [member](/cloud/trello/guides/rest-api/object-definitions/#member-object) creator to return
        :param float page: The page of results for actions.
        :param bool reactions: Whether to show reactions on comments or not.
        :param str before: An Action ID
        :param str since: An Action ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_card', 'fields', 'filter', 'format', 'id_models', 'limit', 'member', 'member_fields', 'member_creator', 'member_creator_fields', 'page', 'reactions', 'before', 'since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_cards_idcard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_cards_idcard`")  # noqa: E501
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `get_boards_id_cards_idcard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_card' in params:
            path_params['idCard'] = params['id_card']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'id_models' in params:
            query_params.append(('idModels', params['id_models']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'reactions' in params:
            query_params.append(('reactions', params['reactions']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/cards/{idCard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_customfields(self, id, **kwargs):  # noqa: E501
        """Get Custom Fields for Board  # noqa: E501

        Get the Custom Field Definitions that exist on a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_customfields(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :return: list[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_customfields_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_customfields_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_customfields_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Custom Fields for Board  # noqa: E501

        Get the Custom Field Definitions that exist on a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_customfields_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :return: list[CustomField]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_customfields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_customfields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/customFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomField]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Board  # noqa: E501

        Get a single, specific field on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the board. (required)
        :param str field: The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_boards_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Board  # noqa: E501

        Get a single, specific field on a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the board. (required)
        :param str field: The field you'd like to receive. Valid values: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_boards_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_labels(self, id, **kwargs):  # noqa: E501
        """Get Labels on a Board  # noqa: E501

        Get all of the Labels on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_labels(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Board. (required)
        :param Label fields: The fields to be returned for the Labels.
        :param int limit: The number of Labels to be returned.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_labels_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_labels_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_labels_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Labels on a Board  # noqa: E501

        Get all of the Labels on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_labels_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Board. (required)
        :param Label fields: The fields to be returned for the Labels.
        :param int limit: The number of Labels to be returned.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/labels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_lists(self, id, **kwargs):  # noqa: E501
        """Get Lists on a Board  # noqa: E501

        Get the Lists on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_lists(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param ViewFilter cards: Filter to apply to Cards.
        :param str card_fields: `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/#card-object)
        :param ViewFilter filter: Filter to apply to Lists
        :param str fields: `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[TrelloList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_lists_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_lists_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_lists_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Lists on a Board  # noqa: E501

        Get the Lists on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_lists_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param ViewFilter cards: Filter to apply to Cards.
        :param str card_fields: `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/#card-object)
        :param ViewFilter filter: Filter to apply to Lists
        :param str fields: `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[TrelloList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cards', 'card_fields', 'filter', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_lists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_lists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'card_fields' in params:
            query_params.append(('card_fields', params['card_fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TrelloList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_lists_filter(self, id, filter, **kwargs):  # noqa: E501
        """Get filtered Lists on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_lists_filter(id, filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param ViewFilter filter: One of `all`, `closed`, `none`, `open` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_lists_filter_with_http_info(id, filter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_lists_filter_with_http_info(id, filter, **kwargs)  # noqa: E501
            return data

    def get_boards_id_lists_filter_with_http_info(self, id, filter, **kwargs):  # noqa: E501
        """Get filtered Lists on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_lists_filter_with_http_info(id, filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param ViewFilter filter: One of `all`, `closed`, `none`, `open` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_lists_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_lists_filter`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_boards_id_lists_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/lists/{filter}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_members(self, id, **kwargs):  # noqa: E501
        """Get the Members of a Board  # noqa: E501

        Get the Members for a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_members(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_members_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_members_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_members_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Members of a Board  # noqa: E501

        Get the Members for a board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_members_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_boards_id_memberships(self, id, **kwargs):  # noqa: E501
        """Get Memberships of a Board  # noqa: E501

        Get information about the memberships users have to the board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_memberships(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param str filter: One of `admins`, `all`, `none`, `normal`
        :param bool activity: Works for premium organizations only.
        :param bool org_member_type: Shows the type of member to the org the user is. For instance, an org admin will have a `orgMemberType` of `admin`.
        :param bool member: Determines whether to include a [nested member object](/cloud/trello/guides/rest-api/nested-resources/).
        :param MemberFields member_fields: Fields to show if `member=true`. Valid values: [nested member resource fields](/cloud/trello/guides/rest-api/nested-resources/).
        :return: Memberships
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_boards_id_memberships_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_boards_id_memberships_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_boards_id_memberships_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Memberships of a Board  # noqa: E501

        Get information about the memberships users have to the board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_boards_id_memberships_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param str filter: One of `admins`, `all`, `none`, `normal`
        :param bool activity: Works for premium organizations only.
        :param bool org_member_type: Shows the type of member to the org the user is. For instance, an org admin will have a `orgMemberType` of `admin`.
        :param bool member: Determines whether to include a [nested member object](/cloud/trello/guides/rest-api/nested-resources/).
        :param MemberFields member_fields: Fields to show if `member=true`. Valid values: [nested member resource fields](/cloud/trello/guides/rest-api/nested-resources/).
        :return: Memberships
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'activity', 'org_member_type', 'member', 'member_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_boards_id_memberships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_boards_id_memberships`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'activity' in params:
            query_params.append(('activity', params['activity']))  # noqa: E501
        if 'org_member_type' in params:
            query_params.append(('orgMemberType', params['org_member_type']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/memberships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Memberships',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id(self, id, **kwargs):  # noqa: E501
        """Get a Card  # noqa: E501

        Get a card by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `badges, checkItemStates, closed, dateLastActivity, desc, descData, due, start, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url`
        :param str actions: See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
        :param Attachments attachments: `true`, `false`, or `cover`
        :param str attachment_fields: `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool members: Whether to return member objects for members on the card
        :param str member_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
        :param bool members_voted: Whether to return member objects for members who voted on the card
        :param str member_voted_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
        :param bool check_item_states:
        :param str checklists: Whether to return the checklists on the card. `all` or `none`
        :param str checklist_fields: `all` or a comma-separated list of `idBoard,idCard,name,pos`
        :param bool board: Whether to return the board object the card is on
        :param str board_fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object). **Defaults**: `name, desc, descData, closed, idOrganization, pinned, url, prefs`
        :param bool list: See the [Lists Nested Resource](/cloud/trello/guides/rest-api/nested-resources/)
        :param bool plugin_data: Whether to include pluginData on the card with the response
        :param bool stickers: Whether to include sticker models with the response
        :param str sticker_fields: `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool custom_field_items: Whether to include the customFieldItems
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Card  # noqa: E501

        Get a card by its ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `badges, checkItemStates, closed, dateLastActivity, desc, descData, due, start, email, idBoard, idChecklists, idLabels, idList, idMembers, idShort, idAttachmentCover, manualCoverAttachment, labels, name, pos, shortUrl, url`
        :param str actions: See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
        :param Attachments attachments: `true`, `false`, or `cover`
        :param str attachment_fields: `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool members: Whether to return member objects for members on the card
        :param str member_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
        :param bool members_voted: Whether to return member objects for members who voted on the card
        :param str member_voted_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/). **Defaults**: `avatarHash, fullName, initials, username`
        :param bool check_item_states:
        :param str checklists: Whether to return the checklists on the card. `all` or `none`
        :param str checklist_fields: `all` or a comma-separated list of `idBoard,idCard,name,pos`
        :param bool board: Whether to return the board object the card is on
        :param str board_fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object). **Defaults**: `name, desc, descData, closed, idOrganization, pinned, url, prefs`
        :param bool list: See the [Lists Nested Resource](/cloud/trello/guides/rest-api/nested-resources/)
        :param bool plugin_data: Whether to include pluginData on the card with the response
        :param bool stickers: Whether to include sticker models with the response
        :param str sticker_fields: `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool custom_field_items: Whether to include the customFieldItems
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'actions', 'attachments', 'attachment_fields', 'members', 'member_fields', 'members_voted', 'member_voted_fields', 'check_item_states', 'checklists', 'checklist_fields', 'board', 'board_fields', 'list', 'plugin_data', 'stickers', 'sticker_fields', 'custom_field_items']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'actions' in params:
            query_params.append(('actions', params['actions']))  # noqa: E501
        if 'attachments' in params:
            query_params.append(('attachments', params['attachments']))  # noqa: E501
        if 'attachment_fields' in params:
            query_params.append(('attachment_fields', params['attachment_fields']))  # noqa: E501
        if 'members' in params:
            query_params.append(('members', params['members']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'members_voted' in params:
            query_params.append(('membersVoted', params['members_voted']))  # noqa: E501
        if 'member_voted_fields' in params:
            query_params.append(('memberVoted_fields', params['member_voted_fields']))  # noqa: E501
        if 'check_item_states' in params:
            query_params.append(('checkItemStates', params['check_item_states']))  # noqa: E501
        if 'checklists' in params:
            query_params.append(('checklists', params['checklists']))  # noqa: E501
        if 'checklist_fields' in params:
            query_params.append(('checklist_fields', params['checklist_fields']))  # noqa: E501
        if 'board' in params:
            query_params.append(('board', params['board']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501
        if 'plugin_data' in params:
            query_params.append(('pluginData', params['plugin_data']))  # noqa: E501
        if 'stickers' in params:
            query_params.append(('stickers', params['stickers']))  # noqa: E501
        if 'sticker_fields' in params:
            query_params.append(('sticker_fields', params['sticker_fields']))  # noqa: E501
        if 'custom_field_items' in params:
            query_params.append(('customFieldItems', params['custom_field_items']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Card',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_actions(self, id, **kwargs):  # noqa: E501
        """Get Actions on a Card  # noqa: E501

        List the Actions on a Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_actions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str filter: A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        :param float page: The page of results for actions. Each page of results has 50 actions.
        :return: list[Action]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_actions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_actions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_actions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Actions on a Card  # noqa: E501

        List the Actions on a Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_actions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str filter: A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        :param float page: The page of results for actions. Each page of results has 50 actions.
        :return: list[Action]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Action]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_attachments(self, id, **kwargs):  # noqa: E501
        """Get Attachments on a Card  # noqa: E501

        List the attachments on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_attachments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param str filter: Use `cover` to restrict to just the cover attachment
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_attachments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_attachments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_attachments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Attachments on a Card  # noqa: E501

        List the attachments on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_attachments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of attachment [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param str filter: Use `cover` to restrict to just the cover attachment
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_attachments_idattachment(self, id, id_attachment, **kwargs):  # noqa: E501
        """Get an Attachment on a Card  # noqa: E501

        Get a specific Attachment on a Card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_attachments_idattachment(id, id_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_attachment: The ID of the Attachment (required)
        :param list[object] fields: The Attachment fields to be included in the response.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_attachments_idattachment_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_attachments_idattachment_with_http_info(id, id_attachment, **kwargs)  # noqa: E501
            return data

    def get_cards_id_attachments_idattachment_with_http_info(self, id, id_attachment, **kwargs):  # noqa: E501
        """Get an Attachment on a Card  # noqa: E501

        Get a specific Attachment on a Card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_attachments_idattachment_with_http_info(id, id_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_attachment: The ID of the Attachment (required)
        :param list[object] fields: The Attachment fields to be included in the response.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_attachment', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_attachments_idattachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_attachments_idattachment`")  # noqa: E501
        # verify the required parameter 'id_attachment' is set
        if ('id_attachment' not in params or
                params['id_attachment'] is None):
            raise ValueError("Missing the required parameter `id_attachment` when calling `get_cards_id_attachments_idattachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_attachment' in params:
            path_params['idAttachment'] = params['id_attachment']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments/{idAttachment}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_board(self, id, **kwargs):  # noqa: E501
        """Get the Board the Card is on  # noqa: E501

        Get the board a card is on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_board(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_board_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_board_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_board_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Board the Card is on  # noqa: E501

        Get the board a card is on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_board_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_board`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_checkitem_idcheckitem(self, id, id_check_item, **kwargs):  # noqa: E501
        """Get checkItem on a Card  # noqa: E501

        Get a specific checkItem on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_checkitem_idcheckitem(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checkitem (required)
        :param str fields: `all` or a comma-separated list of `name,nameData,pos,state,type,due,dueReminder,idMember`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def get_cards_id_checkitem_idcheckitem_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Get checkItem on a Card  # noqa: E501

        Get a specific checkItem on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checkitem (required)
        :param str fields: `all` or a comma-separated list of `name,nameData,pos,state,type,due,dueReminder,idMember`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_checkitem_idcheckitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_checkitem_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `get_cards_id_checkitem_idcheckitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItem/{idCheckItem}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_checkitemstates(self, id, **kwargs):  # noqa: E501
        """Get checkItems on a Card  # noqa: E501

        Get the completed checklist items on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_checkitemstates(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of: `idCheckItem`, `state`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_checkitemstates_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_checkitemstates_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_checkitemstates_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get checkItems on a Card  # noqa: E501

        Get the completed checklist items on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_checkitemstates_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of: `idCheckItem`, `state`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_checkitemstates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_checkitemstates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItemStates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_checklists(self, id, **kwargs):  # noqa: E501
        """Get Checklists on a Card  # noqa: E501

        Get the checklists on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_checklists(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str check_items: `all` or `none`
        :param str check_item_fields: `all` or a comma-separated list of: `name,nameData,pos,state,type,due,dueReminder,idMember`
        :param str filter: `all` or `none`
        :param str fields: `all` or a comma-separated list of: `idBoard,idCard,name,pos`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_checklists_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_checklists_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_checklists_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Checklists on a Card  # noqa: E501

        Get the checklists on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_checklists_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str check_items: `all` or `none`
        :param str check_item_fields: `all` or a comma-separated list of: `name,nameData,pos,state,type,due,dueReminder,idMember`
        :param str filter: `all` or `none`
        :param str fields: `all` or a comma-separated list of: `idBoard,idCard,name,pos`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'check_items', 'check_item_fields', 'filter', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_checklists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_checklists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'check_items' in params:
            query_params.append(('checkItems', params['check_items']))  # noqa: E501
        if 'check_item_fields' in params:
            query_params.append(('checkItem_fields', params['check_item_fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checklists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_customfielditems(self, id, **kwargs):  # noqa: E501
        """Get Custom Field Items for a Card  # noqa: E501

        Get the custom field items for a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_customfielditems(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: list[CustomFieldItems]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_customfielditems_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_customfielditems_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_customfielditems_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Custom Field Items for a Card  # noqa: E501

        Get the custom field items for a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_customfielditems_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: list[CustomFieldItems]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_customfielditems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_customfielditems`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/customFieldItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomFieldItems]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Card  # noqa: E501

        Get a specific property of a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param CardFields field: The desired field. (required)
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_cards_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Card  # noqa: E501

        Get a specific property of a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param CardFields field: The desired field. (required)
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_cards_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Card',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_list(self, id, **kwargs):  # noqa: E501
        """Get the List of a Card  # noqa: E501

        Get the list a card is in  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the List of a Card  # noqa: E501

        Get the list a card is in  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_members(self, id, **kwargs):  # noqa: E501
        """Get the Members of a Card  # noqa: E501

        Get the members on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_members(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_members_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_members_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_members_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Members of a Card  # noqa: E501

        Get the members on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_members_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_membersvoted(self, id, **kwargs):  # noqa: E501
        """Get Members who have voted on a Card  # noqa: E501

        Get the members who have voted on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_membersvoted(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_membersvoted_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_membersvoted_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_membersvoted_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Members who have voted on a Card  # noqa: E501

        Get the members who have voted on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_membersvoted_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_membersvoted" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_membersvoted`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/membersVoted', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_plugindata(self, id, **kwargs):  # noqa: E501
        """Get pluginData on a Card  # noqa: E501

        Get any shared pluginData on a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_plugindata(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_plugindata_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_plugindata_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_plugindata_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get pluginData on a Card  # noqa: E501

        Get any shared pluginData on a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_plugindata_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_plugindata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_plugindata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/pluginData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_stickers(self, id, **kwargs):  # noqa: E501
        """Get Stickers on a Card  # noqa: E501

        Get the stickers on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_stickers(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_stickers_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_stickers_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cards_id_stickers_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Stickers on a Card  # noqa: E501

        Get the stickers on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_stickers_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str fields: `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_stickers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_stickers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards_id_stickers_idsticker(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get a Sticker on a Card  # noqa: E501

        Get a specific sticker on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_stickers_idsticker(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_sticker: The ID of the sticker (required)
        :param str fields: `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_id_stickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_id_stickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def get_cards_id_stickers_idsticker_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get a Sticker on a Card  # noqa: E501

        Get a specific sticker on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_id_stickers_idsticker_with_http_info(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_sticker: The ID of the sticker (required)
        :param str fields: `all` or a comma-separated list of sticker [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards_id_stickers_idsticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cards_id_stickers_idsticker`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `get_cards_id_stickers_idsticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers/{idSticker}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checklists_id(self, id, **kwargs):  # noqa: E501
        """Get a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str cards: Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is a nested resource. The additional query params available are documented at [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource).
        :param str check_items: The check items on the list to return. One of: `all`, `none`.
        :param str check_item_fields: The fields on the checkItem to return if checkItems are being returned. `all` or a comma-separated list of: `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`
        :param str fields: `all` or a comma-separated list of checklist [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checklists_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_checklists_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_checklists_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str cards: Valid values: `all`, `closed`, `none`, `open`, `visible`. Cards is a nested resource. The additional query params available are documented at [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource).
        :param str check_items: The check items on the list to return. One of: `all`, `none`.
        :param str check_item_fields: The fields on the checkItem to return if checkItems are being returned. `all` or a comma-separated list of: `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`
        :param str fields: `all` or a comma-separated list of checklist [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cards', 'check_items', 'check_item_fields', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checklists_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_checklists_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'check_items' in params:
            query_params.append(('checkItems', params['check_items']))  # noqa: E501
        if 'check_item_fields' in params:
            query_params.append(('checkItem_fields', params['check_item_fields']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checklists_id_board(self, id, **kwargs):  # noqa: E501
        """Get the Board the Checklist is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_board(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checklists_id_board_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_checklists_id_board_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_checklists_id_board_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Board the Checklist is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_board_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checklists_id_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_checklists_id_board`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checklists_id_cards(self, id, **kwargs):  # noqa: E501
        """Get the Card a Checklist is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_cards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checklists_id_cards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_checklists_id_cards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_checklists_id_cards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Card a Checklist is on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_cards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checklists_id_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_checklists_id_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checklists_id_checkitems(self, id, **kwargs):  # noqa: E501
        """Get Checkitems on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_checkitems(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str filter: One of: `all`, `none`.
        :param str fields: One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`, `dueReminder`, `idMember`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checklists_id_checkitems_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_checklists_id_checkitems_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_checklists_id_checkitems_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Checkitems on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_checkitems_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str filter: One of: `all`, `none`.
        :param str fields: One of: `all`, `name`, `nameData`, `pos`, `state`,`type`, `due`, `dueReminder`, `idMember`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checklists_id_checkitems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_checklists_id_checkitems`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checklists_id_checkitems_idcheckitem(self, id, id_check_item, **kwargs):  # noqa: E501
        """Get a Checkitem on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_checkitems_idcheckitem(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param TrelloID id_check_item: ID of the check item to retrieve. (required)
        :param str fields: One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`,.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checklists_id_checkitems_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.get_checklists_id_checkitems_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def get_checklists_id_checkitems_idcheckitem_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Get a Checkitem on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_checkitems_idcheckitem_with_http_info(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param TrelloID id_check_item: ID of the check item to retrieve. (required)
        :param str fields: One of: `all`, `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`,.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checklists_id_checkitems_idcheckitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_checklists_id_checkitems_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `get_checklists_id_checkitems_idcheckitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems/{idCheckItem}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checklists_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get field on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str field: Field to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checklists_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_checklists_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_checklists_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get field on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checklists_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str field: Field to update. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checklists_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_checklists_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_checklists_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customfields_id(self, id, **kwargs):  # noqa: E501
        """Get a Custom Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customfields_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Custom Field. (required)
        :return: CustomField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customfields_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customfields_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_customfields_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Custom Field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customfields_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Custom Field. (required)
        :return: CustomField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customfields_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_customfields_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customfields_id_options(self, id, **kwargs):  # noqa: E501
        """Add Option to Custom Field dropdown  # noqa: E501

        Add an option to a dropdown Custom Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customfields_id_options(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customfields_id_options_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customfields_id_options_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_customfields_id_options_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add Option to Custom Field dropdown  # noqa: E501

        Add an option to a dropdown Custom Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customfields_id_options_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customfields_id_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_customfields_id_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_customfields_options_idcustomfieldoption(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """Get Option of Custom Field dropdown  # noqa: E501

        Retrieve a specific, existing Option on a given dropdown-type Custom Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customfields_options_idcustomfieldoption(id, id_custom_field_option, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfielditem. (required)
        :param TrelloID id_custom_field_option: ID of the customfieldoption to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_customfields_options_idcustomfieldoption_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
        else:
            (data) = self.get_customfields_options_idcustomfieldoption_with_http_info(id, id_custom_field_option, **kwargs)  # noqa: E501
            return data

    def get_customfields_options_idcustomfieldoption_with_http_info(self, id, id_custom_field_option, **kwargs):  # noqa: E501
        """Get Option of Custom Field dropdown  # noqa: E501

        Retrieve a specific, existing Option on a given dropdown-type Custom Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_customfields_options_idcustomfieldoption_with_http_info(id, id_custom_field_option, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfielditem. (required)
        :param TrelloID id_custom_field_option: ID of the customfieldoption to retrieve. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_custom_field_option']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_customfields_options_idcustomfieldoption" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_customfields_options_idcustomfieldoption`")  # noqa: E501
        # verify the required parameter 'id_custom_field_option' is set
        if ('id_custom_field_option' not in params or
                params['id_custom_field_option'] is None):
            raise ValueError("Missing the required parameter `id_custom_field_option` when calling `get_customfields_options_idcustomfieldoption`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_custom_field_option' in params:
            path_params['idCustomFieldOption'] = params['id_custom_field_option']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options/{idCustomFieldOption}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id(self, id, **kwargs):  # noqa: E501
        """Get an Enterprise  # noqa: E501

        Get an enterprise by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param str fields: Comma-separated list of: `id`, `name`, `displayName`, `prefs`, `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation [here]() for more information on filtering), `idOrganizations`, `products`, `userTypes`, `idMembers`, `idOrganizations`
        :param str members: One of: `none`, `normal`, `admins`, `owners`, `all`
        :param str member_fields: One of: `avatarHash`, `fullName`, `initials`, `username`
        :param str member_filter: Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated.
        :param str member_sort: This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str member_sort_by: Deprecated: Please use member_sort. This parameter expects a [SCIM-style sorting value](/cloud/trello/scim/). Note that the members array returned will be paginated if `members` is `normal` or `admins`. Pagination can be controlled with `member_startIndex`, etc, and the API response's header will contain the total count and pagination state.
        :param str member_sort_order: Deprecated: Please use member_sort. One of: `ascending`, `descending`, `asc`, `desc`
        :param int member_start_index: Any integer between 0 and 100.
        :param int member_count: 0 to 100
        :param str organizations: One of: `none`, `members`, `public`, `all`
        :param str organization_fields: Any valid value that the [nested organization field resource]() accepts.
        :param bool organization_paid_accounts: Whether or not to include paid account information in the returned workspace objects
        :param str organization_memberships: Comma-seperated list of: `me`, `normal`, `admin`, `active`, `deactivated`
        :return: Enterprise
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an Enterprise  # noqa: E501

        Get an enterprise by its ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param str fields: Comma-separated list of: `id`, `name`, `displayName`, `prefs`, `ssoActivationFailed`, `idAdmins`, `idMembers` (Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data. Read the SCIM documentation [here]() for more information on filtering), `idOrganizations`, `products`, `userTypes`, `idMembers`, `idOrganizations`
        :param str members: One of: `none`, `normal`, `admins`, `owners`, `all`
        :param str member_fields: One of: `avatarHash`, `fullName`, `initials`, `username`
        :param str member_filter: Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the member_* args are set, the member array will be paginated.
        :param str member_sort: This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str member_sort_by: Deprecated: Please use member_sort. This parameter expects a [SCIM-style sorting value](/cloud/trello/scim/). Note that the members array returned will be paginated if `members` is `normal` or `admins`. Pagination can be controlled with `member_startIndex`, etc, and the API response's header will contain the total count and pagination state.
        :param str member_sort_order: Deprecated: Please use member_sort. One of: `ascending`, `descending`, `asc`, `desc`
        :param int member_start_index: Any integer between 0 and 100.
        :param int member_count: 0 to 100
        :param str organizations: One of: `none`, `members`, `public`, `all`
        :param str organization_fields: Any valid value that the [nested organization field resource]() accepts.
        :param bool organization_paid_accounts: Whether or not to include paid account information in the returned workspace objects
        :param str organization_memberships: Comma-seperated list of: `me`, `normal`, `admin`, `active`, `deactivated`
        :return: Enterprise
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'members', 'member_fields', 'member_filter', 'member_sort', 'member_sort_by', 'member_sort_order', 'member_start_index', 'member_count', 'organizations', 'organization_fields', 'organization_paid_accounts', 'organization_memberships']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'members' in params:
            query_params.append(('members', params['members']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_filter' in params:
            query_params.append(('member_filter', params['member_filter']))  # noqa: E501
        if 'member_sort' in params:
            query_params.append(('member_sort', params['member_sort']))  # noqa: E501
        if 'member_sort_by' in params:
            query_params.append(('member_sortBy', params['member_sort_by']))  # noqa: E501
        if 'member_sort_order' in params:
            query_params.append(('member_sortOrder', params['member_sort_order']))  # noqa: E501
        if 'member_start_index' in params:
            query_params.append(('member_startIndex', params['member_start_index']))  # noqa: E501
        if 'member_count' in params:
            query_params.append(('member_count', params['member_count']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'organization_paid_accounts' in params:
            query_params.append(('organization_paid_accounts', params['organization_paid_accounts']))  # noqa: E501
        if 'organization_memberships' in params:
            query_params.append(('organization_memberships', params['organization_memberships']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enterprise',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_admins(self, id, **kwargs):  # noqa: E501
        """Get Enterprise admin Members  # noqa: E501

        Get an enterprise's admin members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_admins(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param str fields: Any valid value that the [nested member field resource]() accepts.
        :return: EnterpriseAdmin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_admins_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_admins_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_admins_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Enterprise admin Members  # noqa: E501

        Get an enterprise's admin members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_admins_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param str fields: Any valid value that the [nested member field resource]() accepts.
        :return: EnterpriseAdmin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_admins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_admins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/admins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnterpriseAdmin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_auditlog(self, id, **kwargs):  # noqa: E501
        """Get auditlog data for an Enterprise  # noqa: E501

        Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is required for this route.    NOTE: For enterprises that have opted in to user management via AdminHub, the auditlog will will contain actions taken in AdminHub, but may not contain the source for those actions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_auditlog(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :return: list[EnterpriseAuditLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_auditlog_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_auditlog_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_auditlog_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get auditlog data for an Enterprise  # noqa: E501

        Returns an array of Actions related to the Enterprise object. Used for populating data sent to Google Sheets from an Enterprise's audit log page: https://trello.com/e/{enterprise_name}/admin/auditlog. An Enterprise admin token is required for this route.    NOTE: For enterprises that have opted in to user management via AdminHub, the auditlog will will contain actions taken in AdminHub, but may not contain the source for those actions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_auditlog_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :return: list[EnterpriseAuditLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_auditlog" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_auditlog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/auditlog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EnterpriseAuditLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_claimable_organizations(self, id, **kwargs):  # noqa: E501
        """Get ClaimableOrganizations of an Enterprise  # noqa: E501

        Get the Workspaces that are claimable by the enterprise by ID. Can optionally query for workspaces based on activeness/ inactiveness.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_claimable_organizations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve (required)
        :param int limit: Limits the number of workspaces to be sorted
        :param str cursor: Specifies the sort order to return matching documents
        :param str name: Name of the enterprise to retrieve workspaces for
        :param str active_since: Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
        :param str inactive_since: Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
        :return: ClaimableOrganizations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_claimable_organizations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_claimable_organizations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_claimable_organizations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get ClaimableOrganizations of an Enterprise  # noqa: E501

        Get the Workspaces that are claimable by the enterprise by ID. Can optionally query for workspaces based on activeness/ inactiveness.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_claimable_organizations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve (required)
        :param int limit: Limits the number of workspaces to be sorted
        :param str cursor: Specifies the sort order to return matching documents
        :param str name: Name of the enterprise to retrieve workspaces for
        :param str active_since: Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
        :param str inactive_since: Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
        :return: ClaimableOrganizations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'limit', 'cursor', 'name', 'active_since', 'inactive_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_claimable_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_claimable_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'active_since' in params:
            query_params.append(('activeSince', params['active_since']))  # noqa: E501
        if 'inactive_since' in params:
            query_params.append(('inactiveSince', params['inactive_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/claimableOrganizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClaimableOrganizations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_members(self, id, **kwargs):  # noqa: E501
        """Get Members of Enterprise  # noqa: E501

        Get the members of an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_members(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param str fields: A comma-seperated list of valid [member fields](/cloud/trello/guides/rest-api/object-definitions/#member-object).
        :param str filter: Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated.
        :param str sort: This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_by: Deprecated: Please use `sort` instead. This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_order: Deprecated: Please use `sort` instead. One of: `ascending`, `descending`, `asc`, `desc`.
        :param int start_index: Any integer between 0 and 9999.
        :param str count: [SCIM-style filter](/cloud/trello/scim/).
        :param str organization_fields: Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :param str board_fields: Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :return: list[Member]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_members_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_members_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_members_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Members of Enterprise  # noqa: E501

        Get the members of an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_members_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param str fields: A comma-seperated list of valid [member fields](/cloud/trello/guides/rest-api/object-definitions/#member-object).
        :param str filter: Pass a [SCIM-style query](/cloud/trello/scim/) to filter members. This takes precedence over the all/normal/admins value of members. If any of the below member_* args are set, the member array will be paginated.
        :param str sort: This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value prefixed by a `-` to sort descending. If no `-` is prefixed, it will be sorted ascending. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_by: Deprecated: Please use `sort` instead. This parameter expects a [SCIM-style](/cloud/trello/scim/) sorting value. Note that the members array returned will be paginated if `members` is 'normal' or 'admins'. Pagination can be controlled with member_startIndex, etc, but the API response will not contain the total available result count or pagination status data.
        :param str sort_order: Deprecated: Please use `sort` instead. One of: `ascending`, `descending`, `asc`, `desc`.
        :param int start_index: Any integer between 0 and 9999.
        :param str count: [SCIM-style filter](/cloud/trello/scim/).
        :param str organization_fields: Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :param str board_fields: Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :return: list[Member]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'filter', 'sort', 'sort_by', 'sort_order', 'start_index', 'count', 'organization_fields', 'board_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Member]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_members_idmember(self, id, id_member, **kwargs):  # noqa: E501
        """Get a Member of Enterprise  # noqa: E501

        Get a specific member of an enterprise by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_members_idmember(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_member: An ID of a member resource. (required)
        :param str fields: A comma separated list of any valid values that the [nested member field resource]() accepts.
        :param str organization_fields: Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :param str board_fields: Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_members_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_members_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_members_idmember_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Get a Member of Enterprise  # noqa: E501

        Get a specific member of an enterprise by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_members_idmember_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_member: An ID of a member resource. (required)
        :param str fields: A comma separated list of any valid values that the [nested member field resource]() accepts.
        :param str organization_fields: Any valid value that the [nested organization field resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :param str board_fields: Any valid value that the [nested board resource](/cloud/trello/guides/rest-api/nested-resources/) accepts.
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'fields', 'organization_fields', 'board_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_members_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_members_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `get_enterprises_id_members_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members/{idMember}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Member',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_organizations_bulk_id_organizations(self, id, id_organizations, **kwargs):  # noqa: E501
        """Bulk accept a set of organizations to an Enterprise.  # noqa: E501

        Accept an array of organizations to an enterprise.   NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in organizations being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_organizations_bulk_id_organizations(id, id_organizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param list[object] id_organizations: An array of IDs of the organizations to be removed from the enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_organizations_bulk_id_organizations_with_http_info(id, id_organizations, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_organizations_bulk_id_organizations_with_http_info(id, id_organizations, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_organizations_bulk_id_organizations_with_http_info(self, id, id_organizations, **kwargs):  # noqa: E501
        """Bulk accept a set of organizations to an Enterprise.  # noqa: E501

        Accept an array of organizations to an enterprise.   NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in organizations being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_organizations_bulk_id_organizations_with_http_info(id, id_organizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param list[object] id_organizations: An array of IDs of the organizations to be removed from the enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_organizations_bulk_id_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_organizations_bulk_id_organizations`")  # noqa: E501
        # verify the required parameter 'id_organizations' is set
        if ('id_organizations' not in params or
                params['id_organizations'] is None):
            raise ValueError("Missing the required parameter `id_organizations` when calling `get_enterprises_id_organizations_bulk_id_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_organizations' in params:
            path_params['idOrganizations'] = params['id_organizations']  # noqa: E501
            collection_formats['idOrganizations'] = ''  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/organizations/bulk/{idOrganizations}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_pending_organizations(self, id, **kwargs):  # noqa: E501
        """Get PendingOrganizations of an Enterprise  # noqa: E501

        Get the Workspaces that are pending for the enterprise by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_pending_organizations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve (required)
        :param str active_since: Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
        :param str inactive_since: Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
        :return: list[PendingOrganizations]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_pending_organizations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_pending_organizations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_pending_organizations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get PendingOrganizations of an Enterprise  # noqa: E501

        Get the Workspaces that are pending for the enterprise by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_pending_organizations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve (required)
        :param str active_since: Date in YYYY-MM-DD format indicating the date to search up to for activeness of workspace
        :param str inactive_since: Date in YYYY-MM-DD format indicating the date to search up to for inactiveness of workspace
        :return: list[PendingOrganizations]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'active_since', 'inactive_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_pending_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_pending_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'active_since' in params:
            query_params.append(('activeSince', params['active_since']))  # noqa: E501
        if 'inactive_since' in params:
            query_params.append(('inactiveSince', params['inactive_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/pendingOrganizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PendingOrganizations]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_signupurl(self, id, **kwargs):  # noqa: E501
        """Get signupUrl for Enterprise  # noqa: E501

        Get the signup URL for an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_signupurl(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param bool authenticate:
        :param bool confirmation_accepted:
        :param str return_url: Any valid URL.
        :param bool tos_accepted: Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_signupurl_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_signupurl_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_signupurl_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get signupUrl for Enterprise  # noqa: E501

        Get the signup URL for an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_signupurl_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param bool authenticate:
        :param bool confirmation_accepted:
        :param str return_url: Any valid URL.
        :param bool tos_accepted: Designates whether the user has seen/consented to the Trello ToS prior to being redirected to the enterprise signup page/their IdP.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'authenticate', 'confirmation_accepted', 'return_url', 'tos_accepted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_signupurl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_signupurl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'authenticate' in params:
            query_params.append(('authenticate', params['authenticate']))  # noqa: E501
        if 'confirmation_accepted' in params:
            query_params.append(('confirmationAccepted', params['confirmation_accepted']))  # noqa: E501
        if 'return_url' in params:
            query_params.append(('returnUrl', params['return_url']))  # noqa: E501
        if 'tos_accepted' in params:
            query_params.append(('tosAccepted', params['tos_accepted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/signupUrl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_transferrable_bulk_id_organizations(self, id, id_organizations, **kwargs):  # noqa: E501
        """Get a bulk list of organizations that can be transferred to an enterprise.  # noqa: E501

        Get a list of organizations that can be transferred to an enterprise when given a bulk list of organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_transferrable_bulk_id_organizations(id, id_organizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param list[object] id_organizations: An array of IDs of an Organization resource. (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_transferrable_bulk_id_organizations_with_http_info(id, id_organizations, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_transferrable_bulk_id_organizations_with_http_info(id, id_organizations, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_transferrable_bulk_id_organizations_with_http_info(self, id, id_organizations, **kwargs):  # noqa: E501
        """Get a bulk list of organizations that can be transferred to an enterprise.  # noqa: E501

        Get a list of organizations that can be transferred to an enterprise when given a bulk list of organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_transferrable_bulk_id_organizations_with_http_info(id, id_organizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param list[object] id_organizations: An array of IDs of an Organization resource. (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_transferrable_bulk_id_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_transferrable_bulk_id_organizations`")  # noqa: E501
        # verify the required parameter 'id_organizations' is set
        if ('id_organizations' not in params or
                params['id_organizations'] is None):
            raise ValueError("Missing the required parameter `id_organizations` when calling `get_enterprises_id_transferrable_bulk_id_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_organizations' in params:
            path_params['idOrganizations'] = params['id_organizations']  # noqa: E501
            collection_formats['idOrganizations'] = ''  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/transferrable/bulk/{idOrganizations}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enterprises_id_transferrable_organization_id_organization(self, id, id_organization, **kwargs):  # noqa: E501
        """Get whether an organization can be transferred to an enterprise.  # noqa: E501

        Get whether an organization can be transferred to an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_transferrable_organization_id_organization(id, id_organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param TrelloID id_organization: An ID of an Organization resource. (required)
        :return: TransferrableOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enterprises_id_transferrable_organization_id_organization_with_http_info(id, id_organization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enterprises_id_transferrable_organization_id_organization_with_http_info(id, id_organization, **kwargs)  # noqa: E501
            return data

    def get_enterprises_id_transferrable_organization_id_organization_with_http_info(self, id, id_organization, **kwargs):  # noqa: E501
        """Get whether an organization can be transferred to an enterprise.  # noqa: E501

        Get whether an organization can be transferred to an enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enterprises_id_transferrable_organization_id_organization_with_http_info(id, id_organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param TrelloID id_organization: An ID of an Organization resource. (required)
        :return: TransferrableOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enterprises_id_transferrable_organization_id_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_enterprises_id_transferrable_organization_id_organization`")  # noqa: E501
        # verify the required parameter 'id_organization' is set
        if ('id_organization' not in params or
                params['id_organization'] is None):
            raise ValueError("Missing the required parameter `id_organization` when calling `get_enterprises_id_transferrable_organization_id_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_organization' in params:
            path_params['idOrganization'] = params['id_organization']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/transferrable/organization/{idOrganization}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferrableOrganization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_labels_id(self, id, **kwargs):  # noqa: E501
        """Get a Label  # noqa: E501

        Get information about a single Label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_labels_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Label (required)
        :param str fields: all or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_labels_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_labels_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_labels_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Label  # noqa: E501

        Get information about a single Label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_labels_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Label (required)
        :param str fields: all or a comma-separated list of [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_labels_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_labels_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lists_id(self, id, **kwargs):  # noqa: E501
        """Get a List  # noqa: E501

        Get information about a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str fields: `all` or a comma separated list of List field names.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lists_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lists_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_lists_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a List  # noqa: E501

        Get information about a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str fields: `all` or a comma separated list of List field names.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lists_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lists_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lists_id_actions(self, id, **kwargs):  # noqa: E501
        """Get Actions for a List  # noqa: E501

        Get the Actions on a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_actions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str filter: A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lists_id_actions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lists_id_actions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_lists_id_actions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Actions for a List  # noqa: E501

        Get the Actions on a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_actions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str filter: A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lists_id_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lists_id_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lists_id_board(self, id, **kwargs):  # noqa: E501
        """Get the Board a List is on  # noqa: E501

        Get the board a list is on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_board(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lists_id_board_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lists_id_board_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_lists_id_board_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Board a List is on  # noqa: E501

        Get the board a list is on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_board_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/#board-object)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lists_id_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lists_id_board`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lists_id_cards(self, id, **kwargs):  # noqa: E501
        """Get Cards in a List  # noqa: E501

        List the cards in a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_cards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :return: list[Card]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lists_id_cards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lists_id_cards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_lists_id_cards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Cards in a List  # noqa: E501

        List the cards in a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lists_id_cards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :return: list[Card]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lists_id_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lists_id_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Card]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_actions(self, id, **kwargs):  # noqa: E501
        """Get a Member's Actions  # noqa: E501

        List the actions for a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_actions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_actions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_actions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_actions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Member's Actions  # noqa: E501

        List the actions for a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_actions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: A comma-separated list of [action types](https://developer.atlassian.com/cloud/trello/guides/rest-api/action-types/).
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_boardbackgrounds(self, id, **kwargs):  # noqa: E501
        """Get Member's custom Board backgrounds  # noqa: E501

        Get a member's custom board backgrounds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardbackgrounds(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: One of: `all`, `custom`, `default`, `none`, `premium`
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_boardbackgrounds_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_boardbackgrounds_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_boardbackgrounds_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Member's custom Board backgrounds  # noqa: E501

        Get a member's custom board backgrounds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardbackgrounds_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: One of: `all`, `custom`, `default`, `none`, `premium`
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_boardbackgrounds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_boardbackgrounds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_boardbackgrounds_idbackground(self, id, id_background, **kwargs):  # noqa: E501
        """Get a boardBackground of a Member  # noqa: E501

        Get a member's board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardbackgrounds_idbackground(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the board background (required)
        :param str fields: `all` or a comma-separated list of: `brightness`, `fullSizeUrl`, `scaled`, `tile`
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def get_members_id_boardbackgrounds_idbackground_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Get a boardBackground of a Member  # noqa: E501

        Get a member's board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the board background (required)
        :param str fields: `all` or a comma-separated list of: `brightness`, `fullSizeUrl`, `scaled`, `tile`
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_boardbackgrounds_idbackground" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_boardbackgrounds_idbackground`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `get_members_id_boardbackgrounds_idbackground`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds/{idBackground}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoardBackground',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_boards(self, id, **kwargs):  # noqa: E501
        """Get Boards that Member belongs to  # noqa: E501

        Lists the boards that the user is a member of.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: `all` or a comma-separated list of: `closed`, `members`, `open`, `organization`, `public`, `starred`
        :param BoardFields fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param str lists: Which lists to include with the boards. One of: `all`, `closed`, `none`, `open`
        :param bool organization: Whether to include the Organization object with the Boards
        :param OrganizationFields organization_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Board]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_boards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_boards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_boards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Boards that Member belongs to  # noqa: E501

        Lists the boards that the user is a member of.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: `all` or a comma-separated list of: `closed`, `members`, `open`, `organization`, `public`, `starred`
        :param BoardFields fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param str lists: Which lists to include with the boards. One of: `all`, `closed`, `none`, `open`
        :param bool organization: Whether to include the Organization object with the Boards
        :param OrganizationFields organization_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Board]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields', 'lists', 'organization', 'organization_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_boards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_boards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'lists' in params:
            query_params.append(('lists', params['lists']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Board]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_boardsinvited(self, id, **kwargs):  # noqa: E501
        """Get Boards the Member has been invited to  # noqa: E501

        Get the boards the member has been invited to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardsinvited(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param BoardFields fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Board]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_boardsinvited_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_boardsinvited_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_boardsinvited_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Boards the Member has been invited to  # noqa: E501

        Get the boards the member has been invited to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardsinvited_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param BoardFields fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Board]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_boardsinvited" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_boardsinvited`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardsInvited', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Board]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_boardstars(self, id, **kwargs):  # noqa: E501
        """Get a Member's boardStars  # noqa: E501

        List a member's board stars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardstars(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_boardstars_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_boardstars_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_boardstars_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Member's boardStars  # noqa: E501

        List a member's board stars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardstars_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_boardstars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_boardstars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_boardstars_idstar(self, id, id_star, **kwargs):  # noqa: E501
        """Get a boardStar of Member  # noqa: E501

        Get a specific boardStar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardstars_idstar(id, id_star, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_star: The ID of the board star (required)
        :return: BoardStars
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_boardstars_idstar_with_http_info(id, id_star, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_boardstars_idstar_with_http_info(id, id_star, **kwargs)  # noqa: E501
            return data

    def get_members_id_boardstars_idstar_with_http_info(self, id, id_star, **kwargs):  # noqa: E501
        """Get a boardStar of Member  # noqa: E501

        Get a specific boardStar  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_boardstars_idstar_with_http_info(id, id_star, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_star: The ID of the board star (required)
        :return: BoardStars
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_star']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_boardstars_idstar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_boardstars_idstar`")  # noqa: E501
        # verify the required parameter 'id_star' is set
        if ('id_star' not in params or
                params['id_star'] is None):
            raise ValueError("Missing the required parameter `id_star` when calling `get_members_id_boardstars_idstar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_star' in params:
            path_params['idStar'] = params['id_star']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars/{idStar}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoardStars',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_cards(self, id, **kwargs):  # noqa: E501
        """Get Cards the Member is on  # noqa: E501

        Gets the cards a member is on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_cards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: One of: `all`, `closed`, `none`, `open`, `visible`
        :return: list[Card]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_cards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_cards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_cards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Cards the Member is on  # noqa: E501

        Gets the cards a member is on  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_cards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: One of: `all`, `closed`, `none`, `open`, `visible`
        :return: list[Card]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Card]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_customboardbackgrounds(self, id, **kwargs):  # noqa: E501
        """Get a Member's custom Board Backgrounds  # noqa: E501

        Get a member's custom board backgrounds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customboardbackgrounds(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[BoardBackground]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_customboardbackgrounds_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_customboardbackgrounds_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_customboardbackgrounds_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Member's custom Board Backgrounds  # noqa: E501

        Get a member's custom board backgrounds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customboardbackgrounds_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[BoardBackground]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_customboardbackgrounds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_customboardbackgrounds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BoardBackground]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_customboardbackgrounds_idbackground(self, id, id_background, **kwargs):  # noqa: E501
        """Get custom Board Background of Member  # noqa: E501

        Get a specific custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customboardbackgrounds_idbackground(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id2 id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the custom background (required)
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def get_members_id_customboardbackgrounds_idbackground_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Get custom Board Background of Member  # noqa: E501

        Get a specific custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id2 id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the custom background (required)
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_customboardbackgrounds_idbackground" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_customboardbackgrounds_idbackground`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `get_members_id_customboardbackgrounds_idbackground`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds/{idBackground}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoardBackground',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_customemoji(self, id, **kwargs):  # noqa: E501
        """Get a Member's customEmojis  # noqa: E501

        Get a Member's uploaded custom Emojis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customemoji(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[CustomEmoji]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_customemoji_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_customemoji_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_customemoji_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Member's customEmojis  # noqa: E501

        Get a Member's uploaded custom Emojis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customemoji_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[CustomEmoji]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_customemoji" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_customemoji`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customEmoji', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomEmoji]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_customstickers(self, id, **kwargs):  # noqa: E501
        """Get Member's custom Stickers  # noqa: E501

        Get a Member's uploaded stickers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customstickers(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[CustomSticker]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_customstickers_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_customstickers_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_customstickers_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Member's custom Stickers  # noqa: E501

        Get a Member's uploaded stickers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customstickers_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[CustomSticker]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_customstickers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_customstickers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomSticker]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_customstickers_idsticker(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get a Member's custom Sticker  # noqa: E501

        Get a Member's custom Sticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customstickers_idsticker(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_sticker: The ID of the uploaded sticker (required)
        :param str fields: `all` or a comma-separated list of `scaled`, `url`
        :return: CustomSticker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_customstickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_customstickers_idsticker_with_http_info(id, id_sticker, **kwargs)  # noqa: E501
            return data

    def get_members_id_customstickers_idsticker_with_http_info(self, id, id_sticker, **kwargs):  # noqa: E501
        """Get a Member's custom Sticker  # noqa: E501

        Get a Member's custom Sticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_customstickers_idsticker_with_http_info(id, id_sticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_sticker: The ID of the uploaded sticker (required)
        :param str fields: `all` or a comma-separated list of `scaled`, `url`
        :return: CustomSticker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_customstickers_idsticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_customstickers_idsticker`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `get_members_id_customstickers_idsticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers/{idSticker}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomSticker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Member  # noqa: E501

        Get a particular property of a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param MemberFields field: One of the member [fields](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_members_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Member  # noqa: E501

        Get a particular property of a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param MemberFields field: One of the member [fields](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_members_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_notification_channel_settings(self, id, **kwargs):  # noqa: E501
        """Get a Member's notification channel settings  # noqa: E501

        Get a member's notification channel settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_notification_channel_settings(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id3 id: The ID or username of the member (required)
        :return: list[NotificationChannelSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_notification_channel_settings_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_notification_channel_settings_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_notification_channel_settings_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Member's notification channel settings  # noqa: E501

        Get a member's notification channel settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_notification_channel_settings_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id3 id: The ID or username of the member (required)
        :return: list[NotificationChannelSettings]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_notification_channel_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_notification_channel_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notificationsChannelSettings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NotificationChannelSettings]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_notification_channel_settings_channel(self, id, channel, **kwargs):  # noqa: E501
        """Get blocked notification keys of Member on this channel  # noqa: E501

        Get blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_notification_channel_settings_channel(id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id4 id: The ID or username of the member (required)
        :param Channel channel: Channel to block notifications on (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_notification_channel_settings_channel_with_http_info(id, channel, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_notification_channel_settings_channel_with_http_info(id, channel, **kwargs)  # noqa: E501
            return data

    def get_members_id_notification_channel_settings_channel_with_http_info(self, id, channel, **kwargs):  # noqa: E501
        """Get blocked notification keys of Member on this channel  # noqa: E501

        Get blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_notification_channel_settings_channel_with_http_info(id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id4 id: The ID or username of the member (required)
        :param Channel channel: Channel to block notifications on (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_notification_channel_settings_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_notification_channel_settings_channel`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if ('channel' not in params or
                params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `get_members_id_notification_channel_settings_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'channel' in params:
            path_params['channel'] = params['channel']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notificationsChannelSettings/{channel}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationChannelSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_notifications(self, id, **kwargs):  # noqa: E501
        """Get Member's Notifications  # noqa: E501

        Get a member's notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_notifications(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param bool entities:
        :param bool display:
        :param str filter:
        :param str read_filter: One of: `all`, `read`, `unread`
        :param str fields: `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param int limit: Max 1000
        :param int page: Max 100
        :param str before: A notification ID
        :param str since: A notification ID
        :param bool member_creator:
        :param str member_creator_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Notification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_notifications_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_notifications_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_notifications_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Member's Notifications  # noqa: E501

        Get a member's notifications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_notifications_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param bool entities:
        :param bool display:
        :param str filter:
        :param str read_filter: One of: `all`, `read`, `unread`
        :param str fields: `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param int limit: Max 1000
        :param int page: Max 100
        :param str before: A notification ID
        :param str since: A notification ID
        :param bool member_creator:
        :param str member_creator_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Notification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entities', 'display', 'filter', 'read_filter', 'fields', 'limit', 'page', 'before', 'since', 'member_creator', 'member_creator_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_notifications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_notifications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'entities' in params:
            query_params.append(('entities', params['entities']))  # noqa: E501
        if 'display' in params:
            query_params.append(('display', params['display']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'read_filter' in params:
            query_params.append(('read_filter', params['read_filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Notification]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_organizations(self, id, **kwargs):  # noqa: E501
        """Get Member's Organizations  # noqa: E501

        Get a member's Workspaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_organizations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: One of: `all`, `members`, `none`, `public` (Note: `members` filters to only private Workspaces)
        :param OrganizationFields fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool paid_account: Whether or not to include paid account information in the returned workspace object
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_organizations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_organizations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_organizations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Member's Organizations  # noqa: E501

        Get a member's Workspaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_organizations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str filter: One of: `all`, `members`, `none`, `public` (Note: `members` filters to only private Workspaces)
        :param OrganizationFields fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool paid_account: Whether or not to include paid account information in the returned workspace object
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields', 'paid_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'paid_account' in params:
            query_params.append(('paid_account', params['paid_account']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/organizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Organization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_organizationsinvited(self, id, **kwargs):  # noqa: E501
        """Get Organizations a Member has been invited to  # noqa: E501

        Get a member's Workspaces they have been invited to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_organizationsinvited(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param OrganizationFields fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_organizationsinvited_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_organizationsinvited_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_organizationsinvited_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Organizations a Member has been invited to  # noqa: E501

        Get a member's Workspaces they have been invited to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_organizationsinvited_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param OrganizationFields fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_organizationsinvited" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_organizationsinvited`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/organizationsInvited', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Organization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_savedsearches(self, id, **kwargs):  # noqa: E501
        """Get Member's saved searched  # noqa: E501

        List the saved searches of a Member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_savedsearches(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[SavedSearch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_savedsearches_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_savedsearches_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_savedsearches_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Member's saved searched  # noqa: E501

        List the saved searches of a Member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_savedsearches_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :return: list[SavedSearch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_savedsearches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_savedsearches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SavedSearch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_savedsearches_idsearch(self, id, id_search, **kwargs):  # noqa: E501
        """Get a saved search  # noqa: E501

        Get a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_savedsearches_idsearch(id, id_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :return: SavedSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_savedsearches_idsearch_with_http_info(id, id_search, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_savedsearches_idsearch_with_http_info(id, id_search, **kwargs)  # noqa: E501
            return data

    def get_members_id_savedsearches_idsearch_with_http_info(self, id, id_search, **kwargs):  # noqa: E501
        """Get a saved search  # noqa: E501

        Get a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_savedsearches_idsearch_with_http_info(id, id_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :return: SavedSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_savedsearches_idsearch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_savedsearches_idsearch`")  # noqa: E501
        # verify the required parameter 'id_search' is set
        if ('id_search' not in params or
                params['id_search'] is None):
            raise ValueError("Missing the required parameter `id_search` when calling `get_members_id_savedsearches_idsearch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_search' in params:
            path_params['idSearch'] = params['id_search']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches/{idSearch}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SavedSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members_id_tokens(self, id, **kwargs):  # noqa: E501
        """Get Member's Tokens  # noqa: E501

        List a members app tokens  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_tokens(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param bool webhooks: Whether to include webhooks
        :return: list[Token]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_members_id_tokens_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_members_id_tokens_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_members_id_tokens_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Member's Tokens  # noqa: E501

        List a members app tokens  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_members_id_tokens_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param bool webhooks: Whether to include webhooks
        :return: list[Token]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'webhooks']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members_id_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_members_id_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'webhooks' in params:
            query_params.append(('webhooks', params['webhooks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/tokens', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Token]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_membersid(self, id, **kwargs):  # noqa: E501
        """Get a Member  # noqa: E501

        Get a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_membersid(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id id: The ID or username of the member (required)
        :param str actions: See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
        :param str boards: See the [Boards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource)
        :param str board_backgrounds: One of: `all`, `custom`, `default`, `none`, `premium`
        :param str boards_invited: `all` or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned
        :param BoardFields boards_invited_fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool board_stars: Whether to return the boardStars or not
        :param str cards: See the [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource) for additional options
        :param str custom_board_backgrounds: `all` or `none`
        :param str custom_emoji: `all` or `none`
        :param str custom_stickers: `all` or `none`
        :param MemberFields fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param str notifications: See the [Notifications Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource)
        :param str organizations: One of: `all`, `members`, `none`, `public`
        :param OrganizationFields organization_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool organization_paid_account: Whether or not to include paid account information in the returned workspace object
        :param str organizations_invited: One of: `all`, `members`, `none`, `public`
        :param OrganizationFields organizations_invited_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool paid_account: Whether or not to include paid account information in the returned member object
        :param bool saved_searches:
        :param str tokens: `all` or `none`
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_membersid_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_membersid_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_membersid_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Member  # noqa: E501

        Get a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_membersid_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id id: The ID or username of the member (required)
        :param str actions: See the [Actions Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#actions-nested-resource)
        :param str boards: See the [Boards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#boards-nested-resource)
        :param str board_backgrounds: One of: `all`, `custom`, `default`, `none`, `premium`
        :param str boards_invited: `all` or a comma-separated list of: closed, members, open, organization, pinned, public, starred, unpinned
        :param BoardFields boards_invited_fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool board_stars: Whether to return the boardStars or not
        :param str cards: See the [Cards Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#cards-nested-resource) for additional options
        :param str custom_board_backgrounds: `all` or `none`
        :param str custom_emoji: `all` or `none`
        :param str custom_stickers: `all` or `none`
        :param MemberFields fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param str notifications: See the [Notifications Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#notifications-nested-resource)
        :param str organizations: One of: `all`, `members`, `none`, `public`
        :param OrganizationFields organization_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool organization_paid_account: Whether or not to include paid account information in the returned workspace object
        :param str organizations_invited: One of: `all`, `members`, `none`, `public`
        :param OrganizationFields organizations_invited_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool paid_account: Whether or not to include paid account information in the returned member object
        :param bool saved_searches:
        :param str tokens: `all` or `none`
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'actions', 'boards', 'board_backgrounds', 'boards_invited', 'boards_invited_fields', 'board_stars', 'cards', 'custom_board_backgrounds', 'custom_emoji', 'custom_stickers', 'fields', 'notifications', 'organizations', 'organization_fields', 'organization_paid_account', 'organizations_invited', 'organizations_invited_fields', 'paid_account', 'saved_searches', 'tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_membersid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_membersid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'actions' in params:
            query_params.append(('actions', params['actions']))  # noqa: E501
        if 'boards' in params:
            query_params.append(('boards', params['boards']))  # noqa: E501
        if 'board_backgrounds' in params:
            query_params.append(('boardBackgrounds', params['board_backgrounds']))  # noqa: E501
        if 'boards_invited' in params:
            query_params.append(('boardsInvited', params['boards_invited']))  # noqa: E501
        if 'boards_invited_fields' in params:
            query_params.append(('boardsInvited_fields', params['boards_invited_fields']))  # noqa: E501
        if 'board_stars' in params:
            query_params.append(('boardStars', params['board_stars']))  # noqa: E501
        if 'cards' in params:
            query_params.append(('cards', params['cards']))  # noqa: E501
        if 'custom_board_backgrounds' in params:
            query_params.append(('customBoardBackgrounds', params['custom_board_backgrounds']))  # noqa: E501
        if 'custom_emoji' in params:
            query_params.append(('customEmoji', params['custom_emoji']))  # noqa: E501
        if 'custom_stickers' in params:
            query_params.append(('customStickers', params['custom_stickers']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'notifications' in params:
            query_params.append(('notifications', params['notifications']))  # noqa: E501
        if 'organizations' in params:
            query_params.append(('organizations', params['organizations']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'organization_paid_account' in params:
            query_params.append(('organization_paid_account', params['organization_paid_account']))  # noqa: E501
        if 'organizations_invited' in params:
            query_params.append(('organizationsInvited', params['organizations_invited']))  # noqa: E501
        if 'organizations_invited_fields' in params:
            query_params.append(('organizationsInvited_fields', params['organizations_invited_fields']))  # noqa: E501
        if 'paid_account' in params:
            query_params.append(('paid_account', params['paid_account']))  # noqa: E501
        if 'saved_searches' in params:
            query_params.append(('savedSearches', params['saved_searches']))  # noqa: E501
        if 'tokens' in params:
            query_params.append(('tokens', params['tokens']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id(self, id, **kwargs):  # noqa: E501
        """Get a Notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param bool board: Whether to include the board object
        :param BoardFields board_fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool card: Whether to include the card object
        :param CardFields card_fields: `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool display: Whether to include the display object with the results
        :param bool entities: Whether to include the entities object with the results
        :param NotificationFields fields: `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool list: Whether to include the list object
        :param bool member: Whether to include the member object
        :param MemberFields member_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool member_creator: Whether to include the member object of the creator
        :param MemberFields member_creator_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool organization: Whether to include the organization object
        :param OrganizationFields organization_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Notification  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param bool board: Whether to include the board object
        :param BoardFields board_fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool card: Whether to include the card object
        :param CardFields card_fields: `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool display: Whether to include the display object with the results
        :param bool entities: Whether to include the entities object with the results
        :param NotificationFields fields: `all` or a comma-separated list of notification [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool list: Whether to include the list object
        :param bool member: Whether to include the member object
        :param MemberFields member_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool member_creator: Whether to include the member object of the creator
        :param MemberFields member_creator_fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :param bool organization: Whether to include the organization object
        :param OrganizationFields organization_fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'board', 'board_fields', 'card', 'card_fields', 'display', 'entities', 'fields', 'list', 'member', 'member_fields', 'member_creator', 'member_creator_fields', 'organization', 'organization_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'board' in params:
            query_params.append(('board', params['board']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501
        if 'card' in params:
            query_params.append(('card', params['card']))  # noqa: E501
        if 'card_fields' in params:
            query_params.append(('card_fields', params['card_fields']))  # noqa: E501
        if 'display' in params:
            query_params.append(('display', params['display']))  # noqa: E501
        if 'entities' in params:
            query_params.append(('entities', params['entities']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'list' in params:
            query_params.append(('list', params['list']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'member_creator' in params:
            query_params.append(('memberCreator', params['member_creator']))  # noqa: E501
        if 'member_creator_fields' in params:
            query_params.append(('memberCreator_fields', params['member_creator_fields']))  # noqa: E501
        if 'organization' in params:
            query_params.append(('organization', params['organization']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id_board(self, id, **kwargs):  # noqa: E501
        """Get the Board a Notification is on  # noqa: E501

        Get the board a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_board(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param BoardFields fields: `all` or a comma-separated list of board[fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_board_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_board_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_board_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Board a Notification is on  # noqa: E501

        Get the board a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_board_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param BoardFields fields: `all` or a comma-separated list of board[fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id_board" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id_board`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/board', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id_card(self, id, **kwargs):  # noqa: E501
        """Get the Card a Notification is on  # noqa: E501

        Get the card a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_card(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param CardFields fields: `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_card_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_card_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_card_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Card a Notification is on  # noqa: E501

        Get the card a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_card_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param CardFields fields: `all` or a comma-separated list of card [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/card', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get a field of a Notification  # noqa: E501

        Get a specific property of a notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param NotificationFields field: A notification [field](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a field of a Notification  # noqa: E501

        Get a specific property of a notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param NotificationFields field: A notification [field](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_notifications_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id_list(self, id, **kwargs):  # noqa: E501
        """Get the List a Notification is on  # noqa: E501

        Get the list a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_list(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param ListFields fields: `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_list_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_list_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_list_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the List a Notification is on  # noqa: E501

        Get the list a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_list_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param ListFields fields: `all` or a comma-separated list of list [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id_membercreator(self, id, **kwargs):  # noqa: E501
        """Get the Member who created the Notification  # noqa: E501

        Get the member who created the notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_membercreator(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param MemberFields fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_membercreator_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_membercreator_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_membercreator_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Member who created the Notification  # noqa: E501

        Get the member who created the notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_membercreator_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param MemberFields fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id_membercreator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id_membercreator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/memberCreator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notifications_id_organization(self, id, **kwargs):  # noqa: E501
        """Get a Notification's associated Organization  # noqa: E501

        Get the organization a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_organization(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param OrganizationFields fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notifications_id_organization_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_notifications_id_organization_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_notifications_id_organization_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Notification's associated Organization  # noqa: E501

        Get the organization a notification is associated with  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notifications_id_organization_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param OrganizationFields fields: `all` or a comma-separated list of organization [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notifications_id_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_notifications_id_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id(self, id, **kwargs):  # noqa: E501
        """Get an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_actions(self, id, **kwargs):  # noqa: E501
        """Get Actions for Organization  # noqa: E501

        List the actions on a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_actions(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: list[Action]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_actions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_actions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_actions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Actions for Organization  # noqa: E501

        List the actions on a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_actions_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: list[Action]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_actions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Action]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_boards(self, id, **kwargs):  # noqa: E501
        """Get Boards in an Organization  # noqa: E501

        List the boards in a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_boards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param str filter: `all` or a comma-separated list of: `open`, `closed`, `members`, `organization`, `public`
        :param BoardFields fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_boards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_boards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_boards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Boards in an Organization  # noqa: E501

        List the boards in a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_boards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param str filter: `all` or a comma-separated list of: `open`, `closed`, `members`, `organization`, `public`
        :param BoardFields fields: `all` or a comma-separated list of board [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_boards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_boards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/boards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_exports(self, id, **kwargs):  # noqa: E501
        """Retrieve Organization's Exports  # noqa: E501

        Retrieve the exports that exist for the given organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_exports(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Workspace (required)
        :return: list[Export]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_exports_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_exports_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_exports_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve Organization's Exports  # noqa: E501

        Retrieve the exports that exist for the given organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_exports_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Workspace (required)
        :return: list[Export]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_exports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_exports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/exports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Export]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_field(self, id, field, **kwargs):  # noqa: E501
        """Get field on Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param OrganizationFields field: An organization [field](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get field on Organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param OrganizationFields field: An organization [field](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `get_organizations_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_members(self, id, **kwargs):  # noqa: E501
        """Get the Members of an Organization  # noqa: E501

        List the members in a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_members(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_members_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_members_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_members_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Members of an Organization  # noqa: E501

        List the members in a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_members_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_memberships(self, id, **kwargs):  # noqa: E501
        """Get Memberships of an Organization  # noqa: E501

        List the memberships of a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_memberships(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param str filter: `all` or a comma-separated list of: `active`, `admin`, `deactivated`, `me`, `normal`
        :param bool member: Whether to include the Member objects with the Memberships
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_memberships_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_memberships_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_memberships_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Memberships of an Organization  # noqa: E501

        List the memberships of a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_memberships_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param str filter: `all` or a comma-separated list of: `active`, `admin`, `deactivated`, `me`, `normal`
        :param bool member: Whether to include the Member objects with the Memberships
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_memberships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_memberships`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/memberships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_memberships_idmembership(self, id, id_membership, **kwargs):  # noqa: E501
        """Get a Membership of an Organization  # noqa: E501

        Get a single Membership for an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_memberships_idmembership(id, id_membership, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param TrelloID id_membership: The ID of the membership to load (required)
        :param bool member: Whether to include the Member object in the response
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_memberships_idmembership_with_http_info(id, id_membership, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_memberships_idmembership_with_http_info(id, id_membership, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_memberships_idmembership_with_http_info(self, id, id_membership, **kwargs):  # noqa: E501
        """Get a Membership of an Organization  # noqa: E501

        Get a single Membership for an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_memberships_idmembership_with_http_info(id, id_membership, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param TrelloID id_membership: The ID of the membership to load (required)
        :param bool member: Whether to include the Member object in the response
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_membership', 'member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_memberships_idmembership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_memberships_idmembership`")  # noqa: E501
        # verify the required parameter 'id_membership' is set
        if ('id_membership' not in params or
                params['id_membership'] is None):
            raise ValueError("Missing the required parameter `id_membership` when calling `get_organizations_id_memberships_idmembership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_membership' in params:
            path_params['idMembership'] = params['id_membership']  # noqa: E501

        query_params = []
        if 'member' in params:
            query_params.append(('member', params['member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/memberships/{idMembership}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_newbillableguests_idboard(self, id, id_board, **kwargs):  # noqa: E501
        """Get Organizations new billable guests  # noqa: E501

        Used to check whether the given board has new billable guests on it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_newbillableguests_idboard(id, id_board, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param TrelloID id_board: The ID of the board to check for new billable guests. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_newbillableguests_idboard_with_http_info(id, id_board, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_newbillableguests_idboard_with_http_info(id, id_board, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_newbillableguests_idboard_with_http_info(self, id, id_board, **kwargs):  # noqa: E501
        """Get Organizations new billable guests  # noqa: E501

        Used to check whether the given board has new billable guests on it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_newbillableguests_idboard_with_http_info(id, id_board, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param TrelloID id_board: The ID of the board to check for new billable guests. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_board']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_newbillableguests_idboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_newbillableguests_idboard`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `get_organizations_id_newbillableguests_idboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_board' in params:
            path_params['idBoard'] = params['id_board']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/newBillableGuests/{idBoard}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_plugindata(self, id, **kwargs):  # noqa: E501
        """Get the pluginData Scoped to Organization  # noqa: E501

        Get organization scoped pluginData on this Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_plugindata(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_plugindata_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_plugindata_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_plugindata_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the pluginData Scoped to Organization  # noqa: E501

        Get organization scoped pluginData on this Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_plugindata_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_plugindata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_plugindata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/pluginData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organizations_id_tags(self, id, **kwargs):  # noqa: E501
        """Get Tags of an Organization  # noqa: E501

        List the organization's collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id6 id: The ID or name of the Organization (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organizations_id_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_id_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_organizations_id_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Tags of an Organization  # noqa: E501

        List the organization's collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_id_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id6 id: The ID or name of the Organization (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organizations_id_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_organizations_id_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plugins_id(self, id, **kwargs):  # noqa: E501
        """Get a Plugin  # noqa: E501

        Get plugins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugins_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_plugins_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_plugins_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_plugins_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Plugin  # noqa: E501

        Get plugins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugins_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plugins_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_plugins_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/plugins/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Plugin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plugins_id_compliance_memberprivacy(self, id, **kwargs):  # noqa: E501
        """Get Plugin's Member privacy compliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugins_id_compliance_memberprivacy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Power-Up (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_plugins_id_compliance_memberprivacy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_plugins_id_compliance_memberprivacy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_plugins_id_compliance_memberprivacy_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Plugin's Member privacy compliance  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_plugins_id_compliance_memberprivacy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Power-Up (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plugins_id_compliance_memberprivacy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_plugins_id_compliance_memberprivacy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/plugins/{id}/compliance/memberPrivacy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search(self, query, **kwargs):  # noqa: E501
        """Search Trello  # noqa: E501

        Find what you're looking for in Trello  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The search query with a length of 1 to 16384 characters (required)
        :param IdBoards id_boards: `mine` or a comma-separated list of Board IDs
        :param str id_organizations: A comma-separated list of Organization IDs
        :param str id_cards: A comma-separated list of Card IDs
        :param str model_types: What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`
        :param str board_fields: all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`
        :param int boards_limit: The maximum number of boards returned. Maximum: 1000
        :param bool board_organization: Whether to include the parent organization with board results
        :param str card_fields: all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `email`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`
        :param int cards_limit: The maximum number of cards to return. Maximum: 1000
        :param float cards_page: The page of results for cards. Maximum: 100
        :param bool card_board: Whether to include the parent board with card results
        :param bool card_list: Whether to include the parent list with card results
        :param bool card_members: Whether to include member objects with card results
        :param bool card_stickers: Whether to include sticker objects with card results
        :param str card_attachments: Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments.
        :param str organization_fields: all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website
        :param int organizations_limit: The maximum number of Workspaces to return. Maximum 1000
        :param str member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :param int members_limit: The maximum number of members to return. Maximum 1000
        :param bool partial: By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\".
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_search_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search Trello  # noqa: E501

        Find what you're looking for in Trello  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The search query with a length of 1 to 16384 characters (required)
        :param IdBoards id_boards: `mine` or a comma-separated list of Board IDs
        :param str id_organizations: A comma-separated list of Organization IDs
        :param str id_cards: A comma-separated list of Card IDs
        :param str model_types: What type or types of Trello objects you want to search. all or a comma-separated list of: `actions`, `boards`, `cards`, `members`, `organizations`
        :param str board_fields: all or a comma-separated list of: `closed`, `dateLastActivity`, `dateLastView`, `desc`, `descData`, `idOrganization`, `invitations`, `invited`, `labelNames`, `memberships`, `name`, `pinned`, `powerUps`, `prefs`, `shortLink`, `shortUrl`, `starred`, `subscribed`, `url`
        :param int boards_limit: The maximum number of boards returned. Maximum: 1000
        :param bool board_organization: Whether to include the parent organization with board results
        :param str card_fields: all or a comma-separated list of: `badges`, `checkItemStates`, `closed`, `dateLastActivity`, `desc`, `descData`, `due`, `email`, `idAttachmentCover`, `idBoard`, `idChecklists`, `idLabels`, `idList`, `idMembers`, `idMembersVoted`, `idShort`, `labels`, `manualCoverAttachment`, `name`, `pos`, `shortLink`, `shortUrl`, `subscribed`, `url`
        :param int cards_limit: The maximum number of cards to return. Maximum: 1000
        :param float cards_page: The page of results for cards. Maximum: 100
        :param bool card_board: Whether to include the parent board with card results
        :param bool card_list: Whether to include the parent list with card results
        :param bool card_members: Whether to include member objects with card results
        :param bool card_stickers: Whether to include sticker objects with card results
        :param str card_attachments: Whether to include attachment objects with card results. A boolean value (true or false) or cover for only card cover attachments.
        :param str organization_fields: all or a comma-separated list of billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website
        :param int organizations_limit: The maximum number of Workspaces to return. Maximum 1000
        :param str member_fields: all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :param int members_limit: The maximum number of members to return. Maximum 1000
        :param bool partial: By default, Trello searches for each word in your query against exactly matching words within Member content. Specifying partial to be true means that we will look for content that starts with any of the words in your query.  If you are looking for a Card titled \"My Development Status Report\", by default you would need to search for \"Development\". If you have partial enabled, you will be able to search for \"dev\" but not \"velopment\".
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'id_boards', 'id_organizations', 'id_cards', 'model_types', 'board_fields', 'boards_limit', 'board_organization', 'card_fields', 'cards_limit', 'cards_page', 'card_board', 'card_list', 'card_members', 'card_stickers', 'card_attachments', 'organization_fields', 'organizations_limit', 'member_fields', 'members_limit', 'partial']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'id_boards' in params:
            query_params.append(('idBoards', params['id_boards']))  # noqa: E501
        if 'id_organizations' in params:
            query_params.append(('idOrganizations', params['id_organizations']))  # noqa: E501
        if 'id_cards' in params:
            query_params.append(('idCards', params['id_cards']))  # noqa: E501
        if 'model_types' in params:
            query_params.append(('modelTypes', params['model_types']))  # noqa: E501
        if 'board_fields' in params:
            query_params.append(('board_fields', params['board_fields']))  # noqa: E501
        if 'boards_limit' in params:
            query_params.append(('boards_limit', params['boards_limit']))  # noqa: E501
        if 'board_organization' in params:
            query_params.append(('board_organization', params['board_organization']))  # noqa: E501
        if 'card_fields' in params:
            query_params.append(('card_fields', params['card_fields']))  # noqa: E501
        if 'cards_limit' in params:
            query_params.append(('cards_limit', params['cards_limit']))  # noqa: E501
        if 'cards_page' in params:
            query_params.append(('cards_page', params['cards_page']))  # noqa: E501
        if 'card_board' in params:
            query_params.append(('card_board', params['card_board']))  # noqa: E501
        if 'card_list' in params:
            query_params.append(('card_list', params['card_list']))  # noqa: E501
        if 'card_members' in params:
            query_params.append(('card_members', params['card_members']))  # noqa: E501
        if 'card_stickers' in params:
            query_params.append(('card_stickers', params['card_stickers']))  # noqa: E501
        if 'card_attachments' in params:
            query_params.append(('card_attachments', params['card_attachments']))  # noqa: E501
        if 'organization_fields' in params:
            query_params.append(('organization_fields', params['organization_fields']))  # noqa: E501
        if 'organizations_limit' in params:
            query_params.append(('organizations_limit', params['organizations_limit']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501
        if 'members_limit' in params:
            query_params.append(('members_limit', params['members_limit']))  # noqa: E501
        if 'partial' in params:
            query_params.append(('partial', params['partial']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_members(self, query, **kwargs):  # noqa: E501
        """Search for Members  # noqa: E501

        Search for Trello members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_members(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search query 1 to 16384 characters long (required)
        :param int limit: The maximum number of results to return. Maximum of 20.
        :param TrelloID id_board:
        :param TrelloID id_organization:
        :param bool only_org_members:
        :return: list[Member]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_members_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_members_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_search_members_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search for Members  # noqa: E501

        Search for Trello members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_members_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search query 1 to 16384 characters long (required)
        :param int limit: The maximum number of results to return. Maximum of 20.
        :param TrelloID id_board:
        :param TrelloID id_organization:
        :param bool only_org_members:
        :return: list[Member]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'limit', 'id_board', 'id_organization', 'only_org_members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_search_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501
        if 'only_org_members' in params:
            query_params.append(('onlyOrgMembers', params['only_org_members']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/search/members/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Member]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tokens_token(self, token, **kwargs):  # noqa: E501
        """Get a Token  # noqa: E501

        Retrieve information about a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TokenFields fields: `all` or a comma-separated list of `dateCreated`, `dateExpires`, `idMember`, `identifier`, `permissions`
        :param bool webhooks: Determines whether to include webhooks.
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tokens_token_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tokens_token_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def get_tokens_token_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get a Token  # noqa: E501

        Retrieve information about a token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TokenFields fields: `all` or a comma-separated list of `dateCreated`, `dateExpires`, `idMember`, `identifier`, `permissions`
        :param bool webhooks: Determines whether to include webhooks.
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'fields', 'webhooks']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tokens_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_tokens_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'webhooks' in params:
            query_params.append(('webhooks', params['webhooks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Token',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tokens_token_member(self, token, **kwargs):  # noqa: E501
        """Get Token's Member  # noqa: E501

        Retrieve information about a token's owner by token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_member(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param MemberFields fields: `all` or a comma-separated list of valid fields for [Member Object](/cloud/trello/guides/rest-api/object-definitions/).
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tokens_token_member_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tokens_token_member_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def get_tokens_token_member_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get Token's Member  # noqa: E501

        Retrieve information about a token's owner by token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_member_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param MemberFields fields: `all` or a comma-separated list of valid fields for [Member Object](/cloud/trello/guides/rest-api/object-definitions/).
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tokens_token_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_tokens_token_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Member',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tokens_token_webhooks(self, token, **kwargs):  # noqa: E501
        """Get Webhooks for Token  # noqa: E501

        Retrieve all webhooks created with a Token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_webhooks(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: list[Webhook]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tokens_token_webhooks_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tokens_token_webhooks_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def get_tokens_token_webhooks_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get Webhooks for Token  # noqa: E501

        Retrieve all webhooks created with a Token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_webhooks_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :return: list[Webhook]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tokens_token_webhooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_tokens_token_webhooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Webhook]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tokens_token_webhooks_idwebhook(self, token, id_webhook, **kwargs):  # noqa: E501
        """Get a Webhook belonging to a Token  # noqa: E501

        Retrieve a webhook created with a Token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_webhooks_idwebhook(token, id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TrelloID id_webhook: ID of the [Webhooks](ref:webhooks) to retrieve. (required)
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tokens_token_webhooks_idwebhook_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tokens_token_webhooks_idwebhook_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
            return data

    def get_tokens_token_webhooks_idwebhook_with_http_info(self, token, id_webhook, **kwargs):  # noqa: E501
        """Get a Webhook belonging to a Token  # noqa: E501

        Retrieve a webhook created with a Token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tokens_token_webhooks_idwebhook_with_http_info(token, id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TrelloID id_webhook: ID of the [Webhooks](ref:webhooks) to retrieve. (required)
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'id_webhook']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tokens_token_webhooks_idwebhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_tokens_token_webhooks_idwebhook`")  # noqa: E501
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in params or
                params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `get_tokens_token_webhooks_idwebhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'id_webhook' in params:
            path_params['idWebhook'] = params['id_webhook']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks/{idWebhook}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_id(self, id, **kwargs):  # noqa: E501
        """Get Users of an Enterprise  # noqa: E501

        [BETA] - Get an enterprise's users. You can choose to retrieve licensed members, board guests, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param bool licensed: When true, returns members who possess a license for the corresponding Trello Enterprise; when false, returns members who do not. If unspecified, both licensed and unlicensed members will be returned.
        :param bool deactivated: When true, returns members who have been deactivated for the corresponding Trello Enterprise; when false, returns members who have not. If unspecified, both active and deactivated members will be returned.
        :param bool collaborator: When true, returns members who are guests on one or more boards in the corresponding Trello Enterprise (but do not possess a license); when false, returns members who are not. If unspecified, both guests and non-guests will be returned.
        :param bool managed: When true, returns members who are managed by the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both managed and unmanaged members will be returned.
        :param bool admin: When true, returns members who are administrators of the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both admin and non-admin members will be returned.
        :param str active_since: Returns only Trello users active since this date (inclusive).
        :param str inactive_since: Returns only Trello users active since this date (inclusive).
        :param str search: Returns members with email address or full name that start with the search value.
        :param str start_index: Cursor to return next set of results
        :return: list[Membership]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_users_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Users of an Enterprise  # noqa: E501

        [BETA] - Get an enterprise's users. You can choose to retrieve licensed members, board guests, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param bool licensed: When true, returns members who possess a license for the corresponding Trello Enterprise; when false, returns members who do not. If unspecified, both licensed and unlicensed members will be returned.
        :param bool deactivated: When true, returns members who have been deactivated for the corresponding Trello Enterprise; when false, returns members who have not. If unspecified, both active and deactivated members will be returned.
        :param bool collaborator: When true, returns members who are guests on one or more boards in the corresponding Trello Enterprise (but do not possess a license); when false, returns members who are not. If unspecified, both guests and non-guests will be returned.
        :param bool managed: When true, returns members who are managed by the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both managed and unmanaged members will be returned.
        :param bool admin: When true, returns members who are administrators of the corresponding Trello Enterprise; when false, returns members who are not. If unspecified, both admin and non-admin members will be returned.
        :param str active_since: Returns only Trello users active since this date (inclusive).
        :param str inactive_since: Returns only Trello users active since this date (inclusive).
        :param str search: Returns members with email address or full name that start with the search value.
        :param str start_index: Cursor to return next set of results
        :return: list[Membership]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'licensed', 'deactivated', 'collaborator', 'managed', 'admin', 'active_since', 'inactive_since', 'search', 'start_index']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_users_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'licensed' in params:
            query_params.append(('licensed', params['licensed']))  # noqa: E501
        if 'deactivated' in params:
            query_params.append(('deactivated', params['deactivated']))  # noqa: E501
        if 'collaborator' in params:
            query_params.append(('collaborator', params['collaborator']))  # noqa: E501
        if 'managed' in params:
            query_params.append(('managed', params['managed']))  # noqa: E501
        if 'admin' in params:
            query_params.append(('admin', params['admin']))  # noqa: E501
        if 'active_since' in params:
            query_params.append(('activeSince', params['active_since']))  # noqa: E501
        if 'inactive_since' in params:
            query_params.append(('inactiveSince', params['inactive_since']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'start_index' in params:
            query_params.append(('startIndex', params['start_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Membership]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webhooks_id(self, id, **kwargs):  # noqa: E501
        """Get a Webhook  # noqa: E501

        Get a webhook by ID. You must use the token query parameter and pass in the token the webhook was created under, or else you will encounter a 'webhook does not belong to token' error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhooks_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook to retrieve. (required)
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_webhooks_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_webhooks_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_webhooks_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a Webhook  # noqa: E501

        Get a webhook by ID. You must use the token query parameter and pass in the token the webhook was created under, or else you will encounter a 'webhook does not belong to token' error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webhooks_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook to retrieve. (required)
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webhooks_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_webhooks_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membersidavatar(self, id, file, **kwargs):  # noqa: E501
        """Create Avatar for Member  # noqa: E501

        Create a new avatar for a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membersidavatar(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str file: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membersidavatar_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.membersidavatar_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def membersidavatar_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Create Avatar for Member  # noqa: E501

        Create a new avatar for a member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membersidavatar_with_http_info(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str file: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membersidavatar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `membersidavatar`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `membersidavatar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/avatar', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membersidcustomboardbackgrounds1(self, id, file, **kwargs):  # noqa: E501
        """Create a new custom Board Background  # noqa: E501

        Upload a new custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membersidcustomboardbackgrounds1(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membersidcustomboardbackgrounds1_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.membersidcustomboardbackgrounds1_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def membersidcustomboardbackgrounds1_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Create a new custom Board Background  # noqa: E501

        Upload a new custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membersidcustomboardbackgrounds1_with_http_info(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membersidcustomboardbackgrounds1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `membersidcustomboardbackgrounds1`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `membersidcustomboardbackgrounds1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoardBackground',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def membersidcustomemojiidemoji(self, id, id_emoji, **kwargs):  # noqa: E501
        """Get a Member's custom Emoji  # noqa: E501

        Get a Member's custom Emoji  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membersidcustomemojiidemoji(id, id_emoji, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_emoji: The ID of the custom emoji (required)
        :param str fields: `all` or a comma-separated list of `name`, `url`
        :return: CustomEmoji
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.membersidcustomemojiidemoji_with_http_info(id, id_emoji, **kwargs)  # noqa: E501
        else:
            (data) = self.membersidcustomemojiidemoji_with_http_info(id, id_emoji, **kwargs)  # noqa: E501
            return data

    def membersidcustomemojiidemoji_with_http_info(self, id, id_emoji, **kwargs):  # noqa: E501
        """Get a Member's custom Emoji  # noqa: E501

        Get a Member's custom Emoji  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.membersidcustomemojiidemoji_with_http_info(id, id_emoji, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_emoji: The ID of the custom emoji (required)
        :param str fields: `all` or a comma-separated list of `name`, `url`
        :return: CustomEmoji
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_emoji', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method membersidcustomemojiidemoji" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `membersidcustomemojiidemoji`")  # noqa: E501
        # verify the required parameter 'id_emoji' is set
        if ('id_emoji' not in params or
                params['id_emoji'] is None):
            raise ValueError("Missing the required parameter `id_emoji` when calling `membersidcustomemojiidemoji`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_emoji' in params:
            path_params['idEmoji'] = params['id_emoji']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customEmoji/{idEmoji}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomEmoji',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def notificationsidmember(self, id, **kwargs):  # noqa: E501
        """Get the Member a Notification is about (not the creator)  # noqa: E501

        Get the member (not the creator) a notification is about  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notificationsidmember(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param MemberFields fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.notificationsidmember_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.notificationsidmember_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def notificationsidmember_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the Member a Notification is about (not the creator)  # noqa: E501

        Get the member (not the creator) a notification is about  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.notificationsidmember_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param MemberFields fields: `all` or a comma-separated list of member [fields](/cloud/trello/guides/rest-api/object-definitions/)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notificationsidmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `notificationsidmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/member', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_id_members_idmember_all(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member from an Organization and all Organization Boards  # noqa: E501

        Remove a member from a Workspace and from all Workspace boards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_members_idmember_all(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param TrelloID id_member: The ID of the member to remove from the Workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_id_members_idmember_all_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_id_members_idmember_all_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def organizations_id_members_idmember_all_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Remove a Member from an Organization and all Organization Boards  # noqa: E501

        Remove a member from a Workspace and from all Workspace boards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_id_members_idmember_all_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param TrelloID id_member: The ID of the member to remove from the Workspace (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_id_members_idmember_all" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `organizations_id_members_idmember_all`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `organizations_id_members_idmember_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}/all', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_actions_idaction_reactions(self, id_action, **kwargs):  # noqa: E501
        """Create Reaction for Action  # noqa: E501

        Adds a new reaction to an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_actions_idaction_reactions(id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the action (required)
        :param IdActionReactionsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_actions_idaction_reactions_with_http_info(id_action, **kwargs)  # noqa: E501
        else:
            (data) = self.post_actions_idaction_reactions_with_http_info(id_action, **kwargs)  # noqa: E501
            return data

    def post_actions_idaction_reactions_with_http_info(self, id_action, **kwargs):  # noqa: E501
        """Create Reaction for Action  # noqa: E501

        Adds a new reaction to an action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_actions_idaction_reactions_with_http_info(id_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_action: The ID of the action (required)
        :param IdActionReactionsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_action', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_actions_idaction_reactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `post_actions_idaction_reactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{idAction}/reactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards(self, name, **kwargs):  # noqa: E501
        """Create a Board  # noqa: E501

        Create a new board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The new name for the board. 1 to 16384 characters long. (required)
        :param bool default_labels: Determines whether to use the default set of labels.
        :param bool default_lists: Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if `idBoardSource` is provided.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param TrelloID id_organization: The id or name of the Workspace the board should belong to.
        :param TrelloID id_board_source: The id of a board to copy into the new board.
        :param str keep_from_source: To keep cards from the original board pass in the value `cards`
        :param str power_ups: The Power-Ups that should be enabled on the new board. One of: `all`, `calendar`, `cardAging`, `recap`, `voting`.
        :param str prefs_permission_level: The permissions level of the board. One of: `org`, `private`, `public`.
        :param str prefs_voting: Who can vote on this board. One of `disabled`, `members`, `observers`, `org`, `public`.
        :param str prefs_comments: Who can comment on cards on this board. One of: `disabled`, `members`, `observers`, `org`, `public`.
        :param str prefs_invitations: Determines what types of members can invite users to join. One of: `admins`, `members`.
        :param bool prefs_self_join: Determines whether users can join the boards themselves or whether they have to be invited.
        :param bool prefs_card_covers: Determines whether card covers are enabled.
        :param str prefs_background: The id of a custom background or one of: `blue`, `orange`, `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`.
        :param str prefs_card_aging: Determines the type of card aging that should take place on the board if card aging is enabled. One of: `pirate`, `regular`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def post_boards_with_http_info(self, name, **kwargs):  # noqa: E501
        """Create a Board  # noqa: E501

        Create a new board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The new name for the board. 1 to 16384 characters long. (required)
        :param bool default_labels: Determines whether to use the default set of labels.
        :param bool default_lists: Determines whether to add the default set of lists to a board (To Do, Doing, Done). It is ignored if `idBoardSource` is provided.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param TrelloID id_organization: The id or name of the Workspace the board should belong to.
        :param TrelloID id_board_source: The id of a board to copy into the new board.
        :param str keep_from_source: To keep cards from the original board pass in the value `cards`
        :param str power_ups: The Power-Ups that should be enabled on the new board. One of: `all`, `calendar`, `cardAging`, `recap`, `voting`.
        :param str prefs_permission_level: The permissions level of the board. One of: `org`, `private`, `public`.
        :param str prefs_voting: Who can vote on this board. One of `disabled`, `members`, `observers`, `org`, `public`.
        :param str prefs_comments: Who can comment on cards on this board. One of: `disabled`, `members`, `observers`, `org`, `public`.
        :param str prefs_invitations: Determines what types of members can invite users to join. One of: `admins`, `members`.
        :param bool prefs_self_join: Determines whether users can join the boards themselves or whether they have to be invited.
        :param bool prefs_card_covers: Determines whether card covers are enabled.
        :param str prefs_background: The id of a custom background or one of: `blue`, `orange`, `green`, `red`, `purple`, `pink`, `lime`, `sky`, `grey`.
        :param str prefs_card_aging: Determines the type of card aging that should take place on the board if card aging is enabled. One of: `pirate`, `regular`.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'default_labels', 'default_lists', 'desc', 'id_organization', 'id_board_source', 'keep_from_source', 'power_ups', 'prefs_permission_level', 'prefs_voting', 'prefs_comments', 'prefs_invitations', 'prefs_self_join', 'prefs_card_covers', 'prefs_background', 'prefs_card_aging']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_boards`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'default_labels' in params:
            query_params.append(('defaultLabels', params['default_labels']))  # noqa: E501
        if 'default_lists' in params:
            query_params.append(('defaultLists', params['default_lists']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501
        if 'id_board_source' in params:
            query_params.append(('idBoardSource', params['id_board_source']))  # noqa: E501
        if 'keep_from_source' in params:
            query_params.append(('keepFromSource', params['keep_from_source']))  # noqa: E501
        if 'power_ups' in params:
            query_params.append(('powerUps', params['power_ups']))  # noqa: E501
        if 'prefs_permission_level' in params:
            query_params.append(('prefs_permissionLevel', params['prefs_permission_level']))  # noqa: E501
        if 'prefs_voting' in params:
            query_params.append(('prefs_voting', params['prefs_voting']))  # noqa: E501
        if 'prefs_comments' in params:
            query_params.append(('prefs_comments', params['prefs_comments']))  # noqa: E501
        if 'prefs_invitations' in params:
            query_params.append(('prefs_invitations', params['prefs_invitations']))  # noqa: E501
        if 'prefs_self_join' in params:
            query_params.append(('prefs_selfJoin', params['prefs_self_join']))  # noqa: E501
        if 'prefs_card_covers' in params:
            query_params.append(('prefs_cardCovers', params['prefs_card_covers']))  # noqa: E501
        if 'prefs_background' in params:
            query_params.append(('prefs_background', params['prefs_background']))  # noqa: E501
        if 'prefs_card_aging' in params:
            query_params.append(('prefs_cardAging', params['prefs_card_aging']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_boardplugins(self, id, **kwargs):  # noqa: E501
        """Enable a Power-Up on a Board  # noqa: E501

        Enable a Power-Up on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_boardplugins(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Board (required)
        :param TrelloID id_plugin: The ID of the Power-Up to enable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_boardplugins_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_boardplugins_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_boards_id_boardplugins_with_http_info(self, id, **kwargs):  # noqa: E501
        """Enable a Power-Up on a Board  # noqa: E501

        Enable a Power-Up on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_boardplugins_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Board (required)
        :param TrelloID id_plugin: The ID of the Power-Up to enable
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_plugin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_boardplugins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_boardplugins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_plugin' in params:
            query_params.append(('idPlugin', params['id_plugin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/boardPlugins', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_calendarkey_generate(self, id, **kwargs):  # noqa: E501
        """Create a calendarKey for a Board  # noqa: E501

        Create a new board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_calendarkey_generate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_calendarkey_generate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_calendarkey_generate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_boards_id_calendarkey_generate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a calendarKey for a Board  # noqa: E501

        Create a new board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_calendarkey_generate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_calendarkey_generate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_calendarkey_generate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/calendarKey/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_emailkey_generate(self, id, **kwargs):  # noqa: E501
        """Create a emailKey for a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_emailkey_generate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_emailkey_generate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_emailkey_generate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_boards_id_emailkey_generate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a emailKey for a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_emailkey_generate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_emailkey_generate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_emailkey_generate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/emailKey/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_idtags(self, id, value, **kwargs):  # noqa: E501
        """Create a Tag for a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_idtags(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID value: The id of a tag from the organization to which this board belongs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_idtags_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_idtags_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def post_boards_id_idtags_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Create a Tag for a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_idtags_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID value: The id of a tag from the organization to which this board belongs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_idtags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_idtags`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `post_boards_id_idtags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/idTags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_labels(self, id, name, color, **kwargs):  # noqa: E501
        """Create a Label on a Board  # noqa: E501

        Create a new Label on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_labels(id, name, color, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the board to update (required)
        :param str name: The name of the label to be created. 1 to 16384 characters long. (required)
        :param str color: Sets the color of the new label. Valid values are a label color or `null`. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_labels_with_http_info(id, name, color, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_labels_with_http_info(id, name, color, **kwargs)  # noqa: E501
            return data

    def post_boards_id_labels_with_http_info(self, id, name, color, **kwargs):  # noqa: E501
        """Create a Label on a Board  # noqa: E501

        Create a new Label on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_labels_with_http_info(id, name, color, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the board to update (required)
        :param str name: The name of the label to be created. 1 to 16384 characters long. (required)
        :param str color: Sets the color of the new label. Valid values are a label color or `null`. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'color']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_labels`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_boards_id_labels`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `post_boards_id_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_lists(self, id, name, **kwargs):  # noqa: E501
        """Create a List on a Board  # noqa: E501

        Create a new List on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_lists(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param str name: The name of the list to be created. 1 to 16384 characters long. (required)
        :param str pos: Determines the position of the list. Valid values: `top`, `bottom`, or a positive number.
        :return: TrelloList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_lists_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_lists_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def post_boards_id_lists_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Create a List on a Board  # noqa: E501

        Create a new List on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_lists_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the board (required)
        :param str name: The name of the list to be created. 1 to 16384 characters long. (required)
        :param str pos: Determines the position of the list. Valid values: `top`, `bottom`, or a positive number.
        :return: TrelloList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_lists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_lists`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_boards_id_lists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrelloList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_boards_id_markedasviewed(self, id, **kwargs):  # noqa: E501
        """Mark Board as viewed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_markedasviewed(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_boards_id_markedasviewed_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_boards_id_markedasviewed_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_boards_id_markedasviewed_with_http_info(self, id, **kwargs):  # noqa: E501
        """Mark Board as viewed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_boards_id_markedasviewed_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_boards_id_markedasviewed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_boards_id_markedasviewed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/markedAsViewed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards(self, id_list, **kwargs):  # noqa: E501
        """Create a new Card  # noqa: E501

        Create a new card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards(id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_list: The ID of the list the card should be created in (required)
        :param str name: The name for the card
        :param str desc: The description for the card
        :param Pos pos: The position of the new card. `top`, `bottom`, or a positive float
        :param date due: A due date for the card
        :param date start: The start date of a card, or `null`
        :param bool due_complete:
        :param list[object] id_members: Comma-separated list of member IDs to add to the card
        :param list[object] id_labels: Comma-separated list of label IDs to add to the card
        :param str url_source: A URL starting with `http://` or `https://`
        :param str file_source:
        :param str mime_type: The mimeType of the attachment. Max length 256
        :param TrelloID id_card_source: The ID of a card to copy into the new card
        :param str keep_from_source: If using `idCardSource` you can specify which properties to copy over. `all` or comma-separated list of: `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers`
        :param str address: For use with/by the Map View
        :param str location_name: For use with/by the Map View
        :param str coordinates: For use with/by the Map View. Should take the form latitude,longitude
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_with_http_info(id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_with_http_info(id_list, **kwargs)  # noqa: E501
            return data

    def post_cards_with_http_info(self, id_list, **kwargs):  # noqa: E501
        """Create a new Card  # noqa: E501

        Create a new card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_with_http_info(id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_list: The ID of the list the card should be created in (required)
        :param str name: The name for the card
        :param str desc: The description for the card
        :param Pos pos: The position of the new card. `top`, `bottom`, or a positive float
        :param date due: A due date for the card
        :param date start: The start date of a card, or `null`
        :param bool due_complete:
        :param list[object] id_members: Comma-separated list of member IDs to add to the card
        :param list[object] id_labels: Comma-separated list of label IDs to add to the card
        :param str url_source: A URL starting with `http://` or `https://`
        :param str file_source:
        :param str mime_type: The mimeType of the attachment. Max length 256
        :param TrelloID id_card_source: The ID of a card to copy into the new card
        :param str keep_from_source: If using `idCardSource` you can specify which properties to copy over. `all` or comma-separated list of: `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers`
        :param str address: For use with/by the Map View
        :param str location_name: For use with/by the Map View
        :param str coordinates: For use with/by the Map View. Should take the form latitude,longitude
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_list', 'name', 'desc', 'pos', 'due', 'start', 'due_complete', 'id_members', 'id_labels', 'url_source', 'file_source', 'mime_type', 'id_card_source', 'keep_from_source', 'address', 'location_name', 'coordinates']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_list' is set
        if ('id_list' not in params or
                params['id_list'] is None):
            raise ValueError("Missing the required parameter `id_list` when calling `post_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'due' in params:
            query_params.append(('due', params['due']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'due_complete' in params:
            query_params.append(('dueComplete', params['due_complete']))  # noqa: E501
        if 'id_list' in params:
            query_params.append(('idList', params['id_list']))  # noqa: E501
        if 'id_members' in params:
            query_params.append(('idMembers', params['id_members']))  # noqa: E501
            collection_formats['idMembers'] = 'multi'  # noqa: E501
        if 'id_labels' in params:
            query_params.append(('idLabels', params['id_labels']))  # noqa: E501
            collection_formats['idLabels'] = 'multi'  # noqa: E501
        if 'url_source' in params:
            query_params.append(('urlSource', params['url_source']))  # noqa: E501
        if 'file_source' in params:
            query_params.append(('fileSource', params['file_source']))  # noqa: E501
        if 'mime_type' in params:
            query_params.append(('mimeType', params['mime_type']))  # noqa: E501
        if 'id_card_source' in params:
            query_params.append(('idCardSource', params['id_card_source']))  # noqa: E501
        if 'keep_from_source' in params:
            query_params.append(('keepFromSource', params['keep_from_source']))  # noqa: E501
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'location_name' in params:
            query_params.append(('locationName', params['location_name']))  # noqa: E501
        if 'coordinates' in params:
            query_params.append(('coordinates', params['coordinates']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Card',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_actions_comments(self, id, text, **kwargs):  # noqa: E501
        """Add a new comment to a Card  # noqa: E501

        Add a new comment to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_actions_comments(id, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str text: The comment (required)
        :return: Action
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_actions_comments_with_http_info(id, text, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_actions_comments_with_http_info(id, text, **kwargs)  # noqa: E501
            return data

    def post_cards_id_actions_comments_with_http_info(self, id, text, **kwargs):  # noqa: E501
        """Add a new comment to a Card  # noqa: E501

        Add a new comment to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_actions_comments_with_http_info(id, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str text: The comment (required)
        :return: Action
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_actions_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_actions_comments`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `post_cards_id_actions_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Action',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_attachments(self, id, **kwargs):  # noqa: E501
        """Create Attachment On Card  # noqa: E501

        Create an Attachment to a Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_attachments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str name: The name of the attachment. Max length 256.
        :param str file: The file to attach, as multipart/form-data
        :param str mime_type: The mimeType of the attachment. Max length 256
        :param str url: A URL to attach. Must start with `http://` or `https://`
        :param bool set_cover: Determines whether to use the new attachment as a cover for the Card.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_attachments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_attachments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_cards_id_attachments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create Attachment On Card  # noqa: E501

        Create an Attachment to a Card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_attachments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str name: The name of the attachment. Max length 256.
        :param str file: The file to attach, as multipart/form-data
        :param str mime_type: The mimeType of the attachment. Max length 256
        :param str url: A URL to attach. Must start with `http://` or `https://`
        :param bool set_cover: Determines whether to use the new attachment as a cover for the Card.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'file', 'mime_type', 'url', 'set_cover']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501
        if 'mime_type' in params:
            query_params.append(('mimeType', params['mime_type']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'set_cover' in params:
            query_params.append(('setCover', params['set_cover']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/attachments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_checklists(self, id, **kwargs):  # noqa: E501
        """Create Checklist on a Card  # noqa: E501

        Create a new checklist on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_checklists(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str name: The name of the checklist
        :param TrelloID id_checklist_source: The ID of a source checklist to copy into the new one
        :param str pos: The position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_checklists_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_checklists_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_cards_id_checklists_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create Checklist on a Card  # noqa: E501

        Create a new checklist on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_checklists_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str name: The name of the checklist
        :param TrelloID id_checklist_source: The ID of a source checklist to copy into the new one
        :param str pos: The position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'id_checklist_source', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_checklists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_checklists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id_checklist_source' in params:
            query_params.append(('idChecklistSource', params['id_checklist_source']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checklists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_idlabels(self, id, **kwargs):  # noqa: E501
        """Add a Label to a Card  # noqa: E501

        Add a label to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_idlabels(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID value: The ID of the label to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_idlabels_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_idlabels_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_cards_id_idlabels_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a Label to a Card  # noqa: E501

        Add a label to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_idlabels_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID value: The ID of the label to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_idlabels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_idlabels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idLabels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_idmembers(self, id, **kwargs):  # noqa: E501
        """Add a Member to a Card  # noqa: E501

        Add a member to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_idmembers(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID value: The ID of the Member to add to the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_idmembers_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_idmembers_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_cards_id_idmembers_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a Member to a Card  # noqa: E501

        Add a member to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_idmembers_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID value: The ID of the Member to add to the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_idmembers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_idmembers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/idMembers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_labels(self, id, color, **kwargs):  # noqa: E501
        """Create a new Label on a Card  # noqa: E501

        Create a new label for the board and add it to the given card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_labels(id, color, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str color: A valid label color or `null`. See [labels](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :param str name: A name for the label
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_labels_with_http_info(id, color, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_labels_with_http_info(id, color, **kwargs)  # noqa: E501
            return data

    def post_cards_id_labels_with_http_info(self, id, color, **kwargs):  # noqa: E501
        """Create a new Label on a Card  # noqa: E501

        Create a new label for the board and add it to the given card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_labels_with_http_info(id, color, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str color: A valid label color or `null`. See [labels](/cloud/trello/guides/rest-api/object-definitions/) (required)
        :param str name: A name for the label
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'color', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_labels`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `post_cards_id_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_markassociatednotificationsread(self, id, **kwargs):  # noqa: E501
        """Mark a Card's Notifications as read  # noqa: E501

        Mark notifications about this card as read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_markassociatednotificationsread(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_markassociatednotificationsread_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_markassociatednotificationsread_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_cards_id_markassociatednotificationsread_with_http_info(self, id, **kwargs):  # noqa: E501
        """Mark a Card's Notifications as read  # noqa: E501

        Mark notifications about this card as read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_markassociatednotificationsread_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_markassociatednotificationsread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_markassociatednotificationsread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/markAssociatedNotificationsRead', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cards_id_stickers(self, id, image, top, left, z_index, **kwargs):  # noqa: E501
        """Add a Sticker to a Card  # noqa: E501

        Add a sticker to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_stickers(id, image, top, left, z_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str image: For custom stickers, the id of the sticker. For default stickers, the string identifier (like 'taco-cool', see below) (required)
        :param float top: The top position of the sticker, from -60 to 100 (required)
        :param float left: The left position of the sticker, from -60 to 100 (required)
        :param int z_index: The z-index of the sticker (required)
        :param float rotate: The rotation of the sticker
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cards_id_stickers_with_http_info(id, image, top, left, z_index, **kwargs)  # noqa: E501
        else:
            (data) = self.post_cards_id_stickers_with_http_info(id, image, top, left, z_index, **kwargs)  # noqa: E501
            return data

    def post_cards_id_stickers_with_http_info(self, id, image, top, left, z_index, **kwargs):  # noqa: E501
        """Add a Sticker to a Card  # noqa: E501

        Add a sticker to a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cards_id_stickers_with_http_info(id, image, top, left, z_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str image: For custom stickers, the id of the sticker. For default stickers, the string identifier (like 'taco-cool', see below) (required)
        :param float top: The top position of the sticker, from -60 to 100 (required)
        :param float left: The left position of the sticker, from -60 to 100 (required)
        :param int z_index: The z-index of the sticker (required)
        :param float rotate: The rotation of the sticker
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'top', 'left', 'z_index', 'rotate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cards_id_stickers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_cards_id_stickers`")  # noqa: E501
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `post_cards_id_stickers`")  # noqa: E501
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `post_cards_id_stickers`")  # noqa: E501
        # verify the required parameter 'left' is set
        if ('left' not in params or
                params['left'] is None):
            raise ValueError("Missing the required parameter `left` when calling `post_cards_id_stickers`")  # noqa: E501
        # verify the required parameter 'z_index' is set
        if ('z_index' not in params or
                params['z_index'] is None):
            raise ValueError("Missing the required parameter `z_index` when calling `post_cards_id_stickers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'image' in params:
            query_params.append(('image', params['image']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'left' in params:
            query_params.append(('left', params['left']))  # noqa: E501
        if 'z_index' in params:
            query_params.append(('zIndex', params['z_index']))  # noqa: E501
        if 'rotate' in params:
            query_params.append(('rotate', params['rotate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_checklists(self, id_card, **kwargs):  # noqa: E501
        """Create a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_checklists(id_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_card: The ID of the Card that the checklist should be added to. (required)
        :param str name: The name of the checklist. Should be a string of length 1 to 16384.
        :param PosStringOrNumber pos: The position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
        :param TrelloID id_checklist_source: The ID of a checklist to copy into the new checklist.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_checklists_with_http_info(id_card, **kwargs)  # noqa: E501
        else:
            (data) = self.post_checklists_with_http_info(id_card, **kwargs)  # noqa: E501
            return data

    def post_checklists_with_http_info(self, id_card, **kwargs):  # noqa: E501
        """Create a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_checklists_with_http_info(id_card, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_card: The ID of the Card that the checklist should be added to. (required)
        :param str name: The name of the checklist. Should be a string of length 1 to 16384.
        :param PosStringOrNumber pos: The position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
        :param TrelloID id_checklist_source: The ID of a checklist to copy into the new checklist.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_card', 'name', 'pos', 'id_checklist_source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_checklists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `post_checklists`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id_card' in params:
            query_params.append(('idCard', params['id_card']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'id_checklist_source' in params:
            query_params.append(('idChecklistSource', params['id_checklist_source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_checklists_id_checkitems(self, id, name, **kwargs):  # noqa: E501
        """Create Checkitem on Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_checklists_id_checkitems(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str name: The name of the new check item on the checklist. Should be a string of length 1 to 16384. (required)
        :param PosStringOrNumber pos: The position of the check item in the checklist. One of: `top`, `bottom`, or a positive number.
        :param bool checked: Determines whether the check item is already checked when created.
        :param date due: A due date for the checkitem
        :param float due_reminder: A dueReminder for the due date on the checkitem
        :param TrelloID id_member: An ID of a member resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_checklists_id_checkitems_with_http_info(id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_checklists_id_checkitems_with_http_info(id, name, **kwargs)  # noqa: E501
            return data

    def post_checklists_id_checkitems_with_http_info(self, id, name, **kwargs):  # noqa: E501
        """Create Checkitem on Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_checklists_id_checkitems_with_http_info(id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str name: The name of the new check item on the checklist. Should be a string of length 1 to 16384. (required)
        :param PosStringOrNumber pos: The position of the check item in the checklist. One of: `top`, `bottom`, or a positive number.
        :param bool checked: Determines whether the check item is already checked when created.
        :param date due: A due date for the checkitem
        :param float due_reminder: A dueReminder for the due date on the checkitem
        :param TrelloID id_member: An ID of a member resource.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'pos', 'checked', 'due', 'due_reminder', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_checklists_id_checkitems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_checklists_id_checkitems`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_checklists_id_checkitems`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'checked' in params:
            query_params.append(('checked', params['checked']))  # noqa: E501
        if 'due' in params:
            query_params.append(('due', params['due']))  # noqa: E501
        if 'due_reminder' in params:
            query_params.append(('dueReminder', params['due_reminder']))  # noqa: E501
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/checkItems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_customfields(self, **kwargs):  # noqa: E501
        """Create a new Custom Field on a Board  # noqa: E501

        Create a new Custom Field on a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_customfields(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomFieldsBody body:
        :return: CustomField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_customfields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_customfields_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_customfields_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new Custom Field on a Board  # noqa: E501

        Create a new Custom Field on a board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_customfields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomFieldsBody body:
        :return: CustomField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_customfields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_customfields_id_options(self, id, **kwargs):  # noqa: E501
        """Get Options of Custom Field drop down  # noqa: E501

        Get the options of a drop down Custom Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_customfields_id_options(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_customfields_id_options_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_customfields_id_options_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_customfields_id_options_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Options of Custom Field drop down  # noqa: E501

        Get the options of a drop down Custom Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_customfields_id_options_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the customfield. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_customfields_id_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_customfields_id_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}/options', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_enterprises_id_tokens(self, id, **kwargs):  # noqa: E501
        """Create an auth Token for an Enterprise.  # noqa: E501

        Create an auth Token for an Enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_enterprises_id_tokens(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str expiration: One of: `1hour`, `1day`, `30days`, `never`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_enterprises_id_tokens_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_enterprises_id_tokens_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_enterprises_id_tokens_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create an auth Token for an Enterprise.  # noqa: E501

        Create an auth Token for an Enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_enterprises_id_tokens_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the enterprise to retrieve. (required)
        :param str expiration: One of: `1hour`, `1day`, `30days`, `never`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'expiration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_enterprises_id_tokens" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_enterprises_id_tokens`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expiration' in params:
            query_params.append(('expiration', params['expiration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/tokens', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_labels(self, name, color, id_board, **kwargs):  # noqa: E501
        """Create a Label  # noqa: E501

        Create a new Label on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_labels(name, color, id_board, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name for the label (required)
        :param Color color: The color for the label. (required)
        :param str id_board: The ID of the Board to create the Label on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_labels_with_http_info(name, color, id_board, **kwargs)  # noqa: E501
        else:
            (data) = self.post_labels_with_http_info(name, color, id_board, **kwargs)  # noqa: E501
            return data

    def post_labels_with_http_info(self, name, color, id_board, **kwargs):  # noqa: E501
        """Create a Label  # noqa: E501

        Create a new Label on a Board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_labels_with_http_info(name, color, id_board, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name for the label (required)
        :param Color color: The color for the label. (required)
        :param str id_board: The ID of the Board to create the Label on. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'color', 'id_board']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_labels`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `post_labels`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `post_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_lists(self, name, id_board, **kwargs):  # noqa: E501
        """Create a new List  # noqa: E501

        Create a new List on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lists(name, id_board, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name for the list (required)
        :param TrelloID id_board: The long ID of the board the list should be created on (required)
        :param TrelloID id_list_source: ID of the List to copy into the new List
        :param Pos3 pos: Position of the list. `top`, `bottom`, or a positive floating point number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_lists_with_http_info(name, id_board, **kwargs)  # noqa: E501
        else:
            (data) = self.post_lists_with_http_info(name, id_board, **kwargs)  # noqa: E501
            return data

    def post_lists_with_http_info(self, name, id_board, **kwargs):  # noqa: E501
        """Create a new List  # noqa: E501

        Create a new List on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lists_with_http_info(name, id_board, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name for the list (required)
        :param TrelloID id_board: The long ID of the board the list should be created on (required)
        :param TrelloID id_list_source: ID of the List to copy into the new List
        :param Pos3 pos: Position of the list. `top`, `bottom`, or a positive floating point number
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'id_board', 'id_list_source', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_lists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_lists`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `post_lists`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'id_list_source' in params:
            query_params.append(('idListSource', params['id_list_source']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_lists_id_archiveallcards(self, id, **kwargs):  # noqa: E501
        """Archive all Cards in List  # noqa: E501

        Archive all cards in a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lists_id_archiveallcards(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_lists_id_archiveallcards_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_lists_id_archiveallcards_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_lists_id_archiveallcards_with_http_info(self, id, **kwargs):  # noqa: E501
        """Archive all Cards in List  # noqa: E501

        Archive all cards in a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lists_id_archiveallcards_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_lists_id_archiveallcards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_lists_id_archiveallcards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/archiveAllCards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_lists_id_moveallcards(self, id, id_board, id_list, **kwargs):  # noqa: E501
        """Move all Cards in List  # noqa: E501

        Move all Cards in a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lists_id_moveallcards(id, id_board, id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param TrelloID id_board: The ID of the board the cards should be moved to (required)
        :param TrelloID id_list: The ID of the list that the cards should be moved to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_lists_id_moveallcards_with_http_info(id, id_board, id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.post_lists_id_moveallcards_with_http_info(id, id_board, id_list, **kwargs)  # noqa: E501
            return data

    def post_lists_id_moveallcards_with_http_info(self, id, id_board, id_list, **kwargs):  # noqa: E501
        """Move all Cards in List  # noqa: E501

        Move all Cards in a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lists_id_moveallcards_with_http_info(id, id_board, id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param TrelloID id_board: The ID of the board the cards should be moved to (required)
        :param TrelloID id_list: The ID of the list that the cards should be moved to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_board', 'id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_lists_id_moveallcards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_lists_id_moveallcards`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `post_lists_id_moveallcards`")  # noqa: E501
        # verify the required parameter 'id_list' is set
        if ('id_list' not in params or
                params['id_list'] is None):
            raise ValueError("Missing the required parameter `id_list` when calling `post_lists_id_moveallcards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'id_list' in params:
            query_params.append(('idList', params['id_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/moveAllCards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_members_id_boardbackgrounds1(self, id, file, **kwargs):  # noqa: E501
        """Upload new boardBackground for Member  # noqa: E501

        Upload a new boardBackground  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_boardbackgrounds1(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_members_id_boardbackgrounds1_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.post_members_id_boardbackgrounds1_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def post_members_id_boardbackgrounds1_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Upload new boardBackground for Member  # noqa: E501

        Upload a new boardBackground  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_boardbackgrounds1_with_http_info(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_members_id_boardbackgrounds1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_members_id_boardbackgrounds1`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `post_members_id_boardbackgrounds1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_members_id_boardstars(self, id, id_board, pos, **kwargs):  # noqa: E501
        """Create Star for Board  # noqa: E501

        Star a new board on behalf of a Member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_boardstars(id, id_board, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id1 id: The ID or username of the member (required)
        :param TrelloID id_board: The ID of the board to star (required)
        :param PosStringOrNumber pos: The position of the newly starred board. `top`, `bottom`, or a positive float. (required)
        :return: list[BoardStars]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_members_id_boardstars_with_http_info(id, id_board, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.post_members_id_boardstars_with_http_info(id, id_board, pos, **kwargs)  # noqa: E501
            return data

    def post_members_id_boardstars_with_http_info(self, id, id_board, pos, **kwargs):  # noqa: E501
        """Create Star for Board  # noqa: E501

        Star a new board on behalf of a Member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_boardstars_with_http_info(id, id_board, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id1 id: The ID or username of the member (required)
        :param TrelloID id_board: The ID of the board to star (required)
        :param PosStringOrNumber pos: The position of the newly starred board. `top`, `bottom`, or a positive float. (required)
        :return: list[BoardStars]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_board', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_members_id_boardstars" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_members_id_boardstars`")  # noqa: E501
        # verify the required parameter 'id_board' is set
        if ('id_board' not in params or
                params['id_board'] is None):
            raise ValueError("Missing the required parameter `id_board` when calling `post_members_id_boardstars`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in params or
                params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `post_members_id_boardstars`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BoardStars]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_members_id_customemoji(self, id, file, name, **kwargs):  # noqa: E501
        """Create custom Emoji for Member  # noqa: E501

        Create a new custom Emoji  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_customemoji(id, file, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :param str name: Name for the emoji. 2 - 64 characters (required)
        :return: CustomEmoji
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_members_id_customemoji_with_http_info(id, file, name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_members_id_customemoji_with_http_info(id, file, name, **kwargs)  # noqa: E501
            return data

    def post_members_id_customemoji_with_http_info(self, id, file, name, **kwargs):  # noqa: E501
        """Create custom Emoji for Member  # noqa: E501

        Create a new custom Emoji  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_customemoji_with_http_info(id, file, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :param str name: Name for the emoji. 2 - 64 characters (required)
        :return: CustomEmoji
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_members_id_customemoji" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_members_id_customemoji`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `post_members_id_customemoji`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_members_id_customemoji`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customEmoji', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomEmoji',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_members_id_customstickers(self, id, file, **kwargs):  # noqa: E501
        """Create custom Sticker for Member  # noqa: E501

        Upload a new custom sticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_customstickers(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :return: CustomSticker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_members_id_customstickers_with_http_info(id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.post_members_id_customstickers_with_http_info(id, file, **kwargs)  # noqa: E501
            return data

    def post_members_id_customstickers_with_http_info(self, id, file, **kwargs):  # noqa: E501
        """Create custom Sticker for Member  # noqa: E501

        Upload a new custom sticker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_customstickers_with_http_info(id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str file: (required)
        :return: CustomSticker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_members_id_customstickers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_members_id_customstickers`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `post_members_id_customstickers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customStickers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomSticker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_members_id_onetimemessagesdismissed(self, id, value, **kwargs):  # noqa: E501
        """Dismiss a message for Member  # noqa: E501

        Dismiss a message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_onetimemessagesdismissed(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID value: The message to dismiss (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_members_id_onetimemessagesdismissed_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.post_members_id_onetimemessagesdismissed_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def post_members_id_onetimemessagesdismissed_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Dismiss a message for Member  # noqa: E501

        Dismiss a message  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_onetimemessagesdismissed_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID value: The message to dismiss (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_members_id_onetimemessagesdismissed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_members_id_onetimemessagesdismissed`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `post_members_id_onetimemessagesdismissed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/oneTimeMessagesDismissed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_members_id_savedsearches(self, id, name, query, pos, **kwargs):  # noqa: E501
        """Create saved Search for Member  # noqa: E501

        Create a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_savedsearches(id, name, query, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str name: The name for the saved search (required)
        :param str query: The search query (required)
        :param PosStringOrNumber pos: The position of the saved search. `top`, `bottom`, or a positive float. (required)
        :return: SavedSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_members_id_savedsearches_with_http_info(id, name, query, pos, **kwargs)  # noqa: E501
        else:
            (data) = self.post_members_id_savedsearches_with_http_info(id, name, query, pos, **kwargs)  # noqa: E501
            return data

    def post_members_id_savedsearches_with_http_info(self, id, name, query, pos, **kwargs):  # noqa: E501
        """Create saved Search for Member  # noqa: E501

        Create a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_members_id_savedsearches_with_http_info(id, name, query, pos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str name: The name for the saved search (required)
        :param str query: The search query (required)
        :param PosStringOrNumber pos: The position of the saved search. `top`, `bottom`, or a positive float. (required)
        :return: SavedSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'query', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_members_id_savedsearches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_members_id_savedsearches`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_members_id_savedsearches`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `post_members_id_savedsearches`")  # noqa: E501
        # verify the required parameter 'pos' is set
        if ('pos' not in params or
                params['pos'] is None):
            raise ValueError("Missing the required parameter `pos` when calling `post_members_id_savedsearches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SavedSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_notifications_all_read(self, **kwargs):  # noqa: E501
        """Mark all Notifications as read  # noqa: E501

        Mark all notifications as read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_notifications_all_read(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool read: Boolean to specify whether to mark as read or unread (defaults to `true`, marking as read)
        :param list[TrelloID] ids: A comma-seperated list of IDs. Allows specifying an array of notification IDs to change the read state for. This will become useful as we add grouping of notifications to the UI, with a single button to mark all notifications in the group as read/unread.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_notifications_all_read_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_notifications_all_read_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_notifications_all_read_with_http_info(self, **kwargs):  # noqa: E501
        """Mark all Notifications as read  # noqa: E501

        Mark all notifications as read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_notifications_all_read_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool read: Boolean to specify whether to mark as read or unread (defaults to `true`, marking as read)
        :param list[TrelloID] ids: A comma-seperated list of IDs. Allows specifying an array of notification IDs to change the read state for. This will become useful as we add grouping of notifications to the UI, with a single button to mark all notifications in the group as read/unread.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['read', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_notifications_all_read" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'read' in params:
            query_params.append(('read', params['read']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/all/read', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_organizations(self, display_name, **kwargs):  # noqa: E501
        """Create a new Organization  # noqa: E501

        Create a new Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations(display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str display_name: The name to display for the Organization (required)
        :param str desc: The description for the organizations
        :param str name: A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. If the name contains invalid characters, they will be removed. If the name conflicts with an existing name, a new name will be substituted.
        :param str website: A URL starting with `http://` or `https://`
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_organizations_with_http_info(display_name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organizations_with_http_info(display_name, **kwargs)  # noqa: E501
            return data

    def post_organizations_with_http_info(self, display_name, **kwargs):  # noqa: E501
        """Create a new Organization  # noqa: E501

        Create a new Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_with_http_info(display_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str display_name: The name to display for the Organization (required)
        :param str desc: The description for the organizations
        :param str name: A string with a length of at least 3. Only lowercase letters, underscores, and numbers are allowed. If the name contains invalid characters, they will be removed. If the name conflicts with an existing name, a new name will be substituted.
        :param str website: A URL starting with `http://` or `https://`
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_name', 'desc', 'name', 'website']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_name' is set
        if ('display_name' not in params or
                params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `post_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'display_name' in params:
            query_params.append(('displayName', params['display_name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'website' in params:
            query_params.append(('website', params['website']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_organizations_id_exports(self, id, **kwargs):  # noqa: E501
        """Create Export for Organizations  # noqa: E501

        Kick off CSV export for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_id_exports(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Workspace (required)
        :param bool attachments: Whether the CSV should include attachments or not.
        :return: Export
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_organizations_id_exports_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organizations_id_exports_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_organizations_id_exports_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create Export for Organizations  # noqa: E501

        Kick off CSV export for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_id_exports_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Workspace (required)
        :param bool attachments: Whether the CSV should include attachments or not.
        :return: Export
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attachments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_id_exports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_organizations_id_exports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attachments' in params:
            query_params.append(('attachments', params['attachments']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/exports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Export',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_organizations_id_logo(self, id, **kwargs):  # noqa: E501
        """Update logo for an Organization  # noqa: E501

        Set the logo image for a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_id_logo(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Workspace (required)
        :param str file: Image file for the logo
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_organizations_id_logo_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organizations_id_logo_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_organizations_id_logo_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update logo for an Organization  # noqa: E501

        Set the logo image for a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_id_logo_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Workspace (required)
        :param str file: Image file for the logo
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_id_logo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_organizations_id_logo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'file' in params:
            query_params.append(('file', params['file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/logo', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_organizations_id_tags(self, id, **kwargs):  # noqa: E501
        """Create a Tag in Organization  # noqa: E501

        Create a Tag in an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_id_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id6 id: The ID or name of the Organization (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_organizations_id_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organizations_id_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_organizations_id_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a Tag in Organization  # noqa: E501

        Create a Tag in an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organizations_id_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id6 id: The ID or name of the Organization (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_organizations_id_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_organizations_id_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_plugins_idplugin_listing(self, id_plugin, **kwargs):  # noqa: E501
        """Create a Listing for Plugin  # noqa: E501

        Create a new listing for a given locale for your Power-Up  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_plugins_idplugin_listing(id_plugin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_plugin: The ID of the Power-Up for which you are creating a new listing. (required)
        :param IdPluginListingBody body:
        :return: PluginListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_plugins_idplugin_listing_with_http_info(id_plugin, **kwargs)  # noqa: E501
        else:
            (data) = self.post_plugins_idplugin_listing_with_http_info(id_plugin, **kwargs)  # noqa: E501
            return data

    def post_plugins_idplugin_listing_with_http_info(self, id_plugin, **kwargs):  # noqa: E501
        """Create a Listing for Plugin  # noqa: E501

        Create a new listing for a given locale for your Power-Up  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_plugins_idplugin_listing_with_http_info(id_plugin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_plugin: The ID of the Power-Up for which you are creating a new listing. (required)
        :param IdPluginListingBody body:
        :return: PluginListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_plugin', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_plugins_idplugin_listing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_plugin' is set
        if ('id_plugin' not in params or
                params['id_plugin'] is None):
            raise ValueError("Missing the required parameter `id_plugin` when calling `post_plugins_idplugin_listing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_plugin' in params:
            path_params['idPlugin'] = params['id_plugin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/plugins/{idPlugin}/listing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginListing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_tokens_token_webhooks(self, token, callback_url, id_model, **kwargs):  # noqa: E501
        """Create Webhooks for Token  # noqa: E501

        Create a new webhook for a Token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tokens_token_webhooks(token, callback_url, id_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str callback_url: The URL that the webhook should POST information to. (required)
        :param TrelloID id_model: ID of the object to create a webhook on. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_tokens_token_webhooks_with_http_info(token, callback_url, id_model, **kwargs)  # noqa: E501
        else:
            (data) = self.post_tokens_token_webhooks_with_http_info(token, callback_url, id_model, **kwargs)  # noqa: E501
            return data

    def post_tokens_token_webhooks_with_http_info(self, token, callback_url, id_model, **kwargs):  # noqa: E501
        """Create Webhooks for Token  # noqa: E501

        Create a new webhook for a Token.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_tokens_token_webhooks_with_http_info(token, callback_url, id_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str callback_url: The URL that the webhook should POST information to. (required)
        :param TrelloID id_model: ID of the object to create a webhook on. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'callback_url', 'id_model', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_tokens_token_webhooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `post_tokens_token_webhooks`")  # noqa: E501
        # verify the required parameter 'callback_url' is set
        if ('callback_url' not in params or
                params['callback_url'] is None):
            raise ValueError("Missing the required parameter `callback_url` when calling `post_tokens_token_webhooks`")  # noqa: E501
        # verify the required parameter 'id_model' is set
        if ('id_model' not in params or
                params['id_model'] is None):
            raise ValueError("Missing the required parameter `id_model` when calling `post_tokens_token_webhooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_webhooks(self, callback_url, id_model, **kwargs):  # noqa: E501
        """Create a Webhook  # noqa: E501

        Create a new webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_webhooks(callback_url, id_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str callback_url: A valid URL that is reachable with a `HEAD` and `POST` request. (required)
        :param TrelloID id_model: ID of the model to be monitored (required)
        :param str description: A string with a length from `0` to `16384`.
        :param bool active: Determines whether the webhook is active and sending `POST` requests.
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_webhooks_with_http_info(callback_url, id_model, **kwargs)  # noqa: E501
        else:
            (data) = self.post_webhooks_with_http_info(callback_url, id_model, **kwargs)  # noqa: E501
            return data

    def post_webhooks_with_http_info(self, callback_url, id_model, **kwargs):  # noqa: E501
        """Create a Webhook  # noqa: E501

        Create a new webhook.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_webhooks_with_http_info(callback_url, id_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str callback_url: A valid URL that is reachable with a `HEAD` and `POST` request. (required)
        :param TrelloID id_model: ID of the model to be monitored (required)
        :param str description: A string with a length from `0` to `16384`.
        :param bool active: Determines whether the webhook is active and sending `POST` requests.
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callback_url', 'id_model', 'description', 'active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_webhooks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callback_url' is set
        if ('callback_url' not in params or
                params['callback_url'] is None):
            raise ValueError("Missing the required parameter `callback_url` when calling `post_webhooks`")  # noqa: E501
        # verify the required parameter 'id_model' is set
        if ('id_model' not in params or
                params['id_model'] is None):
            raise ValueError("Missing the required parameter `id_model` when calling `post_webhooks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_actions_id(self, id, text, **kwargs):  # noqa: E501
        """Update an Action  # noqa: E501

        Update a specific Action. Only comment actions can be updated. Used to edit the content of a comment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_actions_id(id, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_actions_id_with_http_info(id, text, **kwargs)  # noqa: E501
        else:
            (data) = self.put_actions_id_with_http_info(id, text, **kwargs)  # noqa: E501
            return data

    def put_actions_id_with_http_info(self, id, text, **kwargs):  # noqa: E501
        """Update an Action  # noqa: E501

        Update a specific Action. Only comment actions can be updated. Used to edit the content of a comment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_actions_id_with_http_info(id, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Action (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_actions_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_actions_id`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `put_actions_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_actions_id_text(self, id, value, **kwargs):  # noqa: E501
        """Update a Comment Action  # noqa: E501

        Update a comment action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_actions_id_text(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action to update (required)
        :param str value: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_actions_id_text_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_actions_id_text_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_actions_id_text_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update a Comment Action  # noqa: E501

        Update a comment action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_actions_id_text_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the action to update (required)
        :param str value: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_actions_id_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_actions_id_text`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_actions_id_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/actions/{id}/text', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id(self, id, **kwargs):  # noqa: E501
        """Update a Board  # noqa: E501

        Update an existing board by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: (required)
        :param str name: The new name for the board. 1 to 16384 characters long.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param bool closed: Whether the board is closed
        :param TrelloID subscribed: Whether the acting user is subscribed to the board
        :param str id_organization: The id of the Workspace the board should be moved to
        :param str prefspermission_level: One of: org, private, public
        :param bool prefsself_join: Whether Workspace members can join the board themselves
        :param bool prefscard_covers: Whether card covers should be displayed on this board
        :param bool prefshide_votes: Determines whether the Voting Power-Up should hide who voted on cards or not.
        :param str prefsinvitations: Who can invite people to this board. One of: admins, members
        :param str prefsvoting: Who can vote on this board. One of disabled, members, observers, org, public
        :param str prefscomments: Who can comment on cards on this board. One of: disabled, members, observers, org, public
        :param str prefsbackground: The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey
        :param str prefscard_aging: One of: pirate, regular
        :param bool prefscalendar_feed_enabled: Determines whether the calendar feed is enabled or not.
        :param str label_namesgreen: Name for the green label. 1 to 16384 characters long
        :param str label_namesyellow: Name for the yellow label. 1 to 16384 characters long
        :param str label_namesorange: Name for the orange label. 1 to 16384 characters long
        :param str label_namesred: Name for the red label. 1 to 16384 characters long
        :param str label_namespurple: Name for the purple label. 1 to 16384 characters long
        :param str label_namesblue: Name for the blue label. 1 to 16384 characters long
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_boards_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Board  # noqa: E501

        Update an existing board by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: (required)
        :param str name: The new name for the board. 1 to 16384 characters long.
        :param str desc: A new description for the board, 0 to 16384 characters long
        :param bool closed: Whether the board is closed
        :param TrelloID subscribed: Whether the acting user is subscribed to the board
        :param str id_organization: The id of the Workspace the board should be moved to
        :param str prefspermission_level: One of: org, private, public
        :param bool prefsself_join: Whether Workspace members can join the board themselves
        :param bool prefscard_covers: Whether card covers should be displayed on this board
        :param bool prefshide_votes: Determines whether the Voting Power-Up should hide who voted on cards or not.
        :param str prefsinvitations: Who can invite people to this board. One of: admins, members
        :param str prefsvoting: Who can vote on this board. One of disabled, members, observers, org, public
        :param str prefscomments: Who can comment on cards on this board. One of: disabled, members, observers, org, public
        :param str prefsbackground: The id of a custom background or one of: blue, orange, green, red, purple, pink, lime, sky, grey
        :param str prefscard_aging: One of: pirate, regular
        :param bool prefscalendar_feed_enabled: Determines whether the calendar feed is enabled or not.
        :param str label_namesgreen: Name for the green label. 1 to 16384 characters long
        :param str label_namesyellow: Name for the yellow label. 1 to 16384 characters long
        :param str label_namesorange: Name for the orange label. 1 to 16384 characters long
        :param str label_namesred: Name for the red label. 1 to 16384 characters long
        :param str label_namespurple: Name for the purple label. 1 to 16384 characters long
        :param str label_namesblue: Name for the blue label. 1 to 16384 characters long
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'desc', 'closed', 'subscribed', 'id_organization', 'prefspermission_level', 'prefsself_join', 'prefscard_covers', 'prefshide_votes', 'prefsinvitations', 'prefsvoting', 'prefscomments', 'prefsbackground', 'prefscard_aging', 'prefscalendar_feed_enabled', 'label_namesgreen', 'label_namesyellow', 'label_namesorange', 'label_namesred', 'label_namespurple', 'label_namesblue']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'closed' in params:
            query_params.append(('closed', params['closed']))  # noqa: E501
        if 'subscribed' in params:
            query_params.append(('subscribed', params['subscribed']))  # noqa: E501
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501
        if 'prefspermission_level' in params:
            query_params.append(('prefs/permissionLevel', params['prefspermission_level']))  # noqa: E501
        if 'prefsself_join' in params:
            query_params.append(('prefs/selfJoin', params['prefsself_join']))  # noqa: E501
        if 'prefscard_covers' in params:
            query_params.append(('prefs/cardCovers', params['prefscard_covers']))  # noqa: E501
        if 'prefshide_votes' in params:
            query_params.append(('prefs/hideVotes', params['prefshide_votes']))  # noqa: E501
        if 'prefsinvitations' in params:
            query_params.append(('prefs/invitations', params['prefsinvitations']))  # noqa: E501
        if 'prefsvoting' in params:
            query_params.append(('prefs/voting', params['prefsvoting']))  # noqa: E501
        if 'prefscomments' in params:
            query_params.append(('prefs/comments', params['prefscomments']))  # noqa: E501
        if 'prefsbackground' in params:
            query_params.append(('prefs/background', params['prefsbackground']))  # noqa: E501
        if 'prefscard_aging' in params:
            query_params.append(('prefs/cardAging', params['prefscard_aging']))  # noqa: E501
        if 'prefscalendar_feed_enabled' in params:
            query_params.append(('prefs/calendarFeedEnabled', params['prefscalendar_feed_enabled']))  # noqa: E501
        if 'label_namesgreen' in params:
            query_params.append(('labelNames/green', params['label_namesgreen']))  # noqa: E501
        if 'label_namesyellow' in params:
            query_params.append(('labelNames/yellow', params['label_namesyellow']))  # noqa: E501
        if 'label_namesorange' in params:
            query_params.append(('labelNames/orange', params['label_namesorange']))  # noqa: E501
        if 'label_namesred' in params:
            query_params.append(('labelNames/red', params['label_namesred']))  # noqa: E501
        if 'label_namespurple' in params:
            query_params.append(('labelNames/purple', params['label_namespurple']))  # noqa: E501
        if 'label_namesblue' in params:
            query_params.append(('labelNames/blue', params['label_namesblue']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_members(self, email, id, **kwargs):  # noqa: E501
        """Invite Member to Board via email  # noqa: E501

        Invite a Member to a Board via their email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_members(email, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of a user to add as a member of the board. (required)
        :param TrelloID id: The ID of the board (required)
        :param IdMembersBody body:
        :param str type: Valid values: admin, normal, observer. Determines what type of member the user being added should be of the board.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_members_with_http_info(email, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_members_with_http_info(email, id, **kwargs)  # noqa: E501
            return data

    def put_boards_id_members_with_http_info(self, email, id, **kwargs):  # noqa: E501
        """Invite Member to Board via email  # noqa: E501

        Invite a Member to a Board via their email address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_members_with_http_info(email, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: The email address of a user to add as a member of the board. (required)
        :param TrelloID id: The ID of the board (required)
        :param IdMembersBody body:
        :param str type: Valid values: admin, normal, observer. Determines what type of member the user being added should be of the board.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'id', 'body', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `put_boards_id_members`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_members_idmember(self, id, id_member, type, **kwargs):  # noqa: E501
        """Add a Member to a Board  # noqa: E501

        Add a member to the board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_members_idmember(id, id_member, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID id_member: The id of the member to add to the board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member this user will be on the board. (required)
        :param bool allow_billable_guest: Optional param that allows organization admins to add multi-board guests onto a board.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_members_idmember_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_members_idmember_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
            return data

    def put_boards_id_members_idmember_with_http_info(self, id, id_member, type, **kwargs):  # noqa: E501
        """Add a Member to a Board  # noqa: E501

        Add a member to the board.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_members_idmember_with_http_info(id, id_member, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID id_member: The id of the member to add to the board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member this user will be on the board. (required)
        :param bool allow_billable_guest: Optional param that allows organization admins to add multi-board guests onto a board.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'type', 'allow_billable_guest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_members_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_members_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `put_boards_id_members_idmember`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_boards_id_members_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'allow_billable_guest' in params:
            query_params.append(('allowBillableGuest', params['allow_billable_guest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/members/{idMember}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_memberships_idmembership(self, id, id_membership, type, **kwargs):  # noqa: E501
        """Update Membership of Member on a Board  # noqa: E501

        Update an existing board by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_memberships_idmembership(id, id_membership, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID id_membership: The id of a membership that should be added to this board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member that this membership will be to this board. (required)
        :param str member_fields: Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_memberships_idmembership_with_http_info(id, id_membership, type, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_memberships_idmembership_with_http_info(id, id_membership, type, **kwargs)  # noqa: E501
            return data

    def put_boards_id_memberships_idmembership_with_http_info(self, id, id_membership, type, **kwargs):  # noqa: E501
        """Update Membership of Member on a Board  # noqa: E501

        Update an existing board by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_memberships_idmembership_with_http_info(id, id_membership, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID id_membership: The id of a membership that should be added to this board. (required)
        :param str type: One of: admin, normal, observer. Determines the type of member that this membership will be to this board. (required)
        :param str member_fields: Valid values: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_membership', 'type', 'member_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_memberships_idmembership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_memberships_idmembership`")  # noqa: E501
        # verify the required parameter 'id_membership' is set
        if ('id_membership' not in params or
                params['id_membership'] is None):
            raise ValueError("Missing the required parameter `id_membership` when calling `put_boards_id_memberships_idmembership`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_boards_id_memberships_idmembership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_membership' in params:
            path_params['idMembership'] = params['id_membership']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'member_fields' in params:
            query_params.append(('member_fields', params['member_fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/memberships/{idMembership}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_my_prefs_showlistguide(self, id, value, **kwargs):  # noqa: E501
        """Update showListGuide Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showlistguide(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show the list guide. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_my_prefs_showlistguide_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_my_prefs_showlistguide_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_my_prefs_showlistguide_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update showListGuide Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showlistguide_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show the list guide. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_my_prefs_showlistguide" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_my_prefs_showlistguide`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_my_prefs_showlistguide`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showListGuide', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_my_prefs_showsidebar(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebar Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebar(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show the side bar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_my_prefs_showsidebar_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_my_prefs_showsidebar_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_my_prefs_showsidebar_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebar Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebar_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show the side bar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_my_prefs_showsidebar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_my_prefs_showsidebar`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_my_prefs_showsidebar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebar', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_my_prefs_showsidebaractivity(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebarActivity Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebaractivity(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show sidebar activity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_my_prefs_showsidebaractivity_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_my_prefs_showsidebaractivity_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_my_prefs_showsidebaractivity_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebarActivity Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebaractivity_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show sidebar activity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_my_prefs_showsidebaractivity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_my_prefs_showsidebaractivity`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_my_prefs_showsidebaractivity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebarActivity', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_my_prefs_showsidebarboardactions(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebarBoardActions Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebarboardactions(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show the sidebar board actions. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_my_prefs_showsidebarboardactions_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_my_prefs_showsidebarboardactions_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_my_prefs_showsidebarboardactions_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebarBoardActions Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebarboardactions_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show the sidebar board actions. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_my_prefs_showsidebarboardactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_my_prefs_showsidebarboardactions`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_my_prefs_showsidebarboardactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebarBoardActions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_my_prefs_showsidebarmembers(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebarMembers Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebarmembers(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show members of the board in the sidebar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_my_prefs_showsidebarmembers_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_my_prefs_showsidebarmembers_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_my_prefs_showsidebarmembers_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update showSidebarMembers Pref on a Board  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_my_prefs_showsidebarmembers_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param bool value: Determines whether to show members of the board in the sidebar. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_my_prefs_showsidebarmembers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_my_prefs_showsidebarmembers`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_my_prefs_showsidebarmembers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/showSidebarMembers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_myprefs_emailposition(self, id, value, **kwargs):  # noqa: E501
        """Update emailPosition Pref on a Board  # noqa: E501

        Update emailPosition Pref on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_myprefs_emailposition(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param str value: Valid values: bottom, top. Determines the position of the email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_myprefs_emailposition_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_myprefs_emailposition_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_myprefs_emailposition_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update emailPosition Pref on a Board  # noqa: E501

        Update emailPosition Pref on a Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_myprefs_emailposition_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param str value: Valid values: bottom, top. Determines the position of the email address. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_myprefs_emailposition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_myprefs_emailposition`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_myprefs_emailposition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/emailPosition', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_boards_id_myprefs_idemaillist(self, id, value, **kwargs):  # noqa: E501
        """Update idEmailList Pref on a Board  # noqa: E501

        Change the default list that email-to-board cards are created in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_myprefs_idemaillist(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID value: The id of an email list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_boards_id_myprefs_idemaillist_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_boards_id_myprefs_idemaillist_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_boards_id_myprefs_idemaillist_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Update idEmailList Pref on a Board  # noqa: E501

        Change the default list that email-to-board cards are created in.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_boards_id_myprefs_idemaillist_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The id of the board to update (required)
        :param TrelloID value: The id of an email list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_boards_id_myprefs_idemaillist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_boards_id_myprefs_idemaillist`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_boards_id_myprefs_idemaillist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/boards/{id}/myPrefs/idEmailList', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_id(self, id, **kwargs):  # noqa: E501
        """Update a Card  # noqa: E501

        Update a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str name: The new name for the card
        :param str desc: The new description for the card
        :param bool closed: Whether the card should be archived (closed: true)
        :param TrelloID id_members: Comma-separated list of member IDs
        :param TrelloID id_attachment_cover: The ID of the image attachment the card should use as its cover, or null for none
        :param TrelloID id_list: The ID of the list the card should be in
        :param TrelloID id_labels: Comma-separated list of label IDs
        :param TrelloID id_board: The ID of the board the card should be on
        :param Pos1 pos: The position of the card in its list. `top`, `bottom`, or a positive float
        :param date due: When the card is due, or `null`
        :param date start: The start date of a card, or `null`
        :param bool due_complete: Whether the due date should be marked complete
        :param bool subscribed: Whether the member is should be subscribed to the card
        :param str address: For use with/by the Map View
        :param str location_name: For use with/by the Map View
        :param str coordinates: For use with/by the Map View. Should be latitude,longitude
        :param Cover cover: Updates the card's cover  | Option | Values | About |  |--------|--------|-------|  | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |  | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.  | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.  | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |  | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |    `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time.     On the brightness options, setting it to light will make the text on the card cover dark:  ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)    And vice versa, setting it to dark will make the text on the card cover light:   ![](/cloud/trello/images/rest/cards/cover-brightness-light.png) 
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_cards_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Card  # noqa: E501

        Update a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param str name: The new name for the card
        :param str desc: The new description for the card
        :param bool closed: Whether the card should be archived (closed: true)
        :param TrelloID id_members: Comma-separated list of member IDs
        :param TrelloID id_attachment_cover: The ID of the image attachment the card should use as its cover, or null for none
        :param TrelloID id_list: The ID of the list the card should be in
        :param TrelloID id_labels: Comma-separated list of label IDs
        :param TrelloID id_board: The ID of the board the card should be on
        :param Pos1 pos: The position of the card in its list. `top`, `bottom`, or a positive float
        :param date due: When the card is due, or `null`
        :param date start: The start date of a card, or `null`
        :param bool due_complete: Whether the due date should be marked complete
        :param bool subscribed: Whether the member is should be subscribed to the card
        :param str address: For use with/by the Map View
        :param str location_name: For use with/by the Map View
        :param str coordinates: For use with/by the Map View. Should be latitude,longitude
        :param Cover cover: Updates the card's cover  | Option | Values | About |  |--------|--------|-------|  | color | `pink`, `yellow`, `lime`, `blue`, `black`, `orange`, `red`, `purple`, `sky`, `green` | Makes the cover a solid color . |  | brightness | `dark`, `light` | Determines whether the text on the cover should be dark or light.  | url | An unsplash URL: https://images.unsplash.com | Used if making an image the cover. Only Unsplash URLs work.  | idAttachment | ID of an attachment on the card | Used if setting an attached image as the cover. |  | size | `normal`, `full` | Determines whether to show the card name on the cover, or below it. |    `brightness` can be sent alongside any of the other parameters, but all of the other parameters are mutually exclusive; you can not have the cover be a `color` and an `idAttachment` at the same time.     On the brightness options, setting it to light will make the text on the card cover dark:  ![](/cloud/trello/images/rest/cards/cover-brightness-dark.png)    And vice versa, setting it to dark will make the text on the card cover light:   ![](/cloud/trello/images/rest/cards/cover-brightness-light.png) 
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'desc', 'closed', 'id_members', 'id_attachment_cover', 'id_list', 'id_labels', 'id_board', 'pos', 'due', 'start', 'due_complete', 'subscribed', 'address', 'location_name', 'coordinates', 'cover']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_cards_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'closed' in params:
            query_params.append(('closed', params['closed']))  # noqa: E501
        if 'id_members' in params:
            query_params.append(('idMembers', params['id_members']))  # noqa: E501
        if 'id_attachment_cover' in params:
            query_params.append(('idAttachmentCover', params['id_attachment_cover']))  # noqa: E501
        if 'id_list' in params:
            query_params.append(('idList', params['id_list']))  # noqa: E501
        if 'id_labels' in params:
            query_params.append(('idLabels', params['id_labels']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'due' in params:
            query_params.append(('due', params['due']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'due_complete' in params:
            query_params.append(('dueComplete', params['due_complete']))  # noqa: E501
        if 'subscribed' in params:
            query_params.append(('subscribed', params['subscribed']))  # noqa: E501
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'location_name' in params:
            query_params.append(('locationName', params['location_name']))  # noqa: E501
        if 'coordinates' in params:
            query_params.append(('coordinates', params['coordinates']))  # noqa: E501
        if 'cover' in params:
            query_params.append(('cover', params['cover']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Card',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_id_actions_idaction_comments(self, id, id_action, text, **kwargs):  # noqa: E501
        """Update Comment Action on a Card  # noqa: E501

        Update an existing comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_actions_idaction_comments(id, id_action, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_action: The ID of the comment action to update (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_id_actions_idaction_comments_with_http_info(id, id_action, text, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_id_actions_idaction_comments_with_http_info(id, id_action, text, **kwargs)  # noqa: E501
            return data

    def put_cards_id_actions_idaction_comments_with_http_info(self, id, id_action, text, **kwargs):  # noqa: E501
        """Update Comment Action on a Card  # noqa: E501

        Update an existing comment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_actions_idaction_comments_with_http_info(id, id_action, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_action: The ID of the comment action to update (required)
        :param str text: The new text for the comment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_action', 'text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_id_actions_idaction_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_cards_id_actions_idaction_comments`")  # noqa: E501
        # verify the required parameter 'id_action' is set
        if ('id_action' not in params or
                params['id_action'] is None):
            raise ValueError("Missing the required parameter `id_action` when calling `put_cards_id_actions_idaction_comments`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `put_cards_id_actions_idaction_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_action' in params:
            path_params['idAction'] = params['id_action']  # noqa: E501

        query_params = []
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/actions/{idAction}/comments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_id_checkitem_idcheckitem(self, id, id_check_item, **kwargs):  # noqa: E501
        """Update a checkItem on a Card  # noqa: E501

        Update an item in a checklist on a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_checkitem_idcheckitem(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checkitem (required)
        :param str name: The new name for the checklist item
        :param str state: One of: `complete`, `incomplete`
        :param TrelloID id_checklist: The ID of the checklist this item is in
        :param PosStringOrNumber pos: `top`, `bottom`, or a positive float
        :param date due: A due date for the checkitem
        :param float due_reminder: A dueReminder for the due date on the checkitem
        :param TrelloID id_member: The ID of the member to remove from the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, **kwargs)  # noqa: E501
            return data

    def put_cards_id_checkitem_idcheckitem_with_http_info(self, id, id_check_item, **kwargs):  # noqa: E501
        """Update a checkItem on a Card  # noqa: E501

        Update an item in a checklist on a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_checkitem_idcheckitem_with_http_info(id, id_check_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checkitem (required)
        :param str name: The new name for the checklist item
        :param str state: One of: `complete`, `incomplete`
        :param TrelloID id_checklist: The ID of the checklist this item is in
        :param PosStringOrNumber pos: `top`, `bottom`, or a positive float
        :param date due: A due date for the checkitem
        :param float due_reminder: A dueReminder for the due date on the checkitem
        :param TrelloID id_member: The ID of the member to remove from the card
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_check_item', 'name', 'state', 'id_checklist', 'pos', 'due', 'due_reminder', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_id_checkitem_idcheckitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_cards_id_checkitem_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `put_cards_id_checkitem_idcheckitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'id_checklist' in params:
            query_params.append(('idChecklist', params['id_checklist']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'due' in params:
            query_params.append(('due', params['due']))  # noqa: E501
        if 'due_reminder' in params:
            query_params.append(('dueReminder', params['due_reminder']))  # noqa: E501
        if 'id_member' in params:
            query_params.append(('idMember', params['id_member']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/checkItem/{idCheckItem}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_id_stickers_idsticker(self, id, id_sticker, top, left, z_index, **kwargs):  # noqa: E501
        """Update a Sticker on a Card  # noqa: E501

        Update a sticker on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_stickers_idsticker(id, id_sticker, top, left, z_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_sticker: The ID of the sticker (required)
        :param float top: The top position of the sticker, from -60 to 100 (required)
        :param float left: The left position of the sticker, from -60 to 100 (required)
        :param int z_index: The z-index of the sticker (required)
        :param float rotate: The rotation of the sticker
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_id_stickers_idsticker_with_http_info(id, id_sticker, top, left, z_index, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_id_stickers_idsticker_with_http_info(id, id_sticker, top, left, z_index, **kwargs)  # noqa: E501
            return data

    def put_cards_id_stickers_idsticker_with_http_info(self, id, id_sticker, top, left, z_index, **kwargs):  # noqa: E501
        """Update a Sticker on a Card  # noqa: E501

        Update a sticker on a card  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_id_stickers_idsticker_with_http_info(id, id_sticker, top, left, z_index, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Card (required)
        :param TrelloID id_sticker: The ID of the sticker (required)
        :param float top: The top position of the sticker, from -60 to 100 (required)
        :param float left: The left position of the sticker, from -60 to 100 (required)
        :param int z_index: The z-index of the sticker (required)
        :param float rotate: The rotation of the sticker
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_sticker', 'top', 'left', 'z_index', 'rotate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_id_stickers_idsticker" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_cards_id_stickers_idsticker`")  # noqa: E501
        # verify the required parameter 'id_sticker' is set
        if ('id_sticker' not in params or
                params['id_sticker'] is None):
            raise ValueError("Missing the required parameter `id_sticker` when calling `put_cards_id_stickers_idsticker`")  # noqa: E501
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `put_cards_id_stickers_idsticker`")  # noqa: E501
        # verify the required parameter 'left' is set
        if ('left' not in params or
                params['left'] is None):
            raise ValueError("Missing the required parameter `left` when calling `put_cards_id_stickers_idsticker`")  # noqa: E501
        # verify the required parameter 'z_index' is set
        if ('z_index' not in params or
                params['z_index'] is None):
            raise ValueError("Missing the required parameter `z_index` when calling `put_cards_id_stickers_idsticker`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_sticker' in params:
            path_params['idSticker'] = params['id_sticker']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501
        if 'left' in params:
            query_params.append(('left', params['left']))  # noqa: E501
        if 'z_index' in params:
            query_params.append(('zIndex', params['z_index']))  # noqa: E501
        if 'rotate' in params:
            query_params.append(('rotate', params['rotate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{id}/stickers/{idSticker}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem(self, id_card, id_check_item, id_checklist, **kwargs):  # noqa: E501
        """Update Checkitem on Checklist on Card  # noqa: E501

        Update an item in a checklist on a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem(id_card, id_check_item, id_checklist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_card: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checklist item to update (required)
        :param TrelloID id_checklist: The ID of the item to update. (required)
        :param PosStringOrNumber pos: `top`, `bottom`, or a positive float
        :return: CheckItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem_with_http_info(id_card, id_check_item, id_checklist, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem_with_http_info(id_card, id_check_item, id_checklist, **kwargs)  # noqa: E501
            return data

    def put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem_with_http_info(self, id_card, id_check_item, id_checklist, **kwargs):  # noqa: E501
        """Update Checkitem on Checklist on Card  # noqa: E501

        Update an item in a checklist on a card.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem_with_http_info(id_card, id_check_item, id_checklist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_card: The ID of the Card (required)
        :param TrelloID id_check_item: The ID of the checklist item to update (required)
        :param TrelloID id_checklist: The ID of the item to update. (required)
        :param PosStringOrNumber pos: `top`, `bottom`, or a positive float
        :return: CheckItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_card', 'id_check_item', 'id_checklist', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_check_item' is set
        if ('id_check_item' not in params or
                params['id_check_item'] is None):
            raise ValueError("Missing the required parameter `id_check_item` when calling `put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem`")  # noqa: E501
        # verify the required parameter 'id_checklist' is set
        if ('id_checklist' not in params or
                params['id_checklist'] is None):
            raise ValueError("Missing the required parameter `id_checklist` when calling `put_cards_idcard_checklist_idchecklist_checkitem_idcheckitem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_card' in params:
            path_params['idCard'] = params['id_card']  # noqa: E501
        if 'id_check_item' in params:
            path_params['idCheckItem'] = params['id_check_item']  # noqa: E501
        if 'id_checklist' in params:
            path_params['idChecklist'] = params['id_checklist']  # noqa: E501

        query_params = []
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CheckItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_idcard_customfield_idcustomfield_item(self, id_card, id_custom_field, **kwargs):  # noqa: E501
        """Update Custom Field item on Card  # noqa: E501

        Setting, updating, and removing the value for a Custom Field on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_idcard_customfield_idcustomfield_item(id_card, id_custom_field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_card: ID of the card that the Custom Field value should be set/updated for (required)
        :param TrelloID id_custom_field: ID of the Custom Field on the card. (required)
        :param IdCustomFieldItemBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_idcard_customfield_idcustomfield_item_with_http_info(id_card, id_custom_field, **kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_idcard_customfield_idcustomfield_item_with_http_info(id_card, id_custom_field, **kwargs)  # noqa: E501
            return data

    def put_cards_idcard_customfield_idcustomfield_item_with_http_info(self, id_card, id_custom_field, **kwargs):  # noqa: E501
        """Update Custom Field item on Card  # noqa: E501

        Setting, updating, and removing the value for a Custom Field on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_idcard_customfield_idcustomfield_item_with_http_info(id_card, id_custom_field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_card: ID of the card that the Custom Field value should be set/updated for (required)
        :param TrelloID id_custom_field: ID of the Custom Field on the card. (required)
        :param IdCustomFieldItemBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_card', 'id_custom_field', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_idcard_customfield_idcustomfield_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_card' is set
        if ('id_card' not in params or
                params['id_card'] is None):
            raise ValueError("Missing the required parameter `id_card` when calling `put_cards_idcard_customfield_idcustomfield_item`")  # noqa: E501
        # verify the required parameter 'id_custom_field' is set
        if ('id_custom_field' not in params or
                params['id_custom_field'] is None):
            raise ValueError("Missing the required parameter `id_custom_field` when calling `put_cards_idcard_customfield_idcustomfield_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_card' in params:
            path_params['idCard'] = params['id_card']  # noqa: E501
        if 'id_custom_field' in params:
            path_params['idCustomField'] = params['id_custom_field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{idCard}/customField/{idCustomField}/item', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_cards_idcard_customfields(self, **kwargs):  # noqa: E501
        """Update Multiple Custom Field items on Card  # noqa: E501

        Setting, updating, and removing the values for multiple Custom Fields on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_idcard_customfields(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdCardCustomFieldsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_cards_idcard_customfields_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_cards_idcard_customfields_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_cards_idcard_customfields_with_http_info(self, **kwargs):  # noqa: E501
        """Update Multiple Custom Field items on Card  # noqa: E501

        Setting, updating, and removing the values for multiple Custom Fields on a card. For more details on updating custom fields check out the [Getting Started With Custom Fields](/cloud/trello/guides/rest-api/getting-started-with-custom-fields/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_cards_idcard_customfields_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdCardCustomFieldsBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_cards_idcard_customfields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/cards/{idCard}/customFields', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_checklists_id_field(self, id, field, value, **kwargs):  # noqa: E501
        """Update field on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_checklists_id_field(id, field, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str field: Field to update. (required)
        :param Value value: The value to change the checklist name to. Should be a string of length 1 to 16384. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_checklists_id_field_with_http_info(id, field, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_checklists_id_field_with_http_info(id, field, value, **kwargs)  # noqa: E501
            return data

    def put_checklists_id_field_with_http_info(self, id, field, value, **kwargs):  # noqa: E501
        """Update field on a Checklist  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_checklists_id_field_with_http_info(id, field, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str field: Field to update. (required)
        :param Value value: The value to change the checklist name to. Should be a string of length 1 to 16384. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_checklists_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_checklists_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `put_checklists_id_field`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_checklists_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_checlists_id(self, id, **kwargs):  # noqa: E501
        """Update a Checklist  # noqa: E501

        Update an existing checklist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_checlists_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str name: Name of the new checklist being created. Should be length of 1 to 16384.
        :param PosStringOrNumber pos: Determines the position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_checlists_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_checlists_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_checlists_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Checklist  # noqa: E501

        Update an existing checklist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_checlists_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of a checklist. (required)
        :param str name: Name of the new checklist being created. Should be length of 1 to 16384.
        :param PosStringOrNumber pos: Determines the position of the checklist on the card. One of: `top`, `bottom`, or a positive number.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_checlists_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_checlists_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/checklists/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_customfields_id(self, id, **kwargs):  # noqa: E501
        """Update a Custom Field definition  # noqa: E501

        Update a Custom Field definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_customfields_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Custom Field. (required)
        :param CustomFieldsIdBody body:
        :return: CustomField
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_customfields_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_customfields_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_customfields_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Custom Field definition  # noqa: E501

        Update a Custom Field definition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_customfields_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Custom Field. (required)
        :param CustomFieldsIdBody body:
        :return: CustomField
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_customfields_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_customfields_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/customFields/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomField',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_enterprises_id_admins_idmember(self, id, id_member, **kwargs):  # noqa: E501
        """Update Member to be admin of Enterprise  # noqa: E501

        Make Member an admin of Enterprise.   NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_admins_idmember(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_member: ID of member to be made an admin of enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_enterprises_id_admins_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
        else:
            (data) = self.put_enterprises_id_admins_idmember_with_http_info(id, id_member, **kwargs)  # noqa: E501
            return data

    def put_enterprises_id_admins_idmember_with_http_info(self, id, id_member, **kwargs):  # noqa: E501
        """Update Member to be admin of Enterprise  # noqa: E501

        Make Member an admin of Enterprise.   NOTE: This endpoint is not available to enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_admins_idmember_with_http_info(id, id_member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the enterprise to retrieve. (required)
        :param TrelloID id_member: ID of member to be made an admin of enterprise. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_enterprises_id_admins_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_enterprises_id_admins_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `put_enterprises_id_admins_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/admins/{idMember}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_enterprises_id_enterprise_join_request_bulk(self, id, id_organizations, **kwargs):  # noqa: E501
        """Decline enterpriseJoinRequests from one organization or a bulk list of organizations.  # noqa: E501

        Decline enterpriseJoinRequests from one organization or bulk amount of organizations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_enterprise_join_request_bulk(id, id_organizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param list[object] id_organizations: An array of IDs of an Organization resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_enterprises_id_enterprise_join_request_bulk_with_http_info(id, id_organizations, **kwargs)  # noqa: E501
        else:
            (data) = self.put_enterprises_id_enterprise_join_request_bulk_with_http_info(id, id_organizations, **kwargs)  # noqa: E501
            return data

    def put_enterprises_id_enterprise_join_request_bulk_with_http_info(self, id, id_organizations, **kwargs):  # noqa: E501
        """Decline enterpriseJoinRequests from one organization or a bulk list of organizations.  # noqa: E501

        Decline enterpriseJoinRequests from one organization or bulk amount of organizations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_enterprise_join_request_bulk_with_http_info(id, id_organizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param list[object] id_organizations: An array of IDs of an Organization resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organizations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_enterprises_id_enterprise_join_request_bulk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_enterprises_id_enterprise_join_request_bulk`")  # noqa: E501
        # verify the required parameter 'id_organizations' is set
        if ('id_organizations' not in params or
                params['id_organizations'] is None):
            raise ValueError("Missing the required parameter `id_organizations` when calling `put_enterprises_id_enterprise_join_request_bulk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_organizations' in params:
            query_params.append(('idOrganizations', params['id_organizations']))  # noqa: E501
            collection_formats['idOrganizations'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/${id}/enterpriseJoinRequest/bulk', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_enterprises_id_members_idmember_licensed(self, id, id_member, value, **kwargs):  # noqa: E501
        """Update a Member's licensed status  # noqa: E501

        This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. Revoking a license will deactivate a Member of an Enterprise.    NOTE: Revoking of licenses is not possible for enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_members_idmember_licensed(id, id_member, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise. (required)
        :param TrelloID id_member: The ID of the Member (required)
        :param bool value: Boolean value to determine whether the user should be given an Enterprise license (true) or not (false). (required)
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_enterprises_id_members_idmember_licensed_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_enterprises_id_members_idmember_licensed_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
            return data

    def put_enterprises_id_members_idmember_licensed_with_http_info(self, id, id_member, value, **kwargs):  # noqa: E501
        """Update a Member's licensed status  # noqa: E501

        This endpoint is used to update whether the provided Member should use one of the Enterprise's available licenses or not. Revoking a license will deactivate a Member of an Enterprise.    NOTE: Revoking of licenses is not possible for enterprises that have opted in to user management via AdminHub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_members_idmember_licensed_with_http_info(id, id_member, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise. (required)
        :param TrelloID id_member: The ID of the Member (required)
        :param bool value: Boolean value to determine whether the user should be given an Enterprise license (true) or not (false). (required)
        :return: Member
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_enterprises_id_members_idmember_licensed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_enterprises_id_members_idmember_licensed`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `put_enterprises_id_members_idmember_licensed`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_enterprises_id_members_idmember_licensed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/members/{idMember}/licensed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Member',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_enterprises_id_organizations(self, id, id_organization, **kwargs):  # noqa: E501
        """Transfer an Organization to an Enterprise.  # noqa: E501

        Transfer an organization to an enterprise.   NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in the organization being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_organizations(id, id_organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param str id_organization: ID of Organization to be transferred to Enterprise. (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_enterprises_id_organizations_with_http_info(id, id_organization, **kwargs)  # noqa: E501
        else:
            (data) = self.put_enterprises_id_organizations_with_http_info(id, id_organization, **kwargs)  # noqa: E501
            return data

    def put_enterprises_id_organizations_with_http_info(self, id, id_organization, **kwargs):  # noqa: E501
        """Transfer an Organization to an Enterprise.  # noqa: E501

        Transfer an organization to an enterprise.   NOTE: For enterprises that have opted in to user management via AdminHub, this endpoint will result in the organization being added to the enterprise asynchronously. A 200 response only indicates receipt of the request, it does not indicate successful addition to the enterprise.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_enterprises_id_organizations_with_http_info(id, id_organization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the Enterprise to retrieve. (required)
        :param str id_organization: ID of Organization to be transferred to Enterprise. (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_organization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_enterprises_id_organizations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_enterprises_id_organizations`")  # noqa: E501
        # verify the required parameter 'id_organization' is set
        if ('id_organization' not in params or
                params['id_organization'] is None):
            raise ValueError("Missing the required parameter `id_organization` when calling `put_enterprises_id_organizations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id_organization' in params:
            query_params.append(('idOrganization', params['id_organization']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/enterprises/{id}/organizations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_id_idboard(self, id, value, **kwargs):  # noqa: E501
        """Move List to Board  # noqa: E501

        Move a List to a different Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_id_idboard(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param TrelloID value: The ID of the board to move the list to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_id_idboard_with_http_info(id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_id_idboard_with_http_info(id, value, **kwargs)  # noqa: E501
            return data

    def put_id_idboard_with_http_info(self, id, value, **kwargs):  # noqa: E501
        """Move List to Board  # noqa: E501

        Move a List to a different Board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_id_idboard_with_http_info(id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param TrelloID value: The ID of the board to move the list to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_id_idboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_id_idboard`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_id_idboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/idBoard', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_labels_id(self, id, **kwargs):  # noqa: E501
        """Update a Label  # noqa: E501

        Update a label by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_labels_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Label (required)
        :param str name: The new name for the label
        :param Color color: The new color for the label. See: [fields](/cloud/trello/guides/rest-api/object-definitions/) for color options
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_labels_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_labels_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_labels_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Label  # noqa: E501

        Update a label by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_labels_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the Label (required)
        :param str name: The new name for the label
        :param Color color: The new color for the label. See: [fields](/cloud/trello/guides/rest-api/object-definitions/) for color options
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'color']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_labels_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_labels_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_labels_id_field(self, id, field, value, **kwargs):  # noqa: E501
        """Update a field on a label  # noqa: E501

        Update a field on a label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_labels_id_field(id, field, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the label (required)
        :param str field: The field on the Label to update. (required)
        :param TrelloID value: The new value for the field. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_labels_id_field_with_http_info(id, field, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_labels_id_field_with_http_info(id, field, value, **kwargs)  # noqa: E501
            return data

    def put_labels_id_field_with_http_info(self, id, field, value, **kwargs):  # noqa: E501
        """Update a field on a label  # noqa: E501

        Update a field on a label.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_labels_id_field_with_http_info(id, field, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the label (required)
        :param str field: The field on the Label to update. (required)
        :param TrelloID value: The new value for the field. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_labels_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_labels_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `put_labels_id_field`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_labels_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/labels/{id}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_lists_id(self, id, **kwargs):  # noqa: E501
        """Update a List  # noqa: E501

        Update the properties of a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_lists_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str name: New name for the list
        :param bool closed: Whether the list should be closed (archived)
        :param TrelloID id_board: ID of a board the list should be moved to
        :param Pos2 pos: New position for the list: `top`, `bottom`, or a positive floating point number
        :param bool subscribed: Whether the active member is subscribed to this list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_lists_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_lists_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_lists_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a List  # noqa: E501

        Update the properties of a List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_lists_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the list (required)
        :param str name: New name for the list
        :param bool closed: Whether the list should be closed (archived)
        :param TrelloID id_board: ID of a board the list should be moved to
        :param Pos2 pos: New position for the list: `top`, `bottom`, or a positive floating point number
        :param bool subscribed: Whether the active member is subscribed to this list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'closed', 'id_board', 'pos', 'subscribed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_lists_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_lists_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'closed' in params:
            query_params.append(('closed', params['closed']))  # noqa: E501
        if 'id_board' in params:
            query_params.append(('idBoard', params['id_board']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501
        if 'subscribed' in params:
            query_params.append(('subscribed', params['subscribed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_lists_id_closed(self, id, **kwargs):  # noqa: E501
        """Archive or unarchive a list  # noqa: E501

        Archive or unarchive a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_lists_id_closed(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param TrelloID value: Set to true to close (archive) the list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_lists_id_closed_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_lists_id_closed_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_lists_id_closed_with_http_info(self, id, **kwargs):  # noqa: E501
        """Archive or unarchive a list  # noqa: E501

        Archive or unarchive a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_lists_id_closed_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param TrelloID value: Set to true to close (archive) the list
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_lists_id_closed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_lists_id_closed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/closed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_lists_id_field(self, id, field, **kwargs):  # noqa: E501
        """Update a field on a List  # noqa: E501

        Rename a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_lists_id_field(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param str field: The field on the List to be updated (required)
        :param Value1 value: The new value for the field
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_lists_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.put_lists_id_field_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def put_lists_id_field_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Update a field on a List  # noqa: E501

        Rename a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_lists_id_field_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the list (required)
        :param str field: The field on the List to be updated (required)
        :param Value1 value: The new value for the field
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_lists_id_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_lists_id_field`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `put_lists_id_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/lists/{id}/{field}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id(self, id, **kwargs):  # noqa: E501
        """Update a Member  # noqa: E501

        Update a Member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str full_name: New name for the member. Cannot begin or end with a space.
        :param str initials: New initials for the member. 1-4 characters long.
        :param str username: New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique.
        :param str bio:
        :param str avatar_source: One of: `gravatar`, `none`, `upload`
        :param bool prefscolor_blind:
        :param str prefslocale:
        :param int prefsminutes_between_summaries: `-1` for disabled, `1`, or `60`
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_members_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Member  # noqa: E501

        Update a Member  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param str full_name: New name for the member. Cannot begin or end with a space.
        :param str initials: New initials for the member. 1-4 characters long.
        :param str username: New username for the member. At least 3 characters long, only lowercase letters, underscores, and numbers. Must be unique.
        :param str bio:
        :param str avatar_source: One of: `gravatar`, `none`, `upload`
        :param bool prefscolor_blind:
        :param str prefslocale:
        :param int prefsminutes_between_summaries: `-1` for disabled, `1`, or `60`
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'full_name', 'initials', 'username', 'bio', 'avatar_source', 'prefscolor_blind', 'prefslocale', 'prefsminutes_between_summaries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'full_name' in params:
            query_params.append(('fullName', params['full_name']))  # noqa: E501
        if 'initials' in params:
            query_params.append(('initials', params['initials']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'bio' in params:
            query_params.append(('bio', params['bio']))  # noqa: E501
        if 'avatar_source' in params:
            query_params.append(('avatarSource', params['avatar_source']))  # noqa: E501
        if 'prefscolor_blind' in params:
            query_params.append(('prefs/colorBlind', params['prefscolor_blind']))  # noqa: E501
        if 'prefslocale' in params:
            query_params.append(('prefs/locale', params['prefslocale']))  # noqa: E501
        if 'prefsminutes_between_summaries' in params:
            query_params.append(('prefs/minutesBetweenSummaries', params['prefsminutes_between_summaries']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_boardbackgrounds_idbackground(self, id, id_background, **kwargs):  # noqa: E501
        """Update a Member's custom Board background  # noqa: E501

        Update a board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_boardbackgrounds_idbackground(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the board background (required)
        :param str brightness: One of: `dark`, `light`, `unknown`
        :param bool tile: Whether the background should be tiled
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def put_members_id_boardbackgrounds_idbackground_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Update a Member's custom Board background  # noqa: E501

        Update a board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_boardbackgrounds_idbackground_with_http_info(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the board background (required)
        :param str brightness: One of: `dark`, `light`, `unknown`
        :param bool tile: Whether the background should be tiled
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background', 'brightness', 'tile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_boardbackgrounds_idbackground" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_boardbackgrounds_idbackground`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `put_members_id_boardbackgrounds_idbackground`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []
        if 'brightness' in params:
            query_params.append(('brightness', params['brightness']))  # noqa: E501
        if 'tile' in params:
            query_params.append(('tile', params['tile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardBackgrounds/{idBackground}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoardBackground',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_boardstars_idstar(self, id, id_star, **kwargs):  # noqa: E501
        """Update the position of a boardStar of Member  # noqa: E501

        Update the position of a starred board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_boardstars_idstar(id, id_star, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_star: The ID of the board star (required)
        :param PosStringOrNumber pos: New position for the starred board. `top`, `bottom`, or a positive float.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_boardstars_idstar_with_http_info(id, id_star, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_boardstars_idstar_with_http_info(id, id_star, **kwargs)  # noqa: E501
            return data

    def put_members_id_boardstars_idstar_with_http_info(self, id, id_star, **kwargs):  # noqa: E501
        """Update the position of a boardStar of Member  # noqa: E501

        Update the position of a starred board  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_boardstars_idstar_with_http_info(id, id_star, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or username of the member (required)
        :param TrelloID id_star: The ID of the board star (required)
        :param PosStringOrNumber pos: New position for the starred board. `top`, `bottom`, or a positive float.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_star', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_boardstars_idstar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_boardstars_idstar`")  # noqa: E501
        # verify the required parameter 'id_star' is set
        if ('id_star' not in params or
                params['id_star'] is None):
            raise ValueError("Missing the required parameter `id_star` when calling `put_members_id_boardstars_idstar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_star' in params:
            path_params['idStar'] = params['id_star']  # noqa: E501

        query_params = []
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/boardStars/{idStar}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_customboardbackgrounds_idbackground(self, id, id_background, **kwargs):  # noqa: E501
        """Update custom Board Background of Member  # noqa: E501

        Update a specific custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_customboardbackgrounds_idbackground(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id2 id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the custom background (required)
        :param str brightness: One of: `dark`, `light`, `unknown`
        :param bool tile: Whether to tile the background
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, **kwargs)  # noqa: E501
            return data

    def put_members_id_customboardbackgrounds_idbackground_with_http_info(self, id, id_background, **kwargs):  # noqa: E501
        """Update custom Board Background of Member  # noqa: E501

        Update a specific custom board background  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_customboardbackgrounds_idbackground_with_http_info(id, id_background, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id2 id: The ID or username of the member (required)
        :param TrelloID id_background: The ID of the custom background (required)
        :param str brightness: One of: `dark`, `light`, `unknown`
        :param bool tile: Whether to tile the background
        :return: BoardBackground
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_background', 'brightness', 'tile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_customboardbackgrounds_idbackground" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_customboardbackgrounds_idbackground`")  # noqa: E501
        # verify the required parameter 'id_background' is set
        if ('id_background' not in params or
                params['id_background'] is None):
            raise ValueError("Missing the required parameter `id_background` when calling `put_members_id_customboardbackgrounds_idbackground`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_background' in params:
            path_params['idBackground'] = params['id_background']  # noqa: E501

        query_params = []
        if 'brightness' in params:
            query_params.append(('brightness', params['brightness']))  # noqa: E501
        if 'tile' in params:
            query_params.append(('tile', params['tile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/customBoardBackgrounds/{idBackground}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BoardBackground',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_notification_channel_settings_channel_blocked_keys(self, body, id, **kwargs):  # noqa: E501
        """Update blocked notification keys of Member on a channel  # noqa: E501

        Update blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_notification_channel_settings_channel_blocked_keys(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNotificationsChannelSettingsBody body: (required)
        :param Id3 id: The ID or username of the member (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_notification_channel_settings_channel_blocked_keys_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_notification_channel_settings_channel_blocked_keys_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def put_members_id_notification_channel_settings_channel_blocked_keys_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update blocked notification keys of Member on a channel  # noqa: E501

        Update blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_notification_channel_settings_channel_blocked_keys_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IdNotificationsChannelSettingsBody body: (required)
        :param Id3 id: The ID or username of the member (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_notification_channel_settings_channel_blocked_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_members_id_notification_channel_settings_channel_blocked_keys`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_notification_channel_settings_channel_blocked_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notificationsChannelSettings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationChannelSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_notification_channel_settings_channel_blocked_keys_0(self, body, id, channel, **kwargs):  # noqa: E501
        """Update blocked notification keys of Member on a channel  # noqa: E501

        Update blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_notification_channel_settings_channel_blocked_keys_0(body, id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationsChannelSettingsChannelBody body: (required)
        :param Id4 id: The ID or username of the member (required)
        :param Channel channel: Channel to block notifications on (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_notification_channel_settings_channel_blocked_keys_0_with_http_info(body, id, channel, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_notification_channel_settings_channel_blocked_keys_0_with_http_info(body, id, channel, **kwargs)  # noqa: E501
            return data

    def put_members_id_notification_channel_settings_channel_blocked_keys_0_with_http_info(self, body, id, channel, **kwargs):  # noqa: E501
        """Update blocked notification keys of Member on a channel  # noqa: E501

        Update blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_notification_channel_settings_channel_blocked_keys_0_with_http_info(body, id, channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NotificationsChannelSettingsChannelBody body: (required)
        :param Id4 id: The ID or username of the member (required)
        :param Channel channel: Channel to block notifications on (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_notification_channel_settings_channel_blocked_keys_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_members_id_notification_channel_settings_channel_blocked_keys_0`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_notification_channel_settings_channel_blocked_keys_0`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if ('channel' not in params or
                params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `put_members_id_notification_channel_settings_channel_blocked_keys_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'channel' in params:
            path_params['channel'] = params['channel']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notificationsChannelSettings/{channel}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationChannelSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_notification_channel_settings_channel_blocked_keys_1(self, id, channel, blocked_keys, **kwargs):  # noqa: E501
        """Update blocked notification keys of Member on a channel  # noqa: E501

        Update blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_notification_channel_settings_channel_blocked_keys_1(id, channel, blocked_keys, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id5 id: The ID or username of the member (required)
        :param Channel channel: Channel to block notifications on (required)
        :param BlockedKey blocked_keys: Singular key or comma-separated list of notification keys (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_notification_channel_settings_channel_blocked_keys_1_with_http_info(id, channel, blocked_keys, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_notification_channel_settings_channel_blocked_keys_1_with_http_info(id, channel, blocked_keys, **kwargs)  # noqa: E501
            return data

    def put_members_id_notification_channel_settings_channel_blocked_keys_1_with_http_info(self, id, channel, blocked_keys, **kwargs):  # noqa: E501
        """Update blocked notification keys of Member on a channel  # noqa: E501

        Update blocked notification keys of Member on a specific channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_notification_channel_settings_channel_blocked_keys_1_with_http_info(id, channel, blocked_keys, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Id5 id: The ID or username of the member (required)
        :param Channel channel: Channel to block notifications on (required)
        :param BlockedKey blocked_keys: Singular key or comma-separated list of notification keys (required)
        :return: NotificationChannelSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'channel', 'blocked_keys']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_notification_channel_settings_channel_blocked_keys_1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_notification_channel_settings_channel_blocked_keys_1`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if ('channel' not in params or
                params['channel'] is None):
            raise ValueError("Missing the required parameter `channel` when calling `put_members_id_notification_channel_settings_channel_blocked_keys_1`")  # noqa: E501
        # verify the required parameter 'blocked_keys' is set
        if ('blocked_keys' not in params or
                params['blocked_keys'] is None):
            raise ValueError("Missing the required parameter `blocked_keys` when calling `put_members_id_notification_channel_settings_channel_blocked_keys_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'channel' in params:
            path_params['channel'] = params['channel']  # noqa: E501
        if 'blocked_keys' in params:
            path_params['blockedKeys'] = params['blocked_keys']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/notificationsChannelSettings/{channel}/{blockedKeys}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationChannelSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_members_id_savedsearches_idsearch(self, id, id_search, **kwargs):  # noqa: E501
        """Update a saved search  # noqa: E501

        Update a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_savedsearches_idsearch(id, id_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :param str name: The new name for the saved search
        :param str query: The new search query
        :param str pos: New position for saves search. `top`, `bottom`, or a positive float.
        :return: SavedSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_members_id_savedsearches_idsearch_with_http_info(id, id_search, **kwargs)  # noqa: E501
        else:
            (data) = self.put_members_id_savedsearches_idsearch_with_http_info(id, id_search, **kwargs)  # noqa: E501
            return data

    def put_members_id_savedsearches_idsearch_with_http_info(self, id, id_search, **kwargs):  # noqa: E501
        """Update a saved search  # noqa: E501

        Update a saved search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_members_id_savedsearches_idsearch_with_http_info(id, id_search, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID or username of the member (required)
        :param str id_search: The ID of the saved search to delete (required)
        :param str name: The new name for the saved search
        :param str query: The new search query
        :param str pos: New position for saves search. `top`, `bottom`, or a positive float.
        :return: SavedSearch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_search', 'name', 'query', 'pos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_members_id_savedsearches_idsearch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_members_id_savedsearches_idsearch`")  # noqa: E501
        # verify the required parameter 'id_search' is set
        if ('id_search' not in params or
                params['id_search'] is None):
            raise ValueError("Missing the required parameter `id_search` when calling `put_members_id_savedsearches_idsearch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_search' in params:
            path_params['idSearch'] = params['id_search']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'pos' in params:
            query_params.append(('pos', params['pos']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/members/{id}/savedSearches/{idSearch}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SavedSearch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_notifications_id(self, id, **kwargs):  # noqa: E501
        """Update a Notification's read status  # noqa: E501

        Update the read status of a notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_notifications_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param bool unread: Whether the notification should be marked as read or not
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_notifications_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_notifications_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_notifications_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Notification's read status  # noqa: E501

        Update the read status of a notification  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_notifications_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param bool unread: Whether the notification should be marked as read or not
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'unread']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_notifications_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_notifications_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'unread' in params:
            query_params.append(('unread', params['unread']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_notifications_id_unread(self, id, **kwargs):  # noqa: E501
        """Update Notification's read status  # noqa: E501

        Update Notification's read status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_notifications_id_unread(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param str value:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_notifications_id_unread_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_notifications_id_unread_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_notifications_id_unread_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update Notification's read status  # noqa: E501

        Update Notification's read status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_notifications_id_unread_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID of the notification (required)
        :param str value:
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_notifications_id_unread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_notifications_id_unread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/notifications/{id}/unread', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_organizations_id(self, id, **kwargs):  # noqa: E501
        """Update an Organization  # noqa: E501

        Update an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :param str name: A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique
        :param str display_name: A new displayName for the organization. Must be at least 1 character long and not begin or end with a space.
        :param str desc: A new description for the organization
        :param str website: A URL starting with `http://`, `https://`, or `null`
        :param str prefsassociated_domain: The Google Apps domain to link this org to.
        :param bool prefsexternal_members_disabled: Whether non-workspace members can be added to boards inside the Workspace
        :param int prefsgoogle_apps_version: `1` or `2`
        :param str prefsboard_visibility_restrictorg: Who on the Workspace can make Workspace visible boards. One of `admin`, `none`, `org`
        :param str prefsboard_visibility_restrictprivate: Who can make private boards. One of: `admin`, `none`, `org`
        :param str prefsboard_visibility_restrictpublic: Who on the Workspace can make public boards. One of: `admin`, `none`, `org`
        :param str prefsorg_invite_restrict: An email address with optional wildcard characters. (E.g. `subdomain.*.trello.com`)
        :param str prefspermission_level: Whether the Workspace page is publicly visible. One of: `private`, `public`
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organizations_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_organizations_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an Organization  # noqa: E501

        Update an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the Organization (required)
        :param str name: A new name for the organization. At least 3 lowercase letters, underscores, and numbers. Must be unique
        :param str display_name: A new displayName for the organization. Must be at least 1 character long and not begin or end with a space.
        :param str desc: A new description for the organization
        :param str website: A URL starting with `http://`, `https://`, or `null`
        :param str prefsassociated_domain: The Google Apps domain to link this org to.
        :param bool prefsexternal_members_disabled: Whether non-workspace members can be added to boards inside the Workspace
        :param int prefsgoogle_apps_version: `1` or `2`
        :param str prefsboard_visibility_restrictorg: Who on the Workspace can make Workspace visible boards. One of `admin`, `none`, `org`
        :param str prefsboard_visibility_restrictprivate: Who can make private boards. One of: `admin`, `none`, `org`
        :param str prefsboard_visibility_restrictpublic: Who on the Workspace can make public boards. One of: `admin`, `none`, `org`
        :param str prefsorg_invite_restrict: An email address with optional wildcard characters. (E.g. `subdomain.*.trello.com`)
        :param str prefspermission_level: Whether the Workspace page is publicly visible. One of: `private`, `public`
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'display_name', 'desc', 'website', 'prefsassociated_domain', 'prefsexternal_members_disabled', 'prefsgoogle_apps_version', 'prefsboard_visibility_restrictorg', 'prefsboard_visibility_restrictprivate', 'prefsboard_visibility_restrictpublic', 'prefsorg_invite_restrict', 'prefspermission_level']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_organizations_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('displayName', params['display_name']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'website' in params:
            query_params.append(('website', params['website']))  # noqa: E501
        if 'prefsassociated_domain' in params:
            query_params.append(('prefs/associatedDomain', params['prefsassociated_domain']))  # noqa: E501
        if 'prefsexternal_members_disabled' in params:
            query_params.append(('prefs/externalMembersDisabled', params['prefsexternal_members_disabled']))  # noqa: E501
        if 'prefsgoogle_apps_version' in params:
            query_params.append(('prefs/googleAppsVersion', params['prefsgoogle_apps_version']))  # noqa: E501
        if 'prefsboard_visibility_restrictorg' in params:
            query_params.append(('prefs/boardVisibilityRestrict/org', params['prefsboard_visibility_restrictorg']))  # noqa: E501
        if 'prefsboard_visibility_restrictprivate' in params:
            query_params.append(('prefs/boardVisibilityRestrict/private', params['prefsboard_visibility_restrictprivate']))  # noqa: E501
        if 'prefsboard_visibility_restrictpublic' in params:
            query_params.append(('prefs/boardVisibilityRestrict/public', params['prefsboard_visibility_restrictpublic']))  # noqa: E501
        if 'prefsorg_invite_restrict' in params:
            query_params.append(('prefs/orgInviteRestrict', params['prefsorg_invite_restrict']))  # noqa: E501
        if 'prefspermission_level' in params:
            query_params.append(('prefs/permissionLevel', params['prefspermission_level']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_organizations_id_members(self, id, email, full_name, **kwargs):  # noqa: E501
        """Update an Organization's Members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_members(id, email, full_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param str email: An email address (required)
        :param str full_name: Name for the member, at least 1 character not beginning or ending with a space (required)
        :param str type: One of: `admin`, `normal`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_organizations_id_members_with_http_info(id, email, full_name, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organizations_id_members_with_http_info(id, email, full_name, **kwargs)  # noqa: E501
            return data

    def put_organizations_id_members_with_http_info(self, id, email, full_name, **kwargs):  # noqa: E501
        """Update an Organization's Members  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_members_with_http_info(id, email, full_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param str email: An email address (required)
        :param str full_name: Name for the member, at least 1 character not beginning or ending with a space (required)
        :param str type: One of: `admin`, `normal`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'email', 'full_name', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_organizations_id_members`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `put_organizations_id_members`")  # noqa: E501
        # verify the required parameter 'full_name' is set
        if ('full_name' not in params or
                params['full_name'] is None):
            raise ValueError("Missing the required parameter `full_name` when calling `put_organizations_id_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'full_name' in params:
            query_params.append(('fullName', params['full_name']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_organizations_id_members_idmember(self, id, id_member, type, **kwargs):  # noqa: E501
        """Update a Member of an Organization  # noqa: E501

        Add a member to a Workspace or update their member type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_members_idmember(id, id_member, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param IdMember id_member: The ID or username of the member to update (required)
        :param str type: One of: `admin`, `normal` (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_organizations_id_members_idmember_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organizations_id_members_idmember_with_http_info(id, id_member, type, **kwargs)  # noqa: E501
            return data

    def put_organizations_id_members_idmember_with_http_info(self, id, id_member, type, **kwargs):  # noqa: E501
        """Update a Member of an Organization  # noqa: E501

        Add a member to a Workspace or update their member type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_members_idmember_with_http_info(id, id_member, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param IdMember id_member: The ID or username of the member to update (required)
        :param str type: One of: `admin`, `normal` (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id_members_idmember" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_organizations_id_members_idmember`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `put_organizations_id_members_idmember`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `put_organizations_id_members_idmember`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_organizations_id_members_idmember_deactivated(self, id, id_member, value, **kwargs):  # noqa: E501
        """Deactivate or reactivate a member of an Organization  # noqa: E501

        Deactivate or reactivate a member of a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_members_idmember_deactivated(id, id_member, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param IdMember1 id_member: The ID or username of the member to update (required)
        :param bool value: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_organizations_id_members_idmember_deactivated_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organizations_id_members_idmember_deactivated_with_http_info(id, id_member, value, **kwargs)  # noqa: E501
            return data

    def put_organizations_id_members_idmember_deactivated_with_http_info(self, id, id_member, value, **kwargs):  # noqa: E501
        """Deactivate or reactivate a member of an Organization  # noqa: E501

        Deactivate or reactivate a member of a Workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organizations_id_members_idmember_deactivated_with_http_info(id, id_member, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :param IdMember1 id_member: The ID or username of the member to update (required)
        :param bool value: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_member', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_organizations_id_members_idmember_deactivated" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_organizations_id_members_idmember_deactivated`")  # noqa: E501
        # verify the required parameter 'id_member' is set
        if ('id_member' not in params or
                params['id_member'] is None):
            raise ValueError("Missing the required parameter `id_member` when calling `put_organizations_id_members_idmember_deactivated`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `put_organizations_id_members_idmember_deactivated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id_member' in params:
            path_params['idMember'] = params['id_member']  # noqa: E501

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{id}/members/{idMember}/deactivated', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_plugins_id(self, id, **kwargs):  # noqa: E501
        """Update a Plugin  # noqa: E501

        Update a Plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_plugins_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_plugins_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_plugins_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_plugins_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Plugin  # noqa: E501

        Update a Plugin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_plugins_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: The ID or name of the organization (required)
        :return: Plugin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_plugins_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_plugins_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/plugins/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Plugin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_plugins_idplugin_listings_idlisting(self, id_plugin, id_listing, **kwargs):  # noqa: E501
        """Updating Plugin's Listing  # noqa: E501

        Update an existing listing for your Power-Up  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_plugins_idplugin_listings_idlisting(id_plugin, id_listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_plugin: The ID of the Power-Up whose listing is being updated. (required)
        :param TrelloID id_listing: The ID of the existing listing for the Power-Up that is being updated. (required)
        :param ListingsIdListingBody body:
        :return: PluginListing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_plugins_idplugin_listings_idlisting_with_http_info(id_plugin, id_listing, **kwargs)  # noqa: E501
        else:
            (data) = self.put_plugins_idplugin_listings_idlisting_with_http_info(id_plugin, id_listing, **kwargs)  # noqa: E501
            return data

    def put_plugins_idplugin_listings_idlisting_with_http_info(self, id_plugin, id_listing, **kwargs):  # noqa: E501
        """Updating Plugin's Listing  # noqa: E501

        Update an existing listing for your Power-Up  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_plugins_idplugin_listings_idlisting_with_http_info(id_plugin, id_listing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id_plugin: The ID of the Power-Up whose listing is being updated. (required)
        :param TrelloID id_listing: The ID of the existing listing for the Power-Up that is being updated. (required)
        :param ListingsIdListingBody body:
        :return: PluginListing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_plugin', 'id_listing', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_plugins_idplugin_listings_idlisting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_plugin' is set
        if ('id_plugin' not in params or
                params['id_plugin'] is None):
            raise ValueError("Missing the required parameter `id_plugin` when calling `put_plugins_idplugin_listings_idlisting`")  # noqa: E501
        # verify the required parameter 'id_listing' is set
        if ('id_listing' not in params or
                params['id_listing'] is None):
            raise ValueError("Missing the required parameter `id_listing` when calling `put_plugins_idplugin_listings_idlisting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_plugin' in params:
            path_params['idPlugin'] = params['id_plugin']  # noqa: E501
        if 'id_listing' in params:
            path_params['idListing'] = params['id_listing']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/plugins/{idPlugin}/listings/{idListing}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PluginListing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_webhooks_id(self, id, **kwargs):  # noqa: E501
        """Update a Webhook  # noqa: E501

        Update a webhook by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_webhooks_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook to retrieve. (required)
        :param str description: A string with a length from `0` to `16384`.
        :param str callback_url: A valid URL that is reachable with a `HEAD` and `POST` request.
        :param TrelloID id_model: ID of the model to be monitored
        :param bool active: Determines whether the webhook is active and sending `POST` requests.
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_webhooks_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_webhooks_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def put_webhooks_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Webhook  # noqa: E501

        Update a webhook by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_webhooks_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook to retrieve. (required)
        :param str description: A string with a length from `0` to `16384`.
        :param str callback_url: A valid URL that is reachable with a `HEAD` and `POST` request.
        :param TrelloID id_model: ID of the model to be monitored
        :param bool active: Determines whether the webhook is active and sending `POST` requests.
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'description', 'callback_url', 'id_model', 'active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_webhooks_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_webhooks_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tokenstokenwebhooks1(self, token, id_webhook, **kwargs):  # noqa: E501
        """Update a Webhook created by Token  # noqa: E501

        Update a Webhook created by Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokenstokenwebhooks1(token, id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TrelloID id_webhook: ID of the [Webhooks](ref:webhooks) to retrieve. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :param str callback_url: The URL that the webhook should `POST` information to.
        :param TrelloID id_model: ID of the object that the webhook is on.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tokenstokenwebhooks1_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
        else:
            (data) = self.tokenstokenwebhooks1_with_http_info(token, id_webhook, **kwargs)  # noqa: E501
            return data

    def tokenstokenwebhooks1_with_http_info(self, token, id_webhook, **kwargs):  # noqa: E501
        """Update a Webhook created by Token  # noqa: E501

        Update a Webhook created by Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tokenstokenwebhooks1_with_http_info(token, id_webhook, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param TrelloID id_webhook: ID of the [Webhooks](ref:webhooks) to retrieve. (required)
        :param str description: A description to be displayed when retrieving information about the webhook.
        :param str callback_url: The URL that the webhook should `POST` information to.
        :param TrelloID id_model: ID of the object that the webhook is on.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'id_webhook', 'description', 'callback_url', 'id_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tokenstokenwebhooks1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `tokenstokenwebhooks1`")  # noqa: E501
        # verify the required parameter 'id_webhook' is set
        if ('id_webhook' not in params or
                params['id_webhook'] is None):
            raise ValueError("Missing the required parameter `id_webhook` when calling `tokenstokenwebhooks1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'id_webhook' in params:
            path_params['idWebhook'] = params['id_webhook']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'callback_url' in params:
            query_params.append(('callbackURL', params['callback_url']))  # noqa: E501
        if 'id_model' in params:
            query_params.append(('idModel', params['id_model']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/tokens/{token}/webhooks/{idWebhook}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooksidfield(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Webhook  # noqa: E501

        Get a field on a Webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooksidfield(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook. (required)
        :param str field: Field to retrieve. One of: `active`, `callbackURL`, `description`, `idModel` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooksidfield_with_http_info(id, field, **kwargs)  # noqa: E501
        else:
            (data) = self.webhooksidfield_with_http_info(id, field, **kwargs)  # noqa: E501
            return data

    def webhooksidfield_with_http_info(self, id, field, **kwargs):  # noqa: E501
        """Get a field on a Webhook  # noqa: E501

        Get a field on a Webhook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooksidfield_with_http_info(id, field, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrelloID id: ID of the webhook. (required)
        :param str field: Field to retrieve. One of: `active`, `callbackURL`, `description`, `idModel` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooksidfield" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `webhooksidfield`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `webhooksidfield`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKey', 'APIToken']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/{id}/{field}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
